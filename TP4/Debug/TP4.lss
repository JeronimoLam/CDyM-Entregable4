
TP4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000a56  00000aea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a56  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000034  00800108  00800108  00000af2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000af2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  00000b64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000144c  00000000  00000000  00000d54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b32  00000000  00000000  000021a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d87  00000000  00000000  00002cd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b4  00000000  00000000  00003a5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000076e  00000000  00000000  00003e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000058a  00000000  00000000  0000457e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00004b08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 16 03 	jmp	0x62c	; 0x62c <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e5       	ldi	r30, 0x56	; 86
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 33       	cpi	r26, 0x3C	; 60
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 93 01 	call	0x326	; 0x326 <main>
  9e:	0c 94 29 05 	jmp	0xa52	; 0xa52 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LDR_config>:

void LDR_Update(){
	ADCSRA |= (1<<ADSC);//start conversion
	if((ADCSRA&(1<<ADIF))==0) {//wait for conversion to finish
		ADCSRA |= (1<<ADIF); //borrar flag
		result = ADC;
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
  ac:	87 e8       	ldi	r24, 0x87	; 135
  ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  b2:	ec e7       	ldi	r30, 0x7C	; 124
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	10 82       	st	Z, r1
  b8:	80 81       	ld	r24, Z
  ba:	80 64       	ori	r24, 0x40	; 64
  bc:	80 83       	st	Z, r24
  be:	08 95       	ret

000000c0 <LDR_get_value>:
	}
}

uint16_t LDR_get_value(){
	if (!is_converting){
  c0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
  c4:	81 11       	cpse	r24, r1
  c6:	08 c0       	rjmp	.+16     	; 0xd8 <LDR_get_value+0x18>
		ADCSRA |= (1<<ADSC);//start conversion
  c8:	ea e7       	ldi	r30, 0x7A	; 122
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	80 64       	ori	r24, 0x40	; 64
  d0:	80 83       	st	Z, r24
		is_converting = 1;
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
	}
	if ((ADCSRA&(1<<ADIF))==0) {//wait for conversion to finish
  d8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  dc:	84 fd       	sbrc	r24, 4
  de:	0f c0       	rjmp	.+30     	; 0xfe <LDR_get_value+0x3e>
		ADCSRA |= (1<<ADIF); //borrar flag
  e0:	ea e7       	ldi	r30, 0x7A	; 122
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	80 61       	ori	r24, 0x10	; 16
  e8:	80 83       	st	Z, r24
		result = (uint16_t) ADC;
  ea:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  ee:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  f2:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <result+0x1>
  f6:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <result>
		is_converting = 0;
  fa:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
	}
	return result;
  fe:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <result>
 102:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <result+0x1>
 106:	08 95       	ret

00000108 <distributeValues>:
void LEDS_setFinalGreen(uint8_t value){
	final_green = value;
}

void LEDS_setFinalBlue(uint8_t value){
	final_blue = value;
 108:	cf 93       	push	r28
 10a:	5d ec       	ldi	r21, 0xCD	; 205
 10c:	85 9f       	mul	r24, r21
 10e:	a1 2d       	mov	r26, r1
 110:	11 24       	eor	r1, r1
 112:	a6 95       	lsr	r26
 114:	a6 95       	lsr	r26
 116:	a6 95       	lsr	r26
 118:	2a 2f       	mov	r18, r26
 11a:	22 0f       	add	r18, r18
 11c:	92 2f       	mov	r25, r18
 11e:	99 0f       	add	r25, r25
 120:	99 0f       	add	r25, r25
 122:	92 0f       	add	r25, r18
 124:	c8 2f       	mov	r28, r24
 126:	c9 1b       	sub	r28, r25
 128:	65 9f       	mul	r22, r21
 12a:	71 2d       	mov	r23, r1
 12c:	11 24       	eor	r1, r1
 12e:	76 95       	lsr	r23
 130:	76 95       	lsr	r23
 132:	76 95       	lsr	r23
 134:	97 2f       	mov	r25, r23
 136:	99 0f       	add	r25, r25
 138:	89 2f       	mov	r24, r25
 13a:	88 0f       	add	r24, r24
 13c:	88 0f       	add	r24, r24
 13e:	89 0f       	add	r24, r25
 140:	b6 2f       	mov	r27, r22
 142:	b8 1b       	sub	r27, r24
 144:	45 9f       	mul	r20, r21
 146:	51 2d       	mov	r21, r1
 148:	11 24       	eor	r1, r1
 14a:	56 95       	lsr	r21
 14c:	56 95       	lsr	r21
 14e:	56 95       	lsr	r21
 150:	95 2f       	mov	r25, r21
 152:	99 0f       	add	r25, r25
 154:	89 2f       	mov	r24, r25
 156:	88 0f       	add	r24, r24
 158:	88 0f       	add	r24, r24
 15a:	89 0f       	add	r24, r25
 15c:	64 2f       	mov	r22, r20
 15e:	68 1b       	sub	r22, r24
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	21 c0       	rjmp	.+66     	; 0x1a6 <distributeValues+0x9e>
 164:	28 2f       	mov	r18, r24
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	8c 17       	cp	r24, r28
 16a:	18 f4       	brcc	.+6      	; 0x172 <distributeValues+0x6a>
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	9a 0f       	add	r25, r26
 170:	01 c0       	rjmp	.+2      	; 0x174 <distributeValues+0x6c>
 172:	9a 2f       	mov	r25, r26
 174:	f9 01       	movw	r30, r18
 176:	e1 5e       	subi	r30, 0xE1	; 225
 178:	fe 4f       	sbci	r31, 0xFE	; 254
 17a:	90 83       	st	Z, r25
 17c:	8b 17       	cp	r24, r27
 17e:	18 f4       	brcc	.+6      	; 0x186 <distributeValues+0x7e>
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	97 0f       	add	r25, r23
 184:	01 c0       	rjmp	.+2      	; 0x188 <distributeValues+0x80>
 186:	97 2f       	mov	r25, r23
 188:	f9 01       	movw	r30, r18
 18a:	eb 5e       	subi	r30, 0xEB	; 235
 18c:	fe 4f       	sbci	r31, 0xFE	; 254
 18e:	90 83       	st	Z, r25
 190:	86 17       	cp	r24, r22
 192:	18 f4       	brcc	.+6      	; 0x19a <distributeValues+0x92>
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	95 0f       	add	r25, r21
 198:	01 c0       	rjmp	.+2      	; 0x19c <distributeValues+0x94>
 19a:	95 2f       	mov	r25, r21
 19c:	f9 01       	movw	r30, r18
 19e:	e5 5f       	subi	r30, 0xF5	; 245
 1a0:	fe 4f       	sbci	r31, 0xFE	; 254
 1a2:	90 83       	st	Z, r25
 1a4:	8f 5f       	subi	r24, 0xFF	; 255
 1a6:	8a 30       	cpi	r24, 0x0A	; 10
 1a8:	e8 f2       	brcs	.-70     	; 0x164 <distributeValues+0x5c>
 1aa:	cf 91       	pop	r28
 1ac:	08 95       	ret

000001ae <LEDS_setRed>:
 1ae:	cf 93       	push	r28
 1b0:	c8 2f       	mov	r28, r24
 1b2:	0e 94 05 03 	call	0x60a	; 0x60a <PWM_set_comp_value>
 1b6:	c0 93 2b 01 	sts	0x012B, r28	; 0x80012b <red>
 1ba:	cf 91       	pop	r28
 1bc:	08 95       	ret

000001be <LEDS_setGreen>:
 1be:	2f ef       	ldi	r18, 0xFF	; 255
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	28 1b       	sub	r18, r24
 1c4:	31 09       	sbc	r19, r1
 1c6:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 1ca:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 1ce:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <green>
 1d2:	08 95       	ret

000001d4 <LEDS_setBlue>:
 1d4:	2f ef       	ldi	r18, 0xFF	; 255
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	28 1b       	sub	r18, r24
 1da:	31 09       	sbc	r19, r1
 1dc:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1e0:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 1e4:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <blue>
 1e8:	08 95       	ret

000001ea <LEDS_init>:
 1ea:	84 b1       	in	r24, 0x04	; 4
 1ec:	86 62       	ori	r24, 0x26	; 38
 1ee:	84 b9       	out	0x04, r24	; 4
 1f0:	85 b1       	in	r24, 0x05	; 5
 1f2:	80 62       	ori	r24, 0x20	; 32
 1f4:	85 b9       	out	0x05, r24	; 5
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LEDS_setRed>
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	0e 94 df 00 	call	0x1be	; 0x1be <LEDS_setGreen>
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LEDS_setBlue>
 208:	20 e0       	ldi	r18, 0x00	; 0
 20a:	0f c0       	rjmp	.+30     	; 0x22a <LEDS_init+0x40>
 20c:	82 2f       	mov	r24, r18
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	fc 01       	movw	r30, r24
 212:	e1 5e       	subi	r30, 0xE1	; 225
 214:	fe 4f       	sbci	r31, 0xFE	; 254
 216:	10 82       	st	Z, r1
 218:	fc 01       	movw	r30, r24
 21a:	eb 5e       	subi	r30, 0xEB	; 235
 21c:	fe 4f       	sbci	r31, 0xFE	; 254
 21e:	10 82       	st	Z, r1
 220:	fc 01       	movw	r30, r24
 222:	e5 5f       	subi	r30, 0xF5	; 245
 224:	fe 4f       	sbci	r31, 0xFE	; 254
 226:	10 82       	st	Z, r1
 228:	2f 5f       	subi	r18, 0xFF	; 255
 22a:	2a 30       	cpi	r18, 0x0A	; 10
 22c:	78 f3       	brcs	.-34     	; 0x20c <LEDS_init+0x22>
 22e:	08 95       	ret

00000230 <LEDS_getRed>:
 230:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <red>
 234:	08 95       	ret

00000236 <LEDS_getGreen>:
 236:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <green>
 23a:	08 95       	ret

0000023c <LEDS_getBlue>:
 23c:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <blue>
 240:	08 95       	ret

00000242 <LEDS_getFinalRed>:
}

uint8_t LEDS_getFinalRed(){
	return final_red;
}
 242:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <final_red>
 246:	08 95       	ret

00000248 <LEDS_getFinalGreen>:

uint8_t LEDS_getFinalGreen(){
	return final_green;
}
 248:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <final_green>
 24c:	08 95       	ret

0000024e <LEDS_getFinalBlue>:

uint8_t LEDS_getFinalBlue(){
	return final_blue;
}
 24e:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <final_blue>
 252:	08 95       	ret

00000254 <LEDS_setFinalRGB>:

void LEDS_setFinalRGB(uint8_t valueR, uint8_t valueG, uint8_t valueB){
	final_red = valueR;
 254:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <final_red>
	final_green = valueG;
 258:	60 93 2d 01 	sts	0x012D, r22	; 0x80012d <final_green>
	final_blue = valueB;
 25c:	40 93 2c 01 	sts	0x012C, r20	; 0x80012c <final_blue>
	distributeValues(valueR, valueG, valueB);
 260:	0e 94 84 00 	call	0x108	; 0x108 <distributeValues>
 264:	08 95       	ret

00000266 <LEDS_incrementRed>:
}

void LEDS_incrementRed(uint16_t value){
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	ec 01       	movw	r28, r24
	LEDS_setRed(LEDS_getRed() + red_increments[value]);
 26c:	0e 94 18 01 	call	0x230	; 0x230 <LEDS_getRed>
 270:	c1 5e       	subi	r28, 0xE1	; 225
 272:	de 4f       	sbci	r29, 0xFE	; 254
 274:	98 81       	ld	r25, Y
 276:	89 0f       	add	r24, r25
 278:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LEDS_setRed>
}
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	08 95       	ret

00000282 <LEDS_incrementGreen>:

void LEDS_incrementGreen(uint16_t value){
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	ec 01       	movw	r28, r24
	LEDS_setGreen(LEDS_getGreen() + green_increments[value]);
 288:	0e 94 1b 01 	call	0x236	; 0x236 <LEDS_getGreen>
 28c:	cb 5e       	subi	r28, 0xEB	; 235
 28e:	de 4f       	sbci	r29, 0xFE	; 254
 290:	98 81       	ld	r25, Y
 292:	89 0f       	add	r24, r25
 294:	0e 94 df 00 	call	0x1be	; 0x1be <LEDS_setGreen>
	
}
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	08 95       	ret

0000029e <LEDS_incrementBlue>:

void LEDS_incrementBlue(uint16_t value){
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
 2a2:	ec 01       	movw	r28, r24
	LEDS_setBlue(LEDS_getBlue() + blue_increments[value]);
 2a4:	0e 94 1e 01 	call	0x23c	; 0x23c <LEDS_getBlue>
 2a8:	c5 5f       	subi	r28, 0xF5	; 245
 2aa:	de 4f       	sbci	r29, 0xFE	; 254
 2ac:	98 81       	ld	r25, Y
 2ae:	89 0f       	add	r24, r25
 2b0:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LEDS_setBlue>
}
 2b4:	df 91       	pop	r29
 2b6:	cf 91       	pop	r28
 2b8:	08 95       	ret

000002ba <LEDS_decrementRed>:

void LEDS_decrementRed(uint16_t value){
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29
 2be:	ec 01       	movw	r28, r24
	LEDS_setRed(LEDS_getRed() - red_increments[9 - value]);
 2c0:	0e 94 18 01 	call	0x230	; 0x230 <LEDS_getRed>
 2c4:	e9 e0       	ldi	r30, 0x09	; 9
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	ec 1b       	sub	r30, r28
 2ca:	fd 0b       	sbc	r31, r29
 2cc:	e1 5e       	subi	r30, 0xE1	; 225
 2ce:	fe 4f       	sbci	r31, 0xFE	; 254
 2d0:	90 81       	ld	r25, Z
 2d2:	89 1b       	sub	r24, r25
 2d4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LEDS_setRed>
}
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	08 95       	ret

000002de <LEDS_decrementGreen>:

void LEDS_decrementGreen(uint16_t value){
 2de:	cf 93       	push	r28
 2e0:	df 93       	push	r29
 2e2:	ec 01       	movw	r28, r24
	LEDS_setGreen(LEDS_getGreen() - green_increments[9 - value]);
 2e4:	0e 94 1b 01 	call	0x236	; 0x236 <LEDS_getGreen>
 2e8:	e9 e0       	ldi	r30, 0x09	; 9
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	ec 1b       	sub	r30, r28
 2ee:	fd 0b       	sbc	r31, r29
 2f0:	eb 5e       	subi	r30, 0xEB	; 235
 2f2:	fe 4f       	sbci	r31, 0xFE	; 254
 2f4:	90 81       	ld	r25, Z
 2f6:	89 1b       	sub	r24, r25
 2f8:	0e 94 df 00 	call	0x1be	; 0x1be <LEDS_setGreen>
}
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	08 95       	ret

00000302 <LEDS_decrementBlue>:

void LEDS_decrementBlue(uint16_t value){
 302:	cf 93       	push	r28
 304:	df 93       	push	r29
 306:	ec 01       	movw	r28, r24
	LEDS_setBlue(LEDS_getBlue() - blue_increments[9 - value]);
 308:	0e 94 1e 01 	call	0x23c	; 0x23c <LEDS_getBlue>
 30c:	e9 e0       	ldi	r30, 0x09	; 9
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	ec 1b       	sub	r30, r28
 312:	fd 0b       	sbc	r31, r29
 314:	e5 5f       	subi	r30, 0xF5	; 245
 316:	fe 4f       	sbci	r31, 0xFE	; 254
 318:	90 81       	ld	r25, Z
 31a:	89 1b       	sub	r24, r25
 31c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LEDS_setBlue>
}
 320:	df 91       	pop	r29
 322:	cf 91       	pop	r28
 324:	08 95       	ret

00000326 <main>:


int main(void)
{
	
	TIMERS_InitTimer0();
 326:	0e 94 08 03 	call	0x610	; 0x610 <TIMERS_InitTimer0>
	TIMERS_InitTimer1();
 32a:	0e 94 3a 03 	call	0x674	; 0x674 <TIMERS_InitTimer1>
	
	LEDS_init();
 32e:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LEDS_init>
	MEF_init();
 332:	0e 94 ae 01 	call	0x35c	; 0x35c <MEF_init>
	LEDS_setFinalRGB(204, 255, 229);
 336:	45 ee       	ldi	r20, 0xE5	; 229
 338:	6f ef       	ldi	r22, 0xFF	; 255
 33a:	8c ec       	ldi	r24, 0xCC	; 204
 33c:	0e 94 2a 01 	call	0x254	; 0x254 <LEDS_setFinalRGB>
	
	LDR_config();
 340:	0e 94 53 00 	call	0xa6	; 0xa6 <LDR_config>
	
	PWM_soft_init();
 344:	0e 94 fe 02 	call	0x5fc	; 0x5fc <PWM_soft_init>
	
	//Test PB4 como salida y un 1 en la misma
	DDRB |= (1 << PORTB4);
 348:	84 b1       	in	r24, 0x04	; 4
 34a:	80 61       	ori	r24, 0x10	; 16
 34c:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1 << PORTB4);
 34e:	85 b1       	in	r24, 0x05	; 5
 350:	8f 7e       	andi	r24, 0xEF	; 239
 352:	85 b9       	out	0x05, r24	; 5
	
	sei();
 354:	78 94       	sei
	
    while(1)
    {
		sEOS_Dispatch_Tasks();
 356:	0e 94 aa 02 	call	0x554	; 0x554 <sEOS_Dispatch_Tasks>
 35a:	fd cf       	rjmp	.-6      	; 0x356 <main+0x30>

0000035c <MEF_init>:
static uint16_t timeOff = 20;
static double pendiente;
static uint16_t desplazamiento;

void MEF_init(){
	state = OFF;
 35c:	83 e0       	ldi	r24, 0x03	; 3
 35e:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <state>
	stateCount = 0;
 362:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <stateCount+0x1>
 366:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <stateCount>

	pendiente = (40-100) / (MIN_SUP_LDR - MAX_INF_LDR);
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	a0 e8       	ldi	r26, 0x80	; 128
 370:	bf eb       	ldi	r27, 0xBF	; 191
 372:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <pendiente>
 376:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <pendiente+0x1>
 37a:	a0 93 33 01 	sts	0x0133, r26	; 0x800133 <pendiente+0x2>
 37e:	b0 93 34 01 	sts	0x0134, r27	; 0x800134 <pendiente+0x3>
	desplazamiento = 100 + round(pendiente * MAX_INF_LDR);
 382:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <desplazamiento+0x1>
 386:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <desplazamiento>
 38a:	08 95       	ret

0000038c <update_timeOff>:
}

void  update_timeOff(){
 38c:	cf 92       	push	r12
 38e:	df 92       	push	r13
 390:	ef 92       	push	r14
 392:	ff 92       	push	r15
	uint16_t LDR_value = LDR_get_value();
 394:	0e 94 60 00 	call	0xc0	; 0xc0 <LDR_get_value>
	
	// Caso en el que Tparpadeo = 5seg (minima luz o menos)
	if (LDR_value < MAX_INF_LDR){
 398:	84 36       	cpi	r24, 0x64	; 100
 39a:	91 05       	cpc	r25, r1
 39c:	38 f4       	brcc	.+14     	; 0x3ac <update_timeOff+0x20>
		timeOff = 100;
 39e:	84 e6       	ldi	r24, 0x64	; 100
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3a6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 3aa:	2f c0       	rjmp	.+94     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
	}
	// Caso en el que Tparepadeo = 2seg (luz ambiente o mas)
	else if (LDR_value > MIN_SUP_LDR){
 3ac:	81 3a       	cpi	r24, 0xA1	; 161
 3ae:	91 05       	cpc	r25, r1
 3b0:	38 f0       	brcs	.+14     	; 0x3c0 <update_timeOff+0x34>
		timeOff = 40;
 3b2:	88 e2       	ldi	r24, 0x28	; 40
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3ba:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 3be:	25 c0       	rjmp	.+74     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
	}
	else {
		timeOff = desplazamiento - round(pendiente*LDR_value); // Parte de la recta con pendiente m negativa
 3c0:	bc 01       	movw	r22, r24
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__floatunsisf>
 3ca:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <pendiente>
 3ce:	30 91 32 01 	lds	r19, 0x0132	; 0x800132 <pendiente+0x1>
 3d2:	40 91 33 01 	lds	r20, 0x0133	; 0x800133 <pendiente+0x2>
 3d6:	50 91 34 01 	lds	r21, 0x0134	; 0x800134 <pendiente+0x3>
 3da:	0e 94 6f 04 	call	0x8de	; 0x8de <__mulsf3>
 3de:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <round>
 3e2:	6b 01       	movw	r12, r22
 3e4:	7c 01       	movw	r14, r24
 3e6:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <desplazamiento>
 3ea:	70 91 30 01 	lds	r23, 0x0130	; 0x800130 <desplazamiento+0x1>
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__floatunsisf>
 3f6:	a7 01       	movw	r20, r14
 3f8:	96 01       	movw	r18, r12
 3fa:	0e 94 45 03 	call	0x68a	; 0x68a <__subsf3>
 3fe:	0e 94 b2 03 	call	0x764	; 0x764 <__fixunssfsi>
 402:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 406:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
 40a:	ff 90       	pop	r15
 40c:	ef 90       	pop	r14
 40e:	df 90       	pop	r13
 410:	cf 90       	pop	r12
 412:	08 95       	ret

00000414 <MEF_Update>:

void MEF_Update(){
	stateCount++;
 414:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <stateCount>
 418:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <stateCount+0x1>
 41c:	01 96       	adiw	r24, 0x01	; 1
 41e:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <stateCount+0x1>
 422:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <stateCount>
	
	switch (state){
 426:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <state>
 42a:	81 30       	cpi	r24, 0x01	; 1
 42c:	09 f4       	brne	.+2      	; 0x430 <MEF_Update+0x1c>
 42e:	4f c0       	rjmp	.+158    	; 0x4ce <MEF_Update+0xba>
 430:	38 f1       	brcs	.+78     	; 0x480 <MEF_Update+0x6c>
 432:	82 30       	cpi	r24, 0x02	; 2
 434:	09 f4       	brne	.+2      	; 0x438 <MEF_Update+0x24>
 436:	68 c0       	rjmp	.+208    	; 0x508 <MEF_Update+0xf4>
 438:	83 30       	cpi	r24, 0x03	; 3
 43a:	09 f0       	breq	.+2      	; 0x43e <MEF_Update+0x2a>
 43c:	8a c0       	rjmp	.+276    	; 0x552 <MEF_Update+0x13e>
		case OFF:
			PORTB |= (1<<PORTB4);
 43e:	85 b1       	in	r24, 0x05	; 5
 440:	80 61       	ori	r24, 0x10	; 16
 442:	85 b9       	out	0x05, r24	; 5
			
			LEDS_setRed(0);
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LEDS_setRed>
			LEDS_setGreen(0);
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	0e 94 df 00 	call	0x1be	; 0x1be <LEDS_setGreen>
			LEDS_setBlue(0);
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LEDS_setBlue>
			
			update_timeOff();
 456:	0e 94 c6 01 	call	0x38c	; 0x38c <update_timeOff>
			if(stateCount >= timeOff){
 45a:	20 91 35 01 	lds	r18, 0x0135	; 0x800135 <stateCount>
 45e:	30 91 36 01 	lds	r19, 0x0136	; 0x800136 <stateCount+0x1>
 462:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 466:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 46a:	28 17       	cp	r18, r24
 46c:	39 07       	cpc	r19, r25
 46e:	08 f4       	brcc	.+2      	; 0x472 <MEF_Update+0x5e>
 470:	70 c0       	rjmp	.+224    	; 0x552 <MEF_Update+0x13e>
				state = RAISING;
 472:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <state>
				stateCount = 0;
 476:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <stateCount+0x1>
 47a:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <stateCount>
 47e:	08 95       	ret
			}
			break;
			
		case RAISING:
			PORTB |= (1<<PORTB4);
 480:	85 b1       	in	r24, 0x05	; 5
 482:	80 61       	ori	r24, 0x10	; 16
 484:	85 b9       	out	0x05, r24	; 5
			
			LEDS_incrementRed(stateCount - 1);
 486:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <stateCount>
 48a:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <stateCount+0x1>
 48e:	01 97       	sbiw	r24, 0x01	; 1
 490:	0e 94 33 01 	call	0x266	; 0x266 <LEDS_incrementRed>
			LEDS_incrementGreen(stateCount - 1);
 494:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <stateCount>
 498:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <stateCount+0x1>
 49c:	01 97       	sbiw	r24, 0x01	; 1
 49e:	0e 94 41 01 	call	0x282	; 0x282 <LEDS_incrementGreen>
			LEDS_incrementBlue(stateCount - 1);
 4a2:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <stateCount>
 4a6:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <stateCount+0x1>
 4aa:	01 97       	sbiw	r24, 0x01	; 1
 4ac:	0e 94 4f 01 	call	0x29e	; 0x29e <LEDS_incrementBlue>
			
			if(stateCount == 10){
 4b0:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <stateCount>
 4b4:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <stateCount+0x1>
 4b8:	0a 97       	sbiw	r24, 0x0a	; 10
 4ba:	09 f0       	breq	.+2      	; 0x4be <MEF_Update+0xaa>
 4bc:	4a c0       	rjmp	.+148    	; 0x552 <MEF_Update+0x13e>
				state = ON;
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <state>
				stateCount = 0;
 4c4:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <stateCount+0x1>
 4c8:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <stateCount>
 4cc:	08 95       	ret
			}
			break;
			
		case ON:
			PORTB &= ~(1<<PORTB4);
 4ce:	85 b1       	in	r24, 0x05	; 5
 4d0:	8f 7e       	andi	r24, 0xEF	; 239
 4d2:	85 b9       	out	0x05, r24	; 5

			
			LEDS_setRed(LEDS_getFinalRed());
 4d4:	0e 94 21 01 	call	0x242	; 0x242 <LEDS_getFinalRed>
 4d8:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LEDS_setRed>
			LEDS_setGreen(LEDS_getFinalGreen());
 4dc:	0e 94 24 01 	call	0x248	; 0x248 <LEDS_getFinalGreen>
 4e0:	0e 94 df 00 	call	0x1be	; 0x1be <LEDS_setGreen>
			LEDS_setBlue(LEDS_getFinalBlue());
 4e4:	0e 94 27 01 	call	0x24e	; 0x24e <LEDS_getFinalBlue>
 4e8:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LEDS_setBlue>
			
			if(stateCount == 20){
 4ec:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <stateCount>
 4f0:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <stateCount+0x1>
 4f4:	44 97       	sbiw	r24, 0x14	; 20
 4f6:	69 f5       	brne	.+90     	; 0x552 <MEF_Update+0x13e>
				state = FALLING;
 4f8:	82 e0       	ldi	r24, 0x02	; 2
 4fa:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <state>
				stateCount = 0;
 4fe:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <stateCount+0x1>
 502:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <stateCount>
 506:	08 95       	ret
			}
			break;
			
		case FALLING:
			PORTB |= (1<<PORTB4);
 508:	85 b1       	in	r24, 0x05	; 5
 50a:	80 61       	ori	r24, 0x10	; 16
 50c:	85 b9       	out	0x05, r24	; 5
			
			LEDS_decrementRed(stateCount - 1);
 50e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <stateCount>
 512:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <stateCount+0x1>
 516:	01 97       	sbiw	r24, 0x01	; 1
 518:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LEDS_decrementRed>
			LEDS_decrementGreen(stateCount - 1);
 51c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <stateCount>
 520:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <stateCount+0x1>
 524:	01 97       	sbiw	r24, 0x01	; 1
 526:	0e 94 6f 01 	call	0x2de	; 0x2de <LEDS_decrementGreen>
			LEDS_decrementBlue(stateCount - 1);
 52a:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <stateCount>
 52e:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <stateCount+0x1>
 532:	01 97       	sbiw	r24, 0x01	; 1
 534:	0e 94 81 01 	call	0x302	; 0x302 <LEDS_decrementBlue>
			
			if(stateCount == 10){
 538:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <stateCount>
 53c:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <stateCount+0x1>
 540:	0a 97       	sbiw	r24, 0x0a	; 10
 542:	39 f4       	brne	.+14     	; 0x552 <MEF_Update+0x13e>
				state = OFF;
 544:	83 e0       	ldi	r24, 0x03	; 3
 546:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <state>
				stateCount = 0;
 54a:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <stateCount+0x1>
 54e:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <stateCount>
 552:	08 95       	ret

00000554 <sEOS_Dispatch_Tasks>:
static volatile uint16_t counter_LDR = 8;
static volatile uint8_t FLAG_LDR = 0;


void sEOS_Dispatch_Tasks(){
	if(FLAG_MEF){
 554:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <FLAG_MEF>
 558:	88 23       	and	r24, r24
 55a:	21 f0       	breq	.+8      	; 0x564 <sEOS_Dispatch_Tasks+0x10>
		MEF_Update();
 55c:	0e 94 0a 02 	call	0x414	; 0x414 <MEF_Update>
		FLAG_MEF = 0;	
 560:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <FLAG_MEF>
 564:	08 95       	ret

00000566 <sEOS_SCH_Tasks>:
	*/
}

void sEOS_SCH_Tasks(){
	//Cada 50 ms pone el flag en 1
	if (++counter_MEF == 781) {
 566:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <counter_MEF>
 56a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <counter_MEF+0x1>
 56e:	01 96       	adiw	r24, 0x01	; 1
 570:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <counter_MEF+0x1>
 574:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <counter_MEF>
 578:	8d 30       	cpi	r24, 0x0D	; 13
 57a:	93 40       	sbci	r25, 0x03	; 3
 57c:	39 f4       	brne	.+14     	; 0x58c <sEOS_SCH_Tasks+0x26>
		FLAG_MEF = 1;
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <FLAG_MEF>
		counter_MEF = 0;
 584:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <counter_MEF+0x1>
 588:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <counter_MEF>
	}
	if (++counter_LDR == 10) {
 58c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <counter_LDR>
 590:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <counter_LDR+0x1>
 594:	01 96       	adiw	r24, 0x01	; 1
 596:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <counter_LDR+0x1>
 59a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <counter_LDR>
 59e:	0a 97       	sbiw	r24, 0x0a	; 10
 5a0:	39 f4       	brne	.+14     	; 0x5b0 <sEOS_SCH_Tasks+0x4a>
		FLAG_LDR = 1;
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <FLAG_LDR>
		counter_LDR = 0;
 5a8:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <counter_LDR+0x1>
 5ac:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <counter_LDR>
	}
	PWM_soft_Update();
 5b0:	0e 94 db 02 	call	0x5b6	; 0x5b6 <PWM_soft_Update>
 5b4:	08 95       	ret

000005b6 <PWM_soft_Update>:
	PWM_OFF;
}

uint8_t PWM_get_comp_value(){
	return PWM_DELTA;
}
 5b6:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <PWM_position>
 5ba:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <PWM_position+0x1>
 5be:	01 96       	adiw	r24, 0x01	; 1
 5c0:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <PWM_position+0x1>
 5c4:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <PWM_position>
 5c8:	8f 3f       	cpi	r24, 0xFF	; 255
 5ca:	91 05       	cpc	r25, r1
 5cc:	49 f0       	breq	.+18     	; 0x5e0 <PWM_soft_Update+0x2a>
 5ce:	40 f0       	brcs	.+16     	; 0x5e0 <PWM_soft_Update+0x2a>
 5d0:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <PWM_position+0x1>
 5d4:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <PWM_position>
 5d8:	85 b1       	in	r24, 0x05	; 5
 5da:	80 62       	ori	r24, 0x20	; 32
 5dc:	85 b9       	out	0x05, r24	; 5
 5de:	08 95       	ret
 5e0:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <PWM_DELTA>
 5e4:	30 e0       	ldi	r19, 0x00	; 0
 5e6:	82 17       	cp	r24, r18
 5e8:	93 07       	cpc	r25, r19
 5ea:	20 f4       	brcc	.+8      	; 0x5f4 <PWM_soft_Update+0x3e>
 5ec:	85 b1       	in	r24, 0x05	; 5
 5ee:	8f 7d       	andi	r24, 0xDF	; 223
 5f0:	85 b9       	out	0x05, r24	; 5
 5f2:	08 95       	ret
 5f4:	85 b1       	in	r24, 0x05	; 5
 5f6:	80 62       	ori	r24, 0x20	; 32
 5f8:	85 b9       	out	0x05, r24	; 5
 5fa:	08 95       	ret

000005fc <PWM_soft_init>:
 5fc:	84 b1       	in	r24, 0x04	; 4
 5fe:	80 62       	ori	r24, 0x20	; 32
 600:	84 b9       	out	0x04, r24	; 4
 602:	85 b1       	in	r24, 0x05	; 5
 604:	8f 7d       	andi	r24, 0xDF	; 223
 606:	85 b9       	out	0x05, r24	; 5
 608:	08 95       	ret

0000060a <PWM_set_comp_value>:

void PWM_set_comp_value(uint8_t value){
	PWM_DELTA = value;
 60a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <PWM_DELTA>
 60e:	08 95       	ret

00000610 <TIMERS_InitTimer0>:
	OCR0A = 249;
	*/
	
	// Interrupcion cada 64 us
	// Prescaler en 8
	TCCR0A |= (1 << WGM01); // Modo CTC
 610:	84 b5       	in	r24, 0x24	; 36
 612:	82 60       	ori	r24, 0x02	; 2
 614:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS01);
 616:	85 b5       	in	r24, 0x25	; 37
 618:	82 60       	ori	r24, 0x02	; 2
 61a:	85 bd       	out	0x25, r24	; 37
	OCR0A = 127;
 61c:	8f e7       	ldi	r24, 0x7F	; 127
 61e:	87 bd       	out	0x27, r24	; 39
	
	TIMSK0 |= (1 << OCIE0A);
 620:	ee e6       	ldi	r30, 0x6E	; 110
 622:	f0 e0       	ldi	r31, 0x00	; 0
 624:	80 81       	ld	r24, Z
 626:	82 60       	ori	r24, 0x02	; 2
 628:	80 83       	st	Z, r24
 62a:	08 95       	ret

0000062c <__vector_14>:
	
}

ISR(TIMER0_COMPA_vect){
 62c:	1f 92       	push	r1
 62e:	0f 92       	push	r0
 630:	0f b6       	in	r0, 0x3f	; 63
 632:	0f 92       	push	r0
 634:	11 24       	eor	r1, r1
 636:	2f 93       	push	r18
 638:	3f 93       	push	r19
 63a:	4f 93       	push	r20
 63c:	5f 93       	push	r21
 63e:	6f 93       	push	r22
 640:	7f 93       	push	r23
 642:	8f 93       	push	r24
 644:	9f 93       	push	r25
 646:	af 93       	push	r26
 648:	bf 93       	push	r27
 64a:	ef 93       	push	r30
 64c:	ff 93       	push	r31
	sEOS_SCH_Tasks();
 64e:	0e 94 b3 02 	call	0x566	; 0x566 <sEOS_SCH_Tasks>
 652:	ff 91       	pop	r31
 654:	ef 91       	pop	r30
 656:	bf 91       	pop	r27
 658:	af 91       	pop	r26
 65a:	9f 91       	pop	r25
 65c:	8f 91       	pop	r24
 65e:	7f 91       	pop	r23
 660:	6f 91       	pop	r22
 662:	5f 91       	pop	r21
 664:	4f 91       	pop	r20
 666:	3f 91       	pop	r19
 668:	2f 91       	pop	r18
 66a:	0f 90       	pop	r0
 66c:	0f be       	out	0x3f, r0	; 63
 66e:	0f 90       	pop	r0
 670:	1f 90       	pop	r1
 672:	18 95       	reti

00000674 <TIMERS_InitTimer1>:
// Init timer
void TIMERS_InitTimer1(){
	//Modo Fast PWM con top = 0x00FF (Modo 5)
	//Prescaler en 1024
	//Modo invertido (clear on count reset)
	TCCR1A |= (1 << WGM10) | (1<< COM1A1) | (1<< COM1B1);
 674:	e0 e8       	ldi	r30, 0x80	; 128
 676:	f0 e0       	ldi	r31, 0x00	; 0
 678:	80 81       	ld	r24, Z
 67a:	81 6a       	ori	r24, 0xA1	; 161
 67c:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << CS12) | (1 << CS10);// | (1 << CS10) ;
 67e:	e1 e8       	ldi	r30, 0x81	; 129
 680:	f0 e0       	ldi	r31, 0x00	; 0
 682:	80 81       	ld	r24, Z
 684:	8d 60       	ori	r24, 0x0D	; 13
 686:	80 83       	st	Z, r24
 688:	08 95       	ret

0000068a <__subsf3>:
 68a:	50 58       	subi	r21, 0x80	; 128

0000068c <__addsf3>:
 68c:	bb 27       	eor	r27, r27
 68e:	aa 27       	eor	r26, r26
 690:	0e 94 5d 03 	call	0x6ba	; 0x6ba <__addsf3x>
 694:	0c 94 35 04 	jmp	0x86a	; 0x86a <__fp_round>
 698:	0e 94 27 04 	call	0x84e	; 0x84e <__fp_pscA>
 69c:	38 f0       	brcs	.+14     	; 0x6ac <__addsf3+0x20>
 69e:	0e 94 2e 04 	call	0x85c	; 0x85c <__fp_pscB>
 6a2:	20 f0       	brcs	.+8      	; 0x6ac <__addsf3+0x20>
 6a4:	39 f4       	brne	.+14     	; 0x6b4 <__addsf3+0x28>
 6a6:	9f 3f       	cpi	r25, 0xFF	; 255
 6a8:	19 f4       	brne	.+6      	; 0x6b0 <__addsf3+0x24>
 6aa:	26 f4       	brtc	.+8      	; 0x6b4 <__addsf3+0x28>
 6ac:	0c 94 24 04 	jmp	0x848	; 0x848 <__fp_nan>
 6b0:	0e f4       	brtc	.+2      	; 0x6b4 <__addsf3+0x28>
 6b2:	e0 95       	com	r30
 6b4:	e7 fb       	bst	r30, 7
 6b6:	0c 94 1e 04 	jmp	0x83c	; 0x83c <__fp_inf>

000006ba <__addsf3x>:
 6ba:	e9 2f       	mov	r30, r25
 6bc:	0e 94 46 04 	call	0x88c	; 0x88c <__fp_split3>
 6c0:	58 f3       	brcs	.-42     	; 0x698 <__addsf3+0xc>
 6c2:	ba 17       	cp	r27, r26
 6c4:	62 07       	cpc	r22, r18
 6c6:	73 07       	cpc	r23, r19
 6c8:	84 07       	cpc	r24, r20
 6ca:	95 07       	cpc	r25, r21
 6cc:	20 f0       	brcs	.+8      	; 0x6d6 <__addsf3x+0x1c>
 6ce:	79 f4       	brne	.+30     	; 0x6ee <__addsf3x+0x34>
 6d0:	a6 f5       	brtc	.+104    	; 0x73a <__addsf3x+0x80>
 6d2:	0c 94 68 04 	jmp	0x8d0	; 0x8d0 <__fp_zero>
 6d6:	0e f4       	brtc	.+2      	; 0x6da <__addsf3x+0x20>
 6d8:	e0 95       	com	r30
 6da:	0b 2e       	mov	r0, r27
 6dc:	ba 2f       	mov	r27, r26
 6de:	a0 2d       	mov	r26, r0
 6e0:	0b 01       	movw	r0, r22
 6e2:	b9 01       	movw	r22, r18
 6e4:	90 01       	movw	r18, r0
 6e6:	0c 01       	movw	r0, r24
 6e8:	ca 01       	movw	r24, r20
 6ea:	a0 01       	movw	r20, r0
 6ec:	11 24       	eor	r1, r1
 6ee:	ff 27       	eor	r31, r31
 6f0:	59 1b       	sub	r21, r25
 6f2:	99 f0       	breq	.+38     	; 0x71a <__addsf3x+0x60>
 6f4:	59 3f       	cpi	r21, 0xF9	; 249
 6f6:	50 f4       	brcc	.+20     	; 0x70c <__addsf3x+0x52>
 6f8:	50 3e       	cpi	r21, 0xE0	; 224
 6fa:	68 f1       	brcs	.+90     	; 0x756 <__addsf3x+0x9c>
 6fc:	1a 16       	cp	r1, r26
 6fe:	f0 40       	sbci	r31, 0x00	; 0
 700:	a2 2f       	mov	r26, r18
 702:	23 2f       	mov	r18, r19
 704:	34 2f       	mov	r19, r20
 706:	44 27       	eor	r20, r20
 708:	58 5f       	subi	r21, 0xF8	; 248
 70a:	f3 cf       	rjmp	.-26     	; 0x6f2 <__addsf3x+0x38>
 70c:	46 95       	lsr	r20
 70e:	37 95       	ror	r19
 710:	27 95       	ror	r18
 712:	a7 95       	ror	r26
 714:	f0 40       	sbci	r31, 0x00	; 0
 716:	53 95       	inc	r21
 718:	c9 f7       	brne	.-14     	; 0x70c <__addsf3x+0x52>
 71a:	7e f4       	brtc	.+30     	; 0x73a <__addsf3x+0x80>
 71c:	1f 16       	cp	r1, r31
 71e:	ba 0b       	sbc	r27, r26
 720:	62 0b       	sbc	r22, r18
 722:	73 0b       	sbc	r23, r19
 724:	84 0b       	sbc	r24, r20
 726:	ba f0       	brmi	.+46     	; 0x756 <__addsf3x+0x9c>
 728:	91 50       	subi	r25, 0x01	; 1
 72a:	a1 f0       	breq	.+40     	; 0x754 <__addsf3x+0x9a>
 72c:	ff 0f       	add	r31, r31
 72e:	bb 1f       	adc	r27, r27
 730:	66 1f       	adc	r22, r22
 732:	77 1f       	adc	r23, r23
 734:	88 1f       	adc	r24, r24
 736:	c2 f7       	brpl	.-16     	; 0x728 <__addsf3x+0x6e>
 738:	0e c0       	rjmp	.+28     	; 0x756 <__addsf3x+0x9c>
 73a:	ba 0f       	add	r27, r26
 73c:	62 1f       	adc	r22, r18
 73e:	73 1f       	adc	r23, r19
 740:	84 1f       	adc	r24, r20
 742:	48 f4       	brcc	.+18     	; 0x756 <__addsf3x+0x9c>
 744:	87 95       	ror	r24
 746:	77 95       	ror	r23
 748:	67 95       	ror	r22
 74a:	b7 95       	ror	r27
 74c:	f7 95       	ror	r31
 74e:	9e 3f       	cpi	r25, 0xFE	; 254
 750:	08 f0       	brcs	.+2      	; 0x754 <__addsf3x+0x9a>
 752:	b0 cf       	rjmp	.-160    	; 0x6b4 <__addsf3+0x28>
 754:	93 95       	inc	r25
 756:	88 0f       	add	r24, r24
 758:	08 f0       	brcs	.+2      	; 0x75c <__addsf3x+0xa2>
 75a:	99 27       	eor	r25, r25
 75c:	ee 0f       	add	r30, r30
 75e:	97 95       	ror	r25
 760:	87 95       	ror	r24
 762:	08 95       	ret

00000764 <__fixunssfsi>:
 764:	0e 94 4e 04 	call	0x89c	; 0x89c <__fp_splitA>
 768:	88 f0       	brcs	.+34     	; 0x78c <__fixunssfsi+0x28>
 76a:	9f 57       	subi	r25, 0x7F	; 127
 76c:	98 f0       	brcs	.+38     	; 0x794 <__fixunssfsi+0x30>
 76e:	b9 2f       	mov	r27, r25
 770:	99 27       	eor	r25, r25
 772:	b7 51       	subi	r27, 0x17	; 23
 774:	b0 f0       	brcs	.+44     	; 0x7a2 <__fixunssfsi+0x3e>
 776:	e1 f0       	breq	.+56     	; 0x7b0 <__fixunssfsi+0x4c>
 778:	66 0f       	add	r22, r22
 77a:	77 1f       	adc	r23, r23
 77c:	88 1f       	adc	r24, r24
 77e:	99 1f       	adc	r25, r25
 780:	1a f0       	brmi	.+6      	; 0x788 <__fixunssfsi+0x24>
 782:	ba 95       	dec	r27
 784:	c9 f7       	brne	.-14     	; 0x778 <__fixunssfsi+0x14>
 786:	14 c0       	rjmp	.+40     	; 0x7b0 <__fixunssfsi+0x4c>
 788:	b1 30       	cpi	r27, 0x01	; 1
 78a:	91 f0       	breq	.+36     	; 0x7b0 <__fixunssfsi+0x4c>
 78c:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__fp_zero>
 790:	b1 e0       	ldi	r27, 0x01	; 1
 792:	08 95       	ret
 794:	0c 94 68 04 	jmp	0x8d0	; 0x8d0 <__fp_zero>
 798:	67 2f       	mov	r22, r23
 79a:	78 2f       	mov	r23, r24
 79c:	88 27       	eor	r24, r24
 79e:	b8 5f       	subi	r27, 0xF8	; 248
 7a0:	39 f0       	breq	.+14     	; 0x7b0 <__fixunssfsi+0x4c>
 7a2:	b9 3f       	cpi	r27, 0xF9	; 249
 7a4:	cc f3       	brlt	.-14     	; 0x798 <__fixunssfsi+0x34>
 7a6:	86 95       	lsr	r24
 7a8:	77 95       	ror	r23
 7aa:	67 95       	ror	r22
 7ac:	b3 95       	inc	r27
 7ae:	d9 f7       	brne	.-10     	; 0x7a6 <__fixunssfsi+0x42>
 7b0:	3e f4       	brtc	.+14     	; 0x7c0 <__fixunssfsi+0x5c>
 7b2:	90 95       	com	r25
 7b4:	80 95       	com	r24
 7b6:	70 95       	com	r23
 7b8:	61 95       	neg	r22
 7ba:	7f 4f       	sbci	r23, 0xFF	; 255
 7bc:	8f 4f       	sbci	r24, 0xFF	; 255
 7be:	9f 4f       	sbci	r25, 0xFF	; 255
 7c0:	08 95       	ret

000007c2 <__floatunsisf>:
 7c2:	e8 94       	clt
 7c4:	09 c0       	rjmp	.+18     	; 0x7d8 <__floatsisf+0x12>

000007c6 <__floatsisf>:
 7c6:	97 fb       	bst	r25, 7
 7c8:	3e f4       	brtc	.+14     	; 0x7d8 <__floatsisf+0x12>
 7ca:	90 95       	com	r25
 7cc:	80 95       	com	r24
 7ce:	70 95       	com	r23
 7d0:	61 95       	neg	r22
 7d2:	7f 4f       	sbci	r23, 0xFF	; 255
 7d4:	8f 4f       	sbci	r24, 0xFF	; 255
 7d6:	9f 4f       	sbci	r25, 0xFF	; 255
 7d8:	99 23       	and	r25, r25
 7da:	a9 f0       	breq	.+42     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 7dc:	f9 2f       	mov	r31, r25
 7de:	96 e9       	ldi	r25, 0x96	; 150
 7e0:	bb 27       	eor	r27, r27
 7e2:	93 95       	inc	r25
 7e4:	f6 95       	lsr	r31
 7e6:	87 95       	ror	r24
 7e8:	77 95       	ror	r23
 7ea:	67 95       	ror	r22
 7ec:	b7 95       	ror	r27
 7ee:	f1 11       	cpse	r31, r1
 7f0:	f8 cf       	rjmp	.-16     	; 0x7e2 <__floatsisf+0x1c>
 7f2:	fa f4       	brpl	.+62     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 7f4:	bb 0f       	add	r27, r27
 7f6:	11 f4       	brne	.+4      	; 0x7fc <__floatsisf+0x36>
 7f8:	60 ff       	sbrs	r22, 0
 7fa:	1b c0       	rjmp	.+54     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 7fc:	6f 5f       	subi	r22, 0xFF	; 255
 7fe:	7f 4f       	sbci	r23, 0xFF	; 255
 800:	8f 4f       	sbci	r24, 0xFF	; 255
 802:	9f 4f       	sbci	r25, 0xFF	; 255
 804:	16 c0       	rjmp	.+44     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 806:	88 23       	and	r24, r24
 808:	11 f0       	breq	.+4      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 80a:	96 e9       	ldi	r25, 0x96	; 150
 80c:	11 c0       	rjmp	.+34     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 80e:	77 23       	and	r23, r23
 810:	21 f0       	breq	.+8      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 812:	9e e8       	ldi	r25, 0x8E	; 142
 814:	87 2f       	mov	r24, r23
 816:	76 2f       	mov	r23, r22
 818:	05 c0       	rjmp	.+10     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 81a:	66 23       	and	r22, r22
 81c:	71 f0       	breq	.+28     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 81e:	96 e8       	ldi	r25, 0x86	; 134
 820:	86 2f       	mov	r24, r22
 822:	70 e0       	ldi	r23, 0x00	; 0
 824:	60 e0       	ldi	r22, 0x00	; 0
 826:	2a f0       	brmi	.+10     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 828:	9a 95       	dec	r25
 82a:	66 0f       	add	r22, r22
 82c:	77 1f       	adc	r23, r23
 82e:	88 1f       	adc	r24, r24
 830:	da f7       	brpl	.-10     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 832:	88 0f       	add	r24, r24
 834:	96 95       	lsr	r25
 836:	87 95       	ror	r24
 838:	97 f9       	bld	r25, 7
 83a:	08 95       	ret

0000083c <__fp_inf>:
 83c:	97 f9       	bld	r25, 7
 83e:	9f 67       	ori	r25, 0x7F	; 127
 840:	80 e8       	ldi	r24, 0x80	; 128
 842:	70 e0       	ldi	r23, 0x00	; 0
 844:	60 e0       	ldi	r22, 0x00	; 0
 846:	08 95       	ret

00000848 <__fp_nan>:
 848:	9f ef       	ldi	r25, 0xFF	; 255
 84a:	80 ec       	ldi	r24, 0xC0	; 192
 84c:	08 95       	ret

0000084e <__fp_pscA>:
 84e:	00 24       	eor	r0, r0
 850:	0a 94       	dec	r0
 852:	16 16       	cp	r1, r22
 854:	17 06       	cpc	r1, r23
 856:	18 06       	cpc	r1, r24
 858:	09 06       	cpc	r0, r25
 85a:	08 95       	ret

0000085c <__fp_pscB>:
 85c:	00 24       	eor	r0, r0
 85e:	0a 94       	dec	r0
 860:	12 16       	cp	r1, r18
 862:	13 06       	cpc	r1, r19
 864:	14 06       	cpc	r1, r20
 866:	05 06       	cpc	r0, r21
 868:	08 95       	ret

0000086a <__fp_round>:
 86a:	09 2e       	mov	r0, r25
 86c:	03 94       	inc	r0
 86e:	00 0c       	add	r0, r0
 870:	11 f4       	brne	.+4      	; 0x876 <__fp_round+0xc>
 872:	88 23       	and	r24, r24
 874:	52 f0       	brmi	.+20     	; 0x88a <__fp_round+0x20>
 876:	bb 0f       	add	r27, r27
 878:	40 f4       	brcc	.+16     	; 0x88a <__fp_round+0x20>
 87a:	bf 2b       	or	r27, r31
 87c:	11 f4       	brne	.+4      	; 0x882 <__fp_round+0x18>
 87e:	60 ff       	sbrs	r22, 0
 880:	04 c0       	rjmp	.+8      	; 0x88a <__fp_round+0x20>
 882:	6f 5f       	subi	r22, 0xFF	; 255
 884:	7f 4f       	sbci	r23, 0xFF	; 255
 886:	8f 4f       	sbci	r24, 0xFF	; 255
 888:	9f 4f       	sbci	r25, 0xFF	; 255
 88a:	08 95       	ret

0000088c <__fp_split3>:
 88c:	57 fd       	sbrc	r21, 7
 88e:	90 58       	subi	r25, 0x80	; 128
 890:	44 0f       	add	r20, r20
 892:	55 1f       	adc	r21, r21
 894:	59 f0       	breq	.+22     	; 0x8ac <__fp_splitA+0x10>
 896:	5f 3f       	cpi	r21, 0xFF	; 255
 898:	71 f0       	breq	.+28     	; 0x8b6 <__fp_splitA+0x1a>
 89a:	47 95       	ror	r20

0000089c <__fp_splitA>:
 89c:	88 0f       	add	r24, r24
 89e:	97 fb       	bst	r25, 7
 8a0:	99 1f       	adc	r25, r25
 8a2:	61 f0       	breq	.+24     	; 0x8bc <__fp_splitA+0x20>
 8a4:	9f 3f       	cpi	r25, 0xFF	; 255
 8a6:	79 f0       	breq	.+30     	; 0x8c6 <__fp_splitA+0x2a>
 8a8:	87 95       	ror	r24
 8aa:	08 95       	ret
 8ac:	12 16       	cp	r1, r18
 8ae:	13 06       	cpc	r1, r19
 8b0:	14 06       	cpc	r1, r20
 8b2:	55 1f       	adc	r21, r21
 8b4:	f2 cf       	rjmp	.-28     	; 0x89a <__fp_split3+0xe>
 8b6:	46 95       	lsr	r20
 8b8:	f1 df       	rcall	.-30     	; 0x89c <__fp_splitA>
 8ba:	08 c0       	rjmp	.+16     	; 0x8cc <__fp_splitA+0x30>
 8bc:	16 16       	cp	r1, r22
 8be:	17 06       	cpc	r1, r23
 8c0:	18 06       	cpc	r1, r24
 8c2:	99 1f       	adc	r25, r25
 8c4:	f1 cf       	rjmp	.-30     	; 0x8a8 <__fp_splitA+0xc>
 8c6:	86 95       	lsr	r24
 8c8:	71 05       	cpc	r23, r1
 8ca:	61 05       	cpc	r22, r1
 8cc:	08 94       	sec
 8ce:	08 95       	ret

000008d0 <__fp_zero>:
 8d0:	e8 94       	clt

000008d2 <__fp_szero>:
 8d2:	bb 27       	eor	r27, r27
 8d4:	66 27       	eor	r22, r22
 8d6:	77 27       	eor	r23, r23
 8d8:	cb 01       	movw	r24, r22
 8da:	97 f9       	bld	r25, 7
 8dc:	08 95       	ret

000008de <__mulsf3>:
 8de:	0e 94 82 04 	call	0x904	; 0x904 <__mulsf3x>
 8e2:	0c 94 35 04 	jmp	0x86a	; 0x86a <__fp_round>
 8e6:	0e 94 27 04 	call	0x84e	; 0x84e <__fp_pscA>
 8ea:	38 f0       	brcs	.+14     	; 0x8fa <__mulsf3+0x1c>
 8ec:	0e 94 2e 04 	call	0x85c	; 0x85c <__fp_pscB>
 8f0:	20 f0       	brcs	.+8      	; 0x8fa <__mulsf3+0x1c>
 8f2:	95 23       	and	r25, r21
 8f4:	11 f0       	breq	.+4      	; 0x8fa <__mulsf3+0x1c>
 8f6:	0c 94 1e 04 	jmp	0x83c	; 0x83c <__fp_inf>
 8fa:	0c 94 24 04 	jmp	0x848	; 0x848 <__fp_nan>
 8fe:	11 24       	eor	r1, r1
 900:	0c 94 69 04 	jmp	0x8d2	; 0x8d2 <__fp_szero>

00000904 <__mulsf3x>:
 904:	0e 94 46 04 	call	0x88c	; 0x88c <__fp_split3>
 908:	70 f3       	brcs	.-36     	; 0x8e6 <__mulsf3+0x8>

0000090a <__mulsf3_pse>:
 90a:	95 9f       	mul	r25, r21
 90c:	c1 f3       	breq	.-16     	; 0x8fe <__mulsf3+0x20>
 90e:	95 0f       	add	r25, r21
 910:	50 e0       	ldi	r21, 0x00	; 0
 912:	55 1f       	adc	r21, r21
 914:	62 9f       	mul	r22, r18
 916:	f0 01       	movw	r30, r0
 918:	72 9f       	mul	r23, r18
 91a:	bb 27       	eor	r27, r27
 91c:	f0 0d       	add	r31, r0
 91e:	b1 1d       	adc	r27, r1
 920:	63 9f       	mul	r22, r19
 922:	aa 27       	eor	r26, r26
 924:	f0 0d       	add	r31, r0
 926:	b1 1d       	adc	r27, r1
 928:	aa 1f       	adc	r26, r26
 92a:	64 9f       	mul	r22, r20
 92c:	66 27       	eor	r22, r22
 92e:	b0 0d       	add	r27, r0
 930:	a1 1d       	adc	r26, r1
 932:	66 1f       	adc	r22, r22
 934:	82 9f       	mul	r24, r18
 936:	22 27       	eor	r18, r18
 938:	b0 0d       	add	r27, r0
 93a:	a1 1d       	adc	r26, r1
 93c:	62 1f       	adc	r22, r18
 93e:	73 9f       	mul	r23, r19
 940:	b0 0d       	add	r27, r0
 942:	a1 1d       	adc	r26, r1
 944:	62 1f       	adc	r22, r18
 946:	83 9f       	mul	r24, r19
 948:	a0 0d       	add	r26, r0
 94a:	61 1d       	adc	r22, r1
 94c:	22 1f       	adc	r18, r18
 94e:	74 9f       	mul	r23, r20
 950:	33 27       	eor	r19, r19
 952:	a0 0d       	add	r26, r0
 954:	61 1d       	adc	r22, r1
 956:	23 1f       	adc	r18, r19
 958:	84 9f       	mul	r24, r20
 95a:	60 0d       	add	r22, r0
 95c:	21 1d       	adc	r18, r1
 95e:	82 2f       	mov	r24, r18
 960:	76 2f       	mov	r23, r22
 962:	6a 2f       	mov	r22, r26
 964:	11 24       	eor	r1, r1
 966:	9f 57       	subi	r25, 0x7F	; 127
 968:	50 40       	sbci	r21, 0x00	; 0
 96a:	9a f0       	brmi	.+38     	; 0x992 <__mulsf3_pse+0x88>
 96c:	f1 f0       	breq	.+60     	; 0x9aa <__mulsf3_pse+0xa0>
 96e:	88 23       	and	r24, r24
 970:	4a f0       	brmi	.+18     	; 0x984 <__mulsf3_pse+0x7a>
 972:	ee 0f       	add	r30, r30
 974:	ff 1f       	adc	r31, r31
 976:	bb 1f       	adc	r27, r27
 978:	66 1f       	adc	r22, r22
 97a:	77 1f       	adc	r23, r23
 97c:	88 1f       	adc	r24, r24
 97e:	91 50       	subi	r25, 0x01	; 1
 980:	50 40       	sbci	r21, 0x00	; 0
 982:	a9 f7       	brne	.-22     	; 0x96e <__mulsf3_pse+0x64>
 984:	9e 3f       	cpi	r25, 0xFE	; 254
 986:	51 05       	cpc	r21, r1
 988:	80 f0       	brcs	.+32     	; 0x9aa <__mulsf3_pse+0xa0>
 98a:	0c 94 1e 04 	jmp	0x83c	; 0x83c <__fp_inf>
 98e:	0c 94 69 04 	jmp	0x8d2	; 0x8d2 <__fp_szero>
 992:	5f 3f       	cpi	r21, 0xFF	; 255
 994:	e4 f3       	brlt	.-8      	; 0x98e <__mulsf3_pse+0x84>
 996:	98 3e       	cpi	r25, 0xE8	; 232
 998:	d4 f3       	brlt	.-12     	; 0x98e <__mulsf3_pse+0x84>
 99a:	86 95       	lsr	r24
 99c:	77 95       	ror	r23
 99e:	67 95       	ror	r22
 9a0:	b7 95       	ror	r27
 9a2:	f7 95       	ror	r31
 9a4:	e7 95       	ror	r30
 9a6:	9f 5f       	subi	r25, 0xFF	; 255
 9a8:	c1 f7       	brne	.-16     	; 0x99a <__mulsf3_pse+0x90>
 9aa:	fe 2b       	or	r31, r30
 9ac:	88 0f       	add	r24, r24
 9ae:	91 1d       	adc	r25, r1
 9b0:	96 95       	lsr	r25
 9b2:	87 95       	ror	r24
 9b4:	97 f9       	bld	r25, 7
 9b6:	08 95       	ret

000009b8 <round>:
 9b8:	0e 94 4e 04 	call	0x89c	; 0x89c <__fp_splitA>
 9bc:	e8 f0       	brcs	.+58     	; 0x9f8 <round+0x40>
 9be:	9e 37       	cpi	r25, 0x7E	; 126
 9c0:	e8 f0       	brcs	.+58     	; 0x9fc <round+0x44>
 9c2:	96 39       	cpi	r25, 0x96	; 150
 9c4:	b8 f4       	brcc	.+46     	; 0x9f4 <round+0x3c>
 9c6:	9e 38       	cpi	r25, 0x8E	; 142
 9c8:	48 f4       	brcc	.+18     	; 0x9dc <round+0x24>
 9ca:	67 2f       	mov	r22, r23
 9cc:	78 2f       	mov	r23, r24
 9ce:	88 27       	eor	r24, r24
 9d0:	98 5f       	subi	r25, 0xF8	; 248
 9d2:	f9 cf       	rjmp	.-14     	; 0x9c6 <round+0xe>
 9d4:	86 95       	lsr	r24
 9d6:	77 95       	ror	r23
 9d8:	67 95       	ror	r22
 9da:	93 95       	inc	r25
 9dc:	95 39       	cpi	r25, 0x95	; 149
 9de:	d0 f3       	brcs	.-12     	; 0x9d4 <round+0x1c>
 9e0:	b6 2f       	mov	r27, r22
 9e2:	b1 70       	andi	r27, 0x01	; 1
 9e4:	6b 0f       	add	r22, r27
 9e6:	71 1d       	adc	r23, r1
 9e8:	81 1d       	adc	r24, r1
 9ea:	20 f4       	brcc	.+8      	; 0x9f4 <round+0x3c>
 9ec:	87 95       	ror	r24
 9ee:	77 95       	ror	r23
 9f0:	67 95       	ror	r22
 9f2:	93 95       	inc	r25
 9f4:	0c 94 00 05 	jmp	0xa00	; 0xa00 <__fp_mintl>
 9f8:	0c 94 1b 05 	jmp	0xa36	; 0xa36 <__fp_mpack>
 9fc:	0c 94 69 04 	jmp	0x8d2	; 0x8d2 <__fp_szero>

00000a00 <__fp_mintl>:
 a00:	88 23       	and	r24, r24
 a02:	71 f4       	brne	.+28     	; 0xa20 <__fp_mintl+0x20>
 a04:	77 23       	and	r23, r23
 a06:	21 f0       	breq	.+8      	; 0xa10 <__fp_mintl+0x10>
 a08:	98 50       	subi	r25, 0x08	; 8
 a0a:	87 2b       	or	r24, r23
 a0c:	76 2f       	mov	r23, r22
 a0e:	07 c0       	rjmp	.+14     	; 0xa1e <__fp_mintl+0x1e>
 a10:	66 23       	and	r22, r22
 a12:	11 f4       	brne	.+4      	; 0xa18 <__fp_mintl+0x18>
 a14:	99 27       	eor	r25, r25
 a16:	0d c0       	rjmp	.+26     	; 0xa32 <__fp_mintl+0x32>
 a18:	90 51       	subi	r25, 0x10	; 16
 a1a:	86 2b       	or	r24, r22
 a1c:	70 e0       	ldi	r23, 0x00	; 0
 a1e:	60 e0       	ldi	r22, 0x00	; 0
 a20:	2a f0       	brmi	.+10     	; 0xa2c <__fp_mintl+0x2c>
 a22:	9a 95       	dec	r25
 a24:	66 0f       	add	r22, r22
 a26:	77 1f       	adc	r23, r23
 a28:	88 1f       	adc	r24, r24
 a2a:	da f7       	brpl	.-10     	; 0xa22 <__fp_mintl+0x22>
 a2c:	88 0f       	add	r24, r24
 a2e:	96 95       	lsr	r25
 a30:	87 95       	ror	r24
 a32:	97 f9       	bld	r25, 7
 a34:	08 95       	ret

00000a36 <__fp_mpack>:
 a36:	9f 3f       	cpi	r25, 0xFF	; 255
 a38:	31 f0       	breq	.+12     	; 0xa46 <__fp_mpack_finite+0xc>

00000a3a <__fp_mpack_finite>:
 a3a:	91 50       	subi	r25, 0x01	; 1
 a3c:	20 f4       	brcc	.+8      	; 0xa46 <__fp_mpack_finite+0xc>
 a3e:	87 95       	ror	r24
 a40:	77 95       	ror	r23
 a42:	67 95       	ror	r22
 a44:	b7 95       	ror	r27
 a46:	88 0f       	add	r24, r24
 a48:	91 1d       	adc	r25, r1
 a4a:	96 95       	lsr	r25
 a4c:	87 95       	ror	r24
 a4e:	97 f9       	bld	r25, 7
 a50:	08 95       	ret

00000a52 <_exit>:
 a52:	f8 94       	cli

00000a54 <__stop_program>:
 a54:	ff cf       	rjmp	.-2      	; 0xa54 <__stop_program>

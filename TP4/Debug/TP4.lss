
TP4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000200  00000294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000200  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800102  00800102  00000296  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000296  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d7c  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e7  00000000  00000000  000011e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007d4  00000000  00000000  00001acb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000260  00000000  00000000  000022a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b0  00000000  00000000  00002500  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000012e  00000000  00000000  00002ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00002bde  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e0       	ldi	r30, 0x00	; 0
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 30       	cpi	r26, 0x08	; 8
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 7d 00 	call	0xfa	; 0xfa <main>
  9e:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LEDS_setGreen>:
	return final_green;
}

uint8_t LEDS_getFinalBlue(){
	return final_blue;
}
  a6:	2f ef       	ldi	r18, 0xFF	; 255
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	28 1b       	sub	r18, r24
  ac:	31 09       	sbc	r19, r1
  ae:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
  b2:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
  b6:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <green>
  ba:	08 95       	ret

000000bc <LEDS_setBlue>:
  bc:	2f ef       	ldi	r18, 0xFF	; 255
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	28 1b       	sub	r18, r24
  c2:	31 09       	sbc	r19, r1
  c4:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  c8:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
  cc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
  d0:	08 95       	ret

000000d2 <LEDS_init>:
  d2:	84 b1       	in	r24, 0x04	; 4
  d4:	86 62       	ori	r24, 0x26	; 38
  d6:	84 b9       	out	0x04, r24	; 4
  d8:	85 b1       	in	r24, 0x05	; 5
  da:	80 62       	ori	r24, 0x20	; 32
  dc:	85 b9       	out	0x05, r24	; 5
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	0e 94 53 00 	call	0xa6	; 0xa6 <LEDS_setGreen>
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	0e 94 5e 00 	call	0xbc	; 0xbc <LEDS_setBlue>
  ea:	08 95       	ret

000000ec <LEDS_setFinalRGB>:

void LEDS_setFinalRGB(uint8_t valueR, uint8_t valueG, uint8_t valueB){
	final_red = valueR;
  ec:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <final_red>
	final_green = valueG;
  f0:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <final_green>
	final_blue = valueB;
  f4:	40 93 04 01 	sts	0x0104, r20	; 0x800104 <final_blue>
  f8:	08 95       	ret

000000fa <main>:
*/

int main(void)
{
	
	TIMERS_InitTimer0();
  fa:	0e 94 c1 00 	call	0x182	; 0x182 <TIMERS_InitTimer0>
	TIMERS_InitTimer1();
  fe:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <TIMERS_InitTimer1>
	
	LEDS_init();
 102:	0e 94 69 00 	call	0xd2	; 0xd2 <LEDS_init>
	
	LEDS_setFinalRGB(100, 130, 200);
 106:	48 ec       	ldi	r20, 0xC8	; 200
 108:	62 e8       	ldi	r22, 0x82	; 130
 10a:	84 e6       	ldi	r24, 0x64	; 100
 10c:	0e 94 76 00 	call	0xec	; 0xec <LEDS_setFinalRGB>
	
	//Test PB4 como salida y un 1 en la misma
	DDRB |= (1 << PORTB4);
 110:	84 b1       	in	r24, 0x04	; 4
 112:	80 61       	ori	r24, 0x10	; 16
 114:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1 << PORTB4);
 116:	85 b1       	in	r24, 0x05	; 5
 118:	8f 7e       	andi	r24, 0xEF	; 239
 11a:	85 b9       	out	0x05, r24	; 5
	
	sei();
 11c:	78 94       	sei
	
    while(1)
    {
		sEOS_Dispatch_Tasks();
 11e:	0e 94 99 00 	call	0x132	; 0x132 <sEOS_Dispatch_Tasks>
		sEOS_Go_To_Sleep();
 122:	0e 94 b6 00 	call	0x16c	; 0x16c <sEOS_Go_To_Sleep>
 126:	fb cf       	rjmp	.-10     	; 0x11e <main+0x24>

00000128 <MEF_Update>:
void MEF_init(){
	
}

void MEF_Update(){
	PORTB ^= (1<<PORTB4);
 128:	95 b1       	in	r25, 0x05	; 5
 12a:	80 e1       	ldi	r24, 0x10	; 16
 12c:	89 27       	eor	r24, r25
 12e:	85 b9       	out	0x05, r24	; 5
 130:	08 95       	ret

00000132 <sEOS_Dispatch_Tasks>:
static volatile uint16_t counter = 499;
static volatile uint8_t FLAG_MEF = 0;


void sEOS_Dispatch_Tasks(){
	if(FLAG_MEF){
 132:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <FLAG_MEF>
 136:	88 23       	and	r24, r24
 138:	21 f0       	breq	.+8      	; 0x142 <sEOS_Dispatch_Tasks+0x10>
		MEF_Update();
 13a:	0e 94 94 00 	call	0x128	; 0x128 <MEF_Update>
		FLAG_MEF = 0;	
 13e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <FLAG_MEF>
 142:	08 95       	ret

00000144 <sEOS_SCH_Tasks>:
		*/
}

void sEOS_SCH_Tasks(){
	//Cada 50 ms pone el flag en 1
	if (++counter == 500) {
 144:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 148:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 14c:	01 96       	adiw	r24, 0x01	; 1
 14e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 152:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 156:	84 3f       	cpi	r24, 0xF4	; 244
 158:	91 40       	sbci	r25, 0x01	; 1
 15a:	39 f4       	brne	.+14     	; 0x16a <sEOS_SCH_Tasks+0x26>
		FLAG_MEF = 1;
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <FLAG_MEF>
		counter = 0;
 162:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 166:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 16a:	08 95       	ret

0000016c <sEOS_Go_To_Sleep>:
//Pone en modo ahorro el micro
void sEOS_Go_To_Sleep(){
	
	// Setea el sleep mode a "idle". Este modo permite a la CPU dormir
	// dejando los perifericos (Como Timers y UART) corriendo
	set_sleep_mode(SLEEP_MODE_IDLE);
 16c:	83 b7       	in	r24, 0x33	; 51
 16e:	81 7f       	andi	r24, 0xF1	; 241
 170:	83 bf       	out	0x33, r24	; 51

	// Habilita sleep mode
	sleep_enable();
 172:	83 b7       	in	r24, 0x33	; 51
 174:	81 60       	ori	r24, 0x01	; 1
 176:	83 bf       	out	0x33, r24	; 51

	// Duerme al cpu
	sleep_cpu();
 178:	88 95       	sleep

	// Deshabilita sleep mode
	sleep_disable();
 17a:	83 b7       	in	r24, 0x33	; 51
 17c:	8e 7f       	andi	r24, 0xFE	; 254
 17e:	83 bf       	out	0x33, r24	; 51
 180:	08 95       	ret

00000182 <TIMERS_InitTimer0>:
#include "timers.h"
#include "../sEOS/sEOS.h"

void TIMERS_InitTimer0(){
	// Interrupcion cada 1ms
	TCCR0A |= (1 << WGM01);
 182:	84 b5       	in	r24, 0x24	; 36
 184:	82 60       	ori	r24, 0x02	; 2
 186:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS01) | (1 << CS00);  // prescaler 64
 188:	85 b5       	in	r24, 0x25	; 37
 18a:	83 60       	ori	r24, 0x03	; 3
 18c:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << OCIE0A);
 18e:	ee e6       	ldi	r30, 0x6E	; 110
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	82 60       	ori	r24, 0x02	; 2
 196:	80 83       	st	Z, r24
	
	OCR0A = 249;
 198:	89 ef       	ldi	r24, 0xF9	; 249
 19a:	87 bd       	out	0x27, r24	; 39
 19c:	08 95       	ret

0000019e <__vector_14>:
}
static volatile uint16_t counter = 499;
ISR(TIMER0_COMPA_vect){
 19e:	1f 92       	push	r1
 1a0:	0f 92       	push	r0
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	0f 92       	push	r0
 1a6:	11 24       	eor	r1, r1
 1a8:	2f 93       	push	r18
 1aa:	3f 93       	push	r19
 1ac:	4f 93       	push	r20
 1ae:	5f 93       	push	r21
 1b0:	6f 93       	push	r22
 1b2:	7f 93       	push	r23
 1b4:	8f 93       	push	r24
 1b6:	9f 93       	push	r25
 1b8:	af 93       	push	r26
 1ba:	bf 93       	push	r27
 1bc:	ef 93       	push	r30
 1be:	ff 93       	push	r31
	sEOS_SCH_Tasks();
 1c0:	0e 94 a2 00 	call	0x144	; 0x144 <sEOS_SCH_Tasks>
 1c4:	ff 91       	pop	r31
 1c6:	ef 91       	pop	r30
 1c8:	bf 91       	pop	r27
 1ca:	af 91       	pop	r26
 1cc:	9f 91       	pop	r25
 1ce:	8f 91       	pop	r24
 1d0:	7f 91       	pop	r23
 1d2:	6f 91       	pop	r22
 1d4:	5f 91       	pop	r21
 1d6:	4f 91       	pop	r20
 1d8:	3f 91       	pop	r19
 1da:	2f 91       	pop	r18
 1dc:	0f 90       	pop	r0
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	0f 90       	pop	r0
 1e2:	1f 90       	pop	r1
 1e4:	18 95       	reti

000001e6 <TIMERS_InitTimer1>:
// Init timer
void TIMERS_InitTimer1(){
	//Modo Fast PWM con top = 0x00FF (Modo 5)
	//Prescaler en 256
	//Modo NO invertido (set on count reset)
	TCCR1A |= (1 << WGM10) | (1<< COM1A1) | (1<< COM1B1);
 1e6:	e0 e8       	ldi	r30, 0x80	; 128
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	80 81       	ld	r24, Z
 1ec:	81 6a       	ori	r24, 0xA1	; 161
 1ee:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << CS12);// | (1 << CS10) ;
 1f0:	e1 e8       	ldi	r30, 0x81	; 129
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	80 81       	ld	r24, Z
 1f6:	8c 60       	ori	r24, 0x0C	; 12
 1f8:	80 83       	st	Z, r24
 1fa:	08 95       	ret

000001fc <_exit>:
 1fc:	f8 94       	cli

000001fe <__stop_program>:
 1fe:	ff cf       	rjmp	.-2      	; 0x1fe <__stop_program>

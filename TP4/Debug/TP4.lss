
TP4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000005a2  00000636  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002b  00800104  00800104  0000063a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000063a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000066c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012e4  00000000  00000000  00000864  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a5e  00000000  00000000  00001b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bd1  00000000  00000000  000025a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000344  00000000  00000000  00003178  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000070e  00000000  00000000  000034bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004aa  00000000  00000000  00003bca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00004074  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 a0 02 	jmp	0x540	; 0x540 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ea       	ldi	r30, 0xA2	; 162
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 32       	cpi	r26, 0x2F	; 47
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 80 01 	call	0x300	; 0x300 <main>
  9e:	0c 94 cf 02 	jmp	0x59e	; 0x59e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LDR_config>:
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
  ac:	87 e8       	ldi	r24, 0x87	; 135
  ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  b2:	ec e7       	ldi	r30, 0x7C	; 124
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	80 64       	ori	r24, 0x40	; 64
  ba:	80 83       	st	Z, r24
  bc:	08 95       	ret

000000be <LDR_get_value>:
  be:	ea e7       	ldi	r30, 0x7A	; 122
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	80 83       	st	Z, r24
  c8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  cc:	84 ff       	sbrs	r24, 4
  ce:	fc cf       	rjmp	.-8      	; 0xc8 <LDR_get_value+0xa>
  d0:	ea e7       	ldi	r30, 0x7A	; 122
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	80 61       	ori	r24, 0x10	; 16
  d8:	80 83       	st	Z, r24
  da:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  de:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  e2:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
  e6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
  ea:	08 95       	ret

000000ec <distributeValues>:
  ec:	cf 93       	push	r28
  ee:	5d ec       	ldi	r21, 0xCD	; 205
  f0:	85 9f       	mul	r24, r21
  f2:	a1 2d       	mov	r26, r1
  f4:	11 24       	eor	r1, r1
  f6:	a6 95       	lsr	r26
  f8:	a6 95       	lsr	r26
  fa:	a6 95       	lsr	r26
  fc:	2a 2f       	mov	r18, r26
  fe:	22 0f       	add	r18, r18
 100:	92 2f       	mov	r25, r18
 102:	99 0f       	add	r25, r25
 104:	99 0f       	add	r25, r25
 106:	92 0f       	add	r25, r18
 108:	c8 2f       	mov	r28, r24
 10a:	c9 1b       	sub	r28, r25
 10c:	65 9f       	mul	r22, r21
 10e:	71 2d       	mov	r23, r1
 110:	11 24       	eor	r1, r1
 112:	76 95       	lsr	r23
 114:	76 95       	lsr	r23
 116:	76 95       	lsr	r23
 118:	97 2f       	mov	r25, r23
 11a:	99 0f       	add	r25, r25
 11c:	89 2f       	mov	r24, r25
 11e:	88 0f       	add	r24, r24
 120:	88 0f       	add	r24, r24
 122:	89 0f       	add	r24, r25
 124:	b6 2f       	mov	r27, r22
 126:	b8 1b       	sub	r27, r24
 128:	45 9f       	mul	r20, r21
 12a:	51 2d       	mov	r21, r1
 12c:	11 24       	eor	r1, r1
 12e:	56 95       	lsr	r21
 130:	56 95       	lsr	r21
 132:	56 95       	lsr	r21
 134:	95 2f       	mov	r25, r21
 136:	99 0f       	add	r25, r25
 138:	89 2f       	mov	r24, r25
 13a:	88 0f       	add	r24, r24
 13c:	88 0f       	add	r24, r24
 13e:	89 0f       	add	r24, r25
 140:	64 2f       	mov	r22, r20
 142:	68 1b       	sub	r22, r24
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	21 c0       	rjmp	.+66     	; 0x18a <distributeValues+0x9e>
 148:	28 2f       	mov	r18, r24
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	8c 17       	cp	r24, r28
 14e:	18 f4       	brcc	.+6      	; 0x156 <distributeValues+0x6a>
 150:	91 e0       	ldi	r25, 0x01	; 1
 152:	9a 0f       	add	r25, r26
 154:	01 c0       	rjmp	.+2      	; 0x158 <distributeValues+0x6c>
 156:	9a 2f       	mov	r25, r26
 158:	f9 01       	movw	r30, r18
 15a:	e6 5e       	subi	r30, 0xE6	; 230
 15c:	fe 4f       	sbci	r31, 0xFE	; 254
 15e:	90 83       	st	Z, r25
 160:	8b 17       	cp	r24, r27
 162:	18 f4       	brcc	.+6      	; 0x16a <distributeValues+0x7e>
 164:	91 e0       	ldi	r25, 0x01	; 1
 166:	97 0f       	add	r25, r23
 168:	01 c0       	rjmp	.+2      	; 0x16c <distributeValues+0x80>
 16a:	97 2f       	mov	r25, r23
 16c:	f9 01       	movw	r30, r18
 16e:	e0 5f       	subi	r30, 0xF0	; 240
 170:	fe 4f       	sbci	r31, 0xFE	; 254
 172:	90 83       	st	Z, r25
 174:	86 17       	cp	r24, r22
 176:	18 f4       	brcc	.+6      	; 0x17e <distributeValues+0x92>
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	95 0f       	add	r25, r21
 17c:	01 c0       	rjmp	.+2      	; 0x180 <distributeValues+0x94>
 17e:	95 2f       	mov	r25, r21
 180:	f9 01       	movw	r30, r18
 182:	ea 5f       	subi	r30, 0xFA	; 250
 184:	fe 4f       	sbci	r31, 0xFE	; 254
 186:	90 83       	st	Z, r25
 188:	8f 5f       	subi	r24, 0xFF	; 255
 18a:	8a 30       	cpi	r24, 0x0A	; 10
 18c:	e8 f2       	brcs	.-70     	; 0x148 <distributeValues+0x5c>
 18e:	cf 91       	pop	r28
 190:	08 95       	ret

00000192 <LEDS_setRed>:
 192:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <red>
 196:	08 95       	ret

00000198 <LEDS_setGreen>:
 198:	2f ef       	ldi	r18, 0xFF	; 255
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	28 1b       	sub	r18, r24
 19e:	31 09       	sbc	r19, r1
 1a0:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 1a4:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 1a8:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <green>
 1ac:	08 95       	ret

000001ae <LEDS_setBlue>:
 1ae:	2f ef       	ldi	r18, 0xFF	; 255
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	28 1b       	sub	r18, r24
 1b4:	31 09       	sbc	r19, r1
 1b6:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1ba:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 1be:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <blue>
 1c2:	08 95       	ret

000001c4 <LEDS_init>:
 1c4:	84 b1       	in	r24, 0x04	; 4
 1c6:	86 62       	ori	r24, 0x26	; 38
 1c8:	84 b9       	out	0x04, r24	; 4
 1ca:	85 b1       	in	r24, 0x05	; 5
 1cc:	80 62       	ori	r24, 0x20	; 32
 1ce:	85 b9       	out	0x05, r24	; 5
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	0e 94 c9 00 	call	0x192	; 0x192 <LEDS_setRed>
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	0e 94 cc 00 	call	0x198	; 0x198 <LEDS_setGreen>
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LEDS_setBlue>
 1e2:	20 e0       	ldi	r18, 0x00	; 0
 1e4:	0f c0       	rjmp	.+30     	; 0x204 <LEDS_init+0x40>
 1e6:	82 2f       	mov	r24, r18
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	fc 01       	movw	r30, r24
 1ec:	e6 5e       	subi	r30, 0xE6	; 230
 1ee:	fe 4f       	sbci	r31, 0xFE	; 254
 1f0:	10 82       	st	Z, r1
 1f2:	fc 01       	movw	r30, r24
 1f4:	e0 5f       	subi	r30, 0xF0	; 240
 1f6:	fe 4f       	sbci	r31, 0xFE	; 254
 1f8:	10 82       	st	Z, r1
 1fa:	fc 01       	movw	r30, r24
 1fc:	ea 5f       	subi	r30, 0xFA	; 250
 1fe:	fe 4f       	sbci	r31, 0xFE	; 254
 200:	10 82       	st	Z, r1
 202:	2f 5f       	subi	r18, 0xFF	; 255
 204:	2a 30       	cpi	r18, 0x0A	; 10
 206:	78 f3       	brcs	.-34     	; 0x1e6 <LEDS_init+0x22>
 208:	08 95       	ret

0000020a <LEDS_getRed>:
 20a:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <red>
 20e:	08 95       	ret

00000210 <LEDS_getGreen>:
 210:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <green>
 214:	08 95       	ret

00000216 <LEDS_getBlue>:
 216:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <blue>
 21a:	08 95       	ret

0000021c <LEDS_getFinalRed>:
 21c:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <final_red>
 220:	08 95       	ret

00000222 <LEDS_getFinalGreen>:
 222:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <final_green>
 226:	08 95       	ret

00000228 <LEDS_getFinalBlue>:
 228:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <final_blue>
 22c:	08 95       	ret

0000022e <LEDS_setFinalRGB>:
 22e:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <final_red>
 232:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <final_green>
 236:	40 93 27 01 	sts	0x0127, r20	; 0x800127 <final_blue>
 23a:	0e 94 76 00 	call	0xec	; 0xec <distributeValues>
 23e:	08 95       	ret

00000240 <LEDS_incrementRed>:
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
 244:	ec 01       	movw	r28, r24
 246:	0e 94 05 01 	call	0x20a	; 0x20a <LEDS_getRed>
 24a:	c6 5e       	subi	r28, 0xE6	; 230
 24c:	de 4f       	sbci	r29, 0xFE	; 254
 24e:	98 81       	ld	r25, Y
 250:	89 0f       	add	r24, r25
 252:	0e 94 c9 00 	call	0x192	; 0x192 <LEDS_setRed>
 256:	df 91       	pop	r29
 258:	cf 91       	pop	r28
 25a:	08 95       	ret

0000025c <LEDS_incrementGreen>:
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29
 260:	ec 01       	movw	r28, r24
 262:	0e 94 08 01 	call	0x210	; 0x210 <LEDS_getGreen>
 266:	c0 5f       	subi	r28, 0xF0	; 240
 268:	de 4f       	sbci	r29, 0xFE	; 254
 26a:	98 81       	ld	r25, Y
 26c:	89 0f       	add	r24, r25
 26e:	0e 94 cc 00 	call	0x198	; 0x198 <LEDS_setGreen>
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	08 95       	ret

00000278 <LEDS_incrementBlue>:
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	ec 01       	movw	r28, r24
 27e:	0e 94 0b 01 	call	0x216	; 0x216 <LEDS_getBlue>
 282:	ca 5f       	subi	r28, 0xFA	; 250
 284:	de 4f       	sbci	r29, 0xFE	; 254
 286:	98 81       	ld	r25, Y
 288:	89 0f       	add	r24, r25
 28a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LEDS_setBlue>
 28e:	df 91       	pop	r29
 290:	cf 91       	pop	r28
 292:	08 95       	ret

00000294 <LEDS_decrementRed>:
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
 298:	ec 01       	movw	r28, r24
 29a:	0e 94 05 01 	call	0x20a	; 0x20a <LEDS_getRed>
 29e:	e9 e0       	ldi	r30, 0x09	; 9
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	ec 1b       	sub	r30, r28
 2a4:	fd 0b       	sbc	r31, r29
 2a6:	e6 5e       	subi	r30, 0xE6	; 230
 2a8:	fe 4f       	sbci	r31, 0xFE	; 254
 2aa:	90 81       	ld	r25, Z
 2ac:	89 1b       	sub	r24, r25
 2ae:	0e 94 c9 00 	call	0x192	; 0x192 <LEDS_setRed>
 2b2:	df 91       	pop	r29
 2b4:	cf 91       	pop	r28
 2b6:	08 95       	ret

000002b8 <LEDS_decrementGreen>:
 2b8:	cf 93       	push	r28
 2ba:	df 93       	push	r29
 2bc:	ec 01       	movw	r28, r24
 2be:	0e 94 08 01 	call	0x210	; 0x210 <LEDS_getGreen>
 2c2:	e9 e0       	ldi	r30, 0x09	; 9
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	ec 1b       	sub	r30, r28
 2c8:	fd 0b       	sbc	r31, r29
 2ca:	e0 5f       	subi	r30, 0xF0	; 240
 2cc:	fe 4f       	sbci	r31, 0xFE	; 254
 2ce:	90 81       	ld	r25, Z
 2d0:	89 1b       	sub	r24, r25
 2d2:	0e 94 cc 00 	call	0x198	; 0x198 <LEDS_setGreen>
 2d6:	df 91       	pop	r29
 2d8:	cf 91       	pop	r28
 2da:	08 95       	ret

000002dc <LEDS_decrementBlue>:
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	ec 01       	movw	r28, r24
 2e2:	0e 94 0b 01 	call	0x216	; 0x216 <LEDS_getBlue>
 2e6:	e9 e0       	ldi	r30, 0x09	; 9
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	ec 1b       	sub	r30, r28
 2ec:	fd 0b       	sbc	r31, r29
 2ee:	ea 5f       	subi	r30, 0xFA	; 250
 2f0:	fe 4f       	sbci	r31, 0xFE	; 254
 2f2:	90 81       	ld	r25, Z
 2f4:	89 1b       	sub	r24, r25
 2f6:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LEDS_setBlue>
 2fa:	df 91       	pop	r29
 2fc:	cf 91       	pop	r28
 2fe:	08 95       	ret

00000300 <main>:


int main(void)
{
	
	TIMERS_InitTimer0();
 300:	0e 94 92 02 	call	0x524	; 0x524 <TIMERS_InitTimer0>
	TIMERS_InitTimer1();
 304:	0e 94 c4 02 	call	0x588	; 0x588 <TIMERS_InitTimer1>
	
	LEDS_init();
 308:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <LEDS_init>
	MEF_init();
 30c:	0e 94 9b 01 	call	0x336	; 0x336 <MEF_init>
	LEDS_setFinalRGB(0, 10, 255);
 310:	4f ef       	ldi	r20, 0xFF	; 255
 312:	6a e0       	ldi	r22, 0x0A	; 10
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	0e 94 17 01 	call	0x22e	; 0x22e <LEDS_setFinalRGB>
	
	LDR_config();
 31a:	0e 94 53 00 	call	0xa6	; 0xa6 <LDR_config>
	
	//Test PB4 como salida y un 1 en la misma
	DDRB |= (1 << PORTB4);
 31e:	84 b1       	in	r24, 0x04	; 4
 320:	80 61       	ori	r24, 0x10	; 16
 322:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1 << PORTB4);
 324:	85 b1       	in	r24, 0x05	; 5
 326:	8f 7e       	andi	r24, 0xEF	; 239
 328:	85 b9       	out	0x05, r24	; 5
	
	sei();
 32a:	78 94       	sei
	
    while(1)
    {
		sEOS_Dispatch_Tasks();
 32c:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sEOS_Dispatch_Tasks>
		sEOS_Go_To_Sleep();
 330:	0e 94 87 02 	call	0x50e	; 0x50e <sEOS_Go_To_Sleep>
 334:	fb cf       	rjmp	.-10     	; 0x32c <main+0x2c>

00000336 <MEF_init>:
	state = OFF;
	stateCount = 0;
}

void get_timeOff(){
	uint16_t LDR_value = LDR_get_value();
 336:	83 e0       	ldi	r24, 0x03	; 3
 338:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <state>
 33c:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <stateCount+0x1>
 340:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <stateCount>
 344:	08 95       	ret

00000346 <MEF_Update>:
		//timeOff
	}
}

void MEF_Update(){
	stateCount++;
 346:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <stateCount>
 34a:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <stateCount+0x1>
 34e:	01 96       	adiw	r24, 0x01	; 1
 350:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <stateCount+0x1>
 354:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <stateCount>
	
	switch (state){
 358:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <state>
 35c:	81 30       	cpi	r24, 0x01	; 1
 35e:	09 f4       	brne	.+2      	; 0x362 <MEF_Update+0x1c>
 360:	53 c0       	rjmp	.+166    	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 362:	58 f1       	brcs	.+86     	; 0x3ba <MEF_Update+0x74>
 364:	82 30       	cpi	r24, 0x02	; 2
 366:	09 f4       	brne	.+2      	; 0x36a <MEF_Update+0x24>
 368:	6c c0       	rjmp	.+216    	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 36a:	83 30       	cpi	r24, 0x03	; 3
 36c:	09 f0       	breq	.+2      	; 0x370 <MEF_Update+0x2a>
 36e:	9a c0       	rjmp	.+308    	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
		case OFF:
			PORTB |= (1<<PORTB4);
 370:	85 b1       	in	r24, 0x05	; 5
 372:	80 61       	ori	r24, 0x10	; 16
 374:	85 b9       	out	0x05, r24	; 5
			
			LEDS_setRed(0);
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	0e 94 c9 00 	call	0x192	; 0x192 <LEDS_setRed>
			LEDS_setGreen(0);
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	0e 94 cc 00 	call	0x198	; 0x198 <LEDS_setGreen>
			LEDS_setBlue(0);
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LEDS_setBlue>
			
			timeOff = (LDR_get_value() > 200) ? 100 : 10;
 388:	0e 94 5f 00 	call	0xbe	; 0xbe <LDR_get_value>
 38c:	89 3c       	cpi	r24, 0xC9	; 201
 38e:	91 05       	cpc	r25, r1
 390:	1c f0       	brlt	.+6      	; 0x398 <MEF_Update+0x52>
 392:	24 e6       	ldi	r18, 0x64	; 100
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	02 c0       	rjmp	.+4      	; 0x39c <MEF_Update+0x56>
 398:	2a e0       	ldi	r18, 0x0A	; 10
 39a:	30 e0       	ldi	r19, 0x00	; 0
			if(stateCount == timeOff){
 39c:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <stateCount>
 3a0:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <stateCount+0x1>
 3a4:	28 17       	cp	r18, r24
 3a6:	39 07       	cpc	r19, r25
 3a8:	09 f0       	breq	.+2      	; 0x3ac <MEF_Update+0x66>
 3aa:	7c c0       	rjmp	.+248    	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
				state = RAISING;
 3ac:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <state>
				stateCount = 0;
 3b0:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <stateCount+0x1>
 3b4:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <stateCount>
 3b8:	08 95       	ret
			}
			break;
			
		case RAISING:
			PORTB |= (1<<PORTB4);
 3ba:	85 b1       	in	r24, 0x05	; 5
 3bc:	80 61       	ori	r24, 0x10	; 16
 3be:	85 b9       	out	0x05, r24	; 5
			
			LEDS_incrementRed(stateCount - 1);
 3c0:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <stateCount>
 3c4:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <stateCount+0x1>
 3c8:	01 97       	sbiw	r24, 0x01	; 1
 3ca:	0e 94 20 01 	call	0x240	; 0x240 <LEDS_incrementRed>
			LEDS_incrementGreen(stateCount - 1);
 3ce:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <stateCount>
 3d2:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <stateCount+0x1>
 3d6:	01 97       	sbiw	r24, 0x01	; 1
 3d8:	0e 94 2e 01 	call	0x25c	; 0x25c <LEDS_incrementGreen>
			LEDS_incrementBlue(stateCount - 1);
 3dc:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <stateCount>
 3e0:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <stateCount+0x1>
 3e4:	01 97       	sbiw	r24, 0x01	; 1
 3e6:	0e 94 3c 01 	call	0x278	; 0x278 <LEDS_incrementBlue>
			
			if(stateCount == 10){
 3ea:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <stateCount>
 3ee:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <stateCount+0x1>
 3f2:	0a 97       	sbiw	r24, 0x0a	; 10
 3f4:	09 f0       	breq	.+2      	; 0x3f8 <MEF_Update+0xb2>
 3f6:	56 c0       	rjmp	.+172    	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
				state = ON;
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <state>
				stateCount = 0;
 3fe:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <stateCount+0x1>
 402:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <stateCount>
 406:	08 95       	ret
			}
			break;
			
		case ON:
			PORTB &= ~(1<<PORTB4);
 408:	85 b1       	in	r24, 0x05	; 5
 40a:	8f 7e       	andi	r24, 0xEF	; 239
 40c:	85 b9       	out	0x05, r24	; 5

			
			LEDS_setRed(LEDS_getFinalRed());
 40e:	0e 94 0e 01 	call	0x21c	; 0x21c <LEDS_getFinalRed>
 412:	0e 94 c9 00 	call	0x192	; 0x192 <LEDS_setRed>
			LEDS_setGreen(LEDS_getFinalGreen());
 416:	0e 94 11 01 	call	0x222	; 0x222 <LEDS_getFinalGreen>
 41a:	0e 94 cc 00 	call	0x198	; 0x198 <LEDS_setGreen>
			LEDS_setBlue(LEDS_getFinalBlue());
 41e:	0e 94 14 01 	call	0x228	; 0x228 <LEDS_getFinalBlue>
 422:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LEDS_setBlue>
			
			if(stateCount == 20){
 426:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <stateCount>
 42a:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <stateCount+0x1>
 42e:	44 97       	sbiw	r24, 0x14	; 20
 430:	c9 f5       	brne	.+114    	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
				state = FALLING;
 432:	82 e0       	ldi	r24, 0x02	; 2
 434:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <state>
				stateCount = 0;
 438:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <stateCount+0x1>
 43c:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <stateCount>
 440:	08 95       	ret
			}
			break;
			
		case FALLING:
			PORTB |= (1<<PORTB4);
 442:	85 b1       	in	r24, 0x05	; 5
 444:	80 61       	ori	r24, 0x10	; 16
 446:	85 b9       	out	0x05, r24	; 5
			
			if (LEDS_getFinalRed() != 0) LEDS_decrementRed(stateCount - 1);
 448:	0e 94 0e 01 	call	0x21c	; 0x21c <LEDS_getFinalRed>
 44c:	88 23       	and	r24, r24
 44e:	39 f0       	breq	.+14     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 450:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <stateCount>
 454:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <stateCount+0x1>
 458:	01 97       	sbiw	r24, 0x01	; 1
 45a:	0e 94 4a 01 	call	0x294	; 0x294 <LEDS_decrementRed>
			if (LEDS_getFinalGreen() != 0) LEDS_decrementGreen(stateCount - 1);
 45e:	0e 94 11 01 	call	0x222	; 0x222 <LEDS_getFinalGreen>
 462:	88 23       	and	r24, r24
 464:	39 f0       	breq	.+14     	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 466:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <stateCount>
 46a:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <stateCount+0x1>
 46e:	01 97       	sbiw	r24, 0x01	; 1
 470:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LEDS_decrementGreen>
			if (LEDS_getFinalBlue() != 0) LEDS_decrementBlue(stateCount - 1);
 474:	0e 94 14 01 	call	0x228	; 0x228 <LEDS_getFinalBlue>
 478:	88 23       	and	r24, r24
 47a:	39 f0       	breq	.+14     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 47c:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <stateCount>
 480:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <stateCount+0x1>
 484:	01 97       	sbiw	r24, 0x01	; 1
 486:	0e 94 6e 01 	call	0x2dc	; 0x2dc <LEDS_decrementBlue>
			
			if(stateCount == 10){
 48a:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <stateCount>
 48e:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <stateCount+0x1>
 492:	0a 97       	sbiw	r24, 0x0a	; 10
 494:	39 f4       	brne	.+14     	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
				state = OFF;
 496:	83 e0       	ldi	r24, 0x03	; 3
 498:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <state>
				stateCount = 0;
 49c:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <stateCount+0x1>
 4a0:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <stateCount>
 4a4:	08 95       	ret

000004a6 <sEOS_Dispatch_Tasks>:
static volatile uint16_t counter_LDR = 8;
static volatile uint8_t FLAG_LDR = 0;


void sEOS_Dispatch_Tasks(){
	if(FLAG_MEF){
 4a6:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <FLAG_MEF>
 4aa:	88 23       	and	r24, r24
 4ac:	29 f0       	breq	.+10     	; 0x4b8 <sEOS_Dispatch_Tasks+0x12>
		MEF_Update();
 4ae:	0e 94 a3 01 	call	0x346	; 0x346 <MEF_Update>
		FLAG_MEF = 0;	
 4b2:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <FLAG_MEF>
 4b6:	08 95       	ret
	}
	else if (FLAG_LDR){
 4b8:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <FLAG_LDR>
 4bc:	81 11       	cpse	r24, r1
		FLAG_LDR = 0;
 4be:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <FLAG_LDR>
 4c2:	08 95       	ret

000004c4 <sEOS_SCH_Tasks>:
		*/
}

void sEOS_SCH_Tasks(){
	//Cada 50 ms pone el flag en 1
	if (++counter_MEF == 50) {
 4c4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <counter_MEF>
 4c8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <counter_MEF+0x1>
 4cc:	01 96       	adiw	r24, 0x01	; 1
 4ce:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <counter_MEF+0x1>
 4d2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <counter_MEF>
 4d6:	c2 97       	sbiw	r24, 0x32	; 50
 4d8:	39 f4       	brne	.+14     	; 0x4e8 <sEOS_SCH_Tasks+0x24>
		FLAG_MEF = 1;
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <FLAG_MEF>
		counter_MEF = 0;
 4e0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <counter_MEF+0x1>
 4e4:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <counter_MEF>
	}
	if (++counter_LDR == 10) {
 4e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4ec:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 4f0:	01 96       	adiw	r24, 0x01	; 1
 4f2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 4f6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 4fa:	0a 97       	sbiw	r24, 0x0a	; 10
 4fc:	39 f4       	brne	.+14     	; 0x50c <sEOS_SCH_Tasks+0x48>
		FLAG_LDR = 1;
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <FLAG_LDR>
		counter_LDR = 0;
 504:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 508:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 50c:	08 95       	ret

0000050e <sEOS_Go_To_Sleep>:
//Pone en modo ahorro el micro
void sEOS_Go_To_Sleep(){
	
	// Setea el sleep mode a "idle". Este modo permite a la CPU dormir
	// dejando los perifericos (Como Timers y UART) corriendo
	set_sleep_mode(SLEEP_MODE_IDLE);
 50e:	83 b7       	in	r24, 0x33	; 51
 510:	81 7f       	andi	r24, 0xF1	; 241
 512:	83 bf       	out	0x33, r24	; 51

	// Habilita sleep mode
	sleep_enable();
 514:	83 b7       	in	r24, 0x33	; 51
 516:	81 60       	ori	r24, 0x01	; 1
 518:	83 bf       	out	0x33, r24	; 51

	// Duerme al cpu
	sleep_cpu();
 51a:	88 95       	sleep

	// Deshabilita sleep mode
	sleep_disable();
 51c:	83 b7       	in	r24, 0x33	; 51
 51e:	8e 7f       	andi	r24, 0xFE	; 254
 520:	83 bf       	out	0x33, r24	; 51
 522:	08 95       	ret

00000524 <TIMERS_InitTimer0>:
#include "timers.h"
#include "../sEOS/sEOS.h"

void TIMERS_InitTimer0(){
	// Interrupcion cada 1ms
	TCCR0A |= (1 << WGM01);
 524:	84 b5       	in	r24, 0x24	; 36
 526:	82 60       	ori	r24, 0x02	; 2
 528:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS01) | (1 << CS00);  // prescaler 64
 52a:	85 b5       	in	r24, 0x25	; 37
 52c:	83 60       	ori	r24, 0x03	; 3
 52e:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << OCIE0A);
 530:	ee e6       	ldi	r30, 0x6E	; 110
 532:	f0 e0       	ldi	r31, 0x00	; 0
 534:	80 81       	ld	r24, Z
 536:	82 60       	ori	r24, 0x02	; 2
 538:	80 83       	st	Z, r24
	
	OCR0A = 249;
 53a:	89 ef       	ldi	r24, 0xF9	; 249
 53c:	87 bd       	out	0x27, r24	; 39
 53e:	08 95       	ret

00000540 <__vector_14>:
}

ISR(TIMER0_COMPA_vect){
 540:	1f 92       	push	r1
 542:	0f 92       	push	r0
 544:	0f b6       	in	r0, 0x3f	; 63
 546:	0f 92       	push	r0
 548:	11 24       	eor	r1, r1
 54a:	2f 93       	push	r18
 54c:	3f 93       	push	r19
 54e:	4f 93       	push	r20
 550:	5f 93       	push	r21
 552:	6f 93       	push	r22
 554:	7f 93       	push	r23
 556:	8f 93       	push	r24
 558:	9f 93       	push	r25
 55a:	af 93       	push	r26
 55c:	bf 93       	push	r27
 55e:	ef 93       	push	r30
 560:	ff 93       	push	r31
	sEOS_SCH_Tasks();
 562:	0e 94 62 02 	call	0x4c4	; 0x4c4 <sEOS_SCH_Tasks>
 566:	ff 91       	pop	r31
 568:	ef 91       	pop	r30
 56a:	bf 91       	pop	r27
 56c:	af 91       	pop	r26
 56e:	9f 91       	pop	r25
 570:	8f 91       	pop	r24
 572:	7f 91       	pop	r23
 574:	6f 91       	pop	r22
 576:	5f 91       	pop	r21
 578:	4f 91       	pop	r20
 57a:	3f 91       	pop	r19
 57c:	2f 91       	pop	r18
 57e:	0f 90       	pop	r0
 580:	0f be       	out	0x3f, r0	; 63
 582:	0f 90       	pop	r0
 584:	1f 90       	pop	r1
 586:	18 95       	reti

00000588 <TIMERS_InitTimer1>:
 588:	e0 e8       	ldi	r30, 0x80	; 128
 58a:	f0 e0       	ldi	r31, 0x00	; 0
 58c:	80 81       	ld	r24, Z
 58e:	81 6a       	ori	r24, 0xA1	; 161
 590:	80 83       	st	Z, r24
 592:	e1 e8       	ldi	r30, 0x81	; 129
 594:	f0 e0       	ldi	r31, 0x00	; 0
 596:	80 81       	ld	r24, Z
 598:	8c 60       	ori	r24, 0x0C	; 12
 59a:	80 83       	st	Z, r24
 59c:	08 95       	ret

0000059e <_exit>:
 59e:	f8 94       	cli

000005a0 <__stop_program>:
 5a0:	ff cf       	rjmp	.-2      	; 0x5a0 <__stop_program>

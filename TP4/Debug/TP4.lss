
TP4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000120  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000194  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009df  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e9  00000000  00000000  00000c93  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004c5  00000000  00000000  0000147c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f0  00000000  00000000  00001944  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043c  00000000  00000000  00001a34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000026  00000000  00000000  00001e70  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00001e96  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  88:	0c 94 8e 00 	jmp	0x11c	; 0x11c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <LEDS_setGreen>:
void LEDS_setRed(uint8_t value){
	
}

void LEDS_setGreen(uint8_t value){
	OCR1B = 255 - value;
  90:	2f ef       	ldi	r18, 0xFF	; 255
  92:	30 e0       	ldi	r19, 0x00	; 0
  94:	28 1b       	sub	r18, r24
  96:	31 09       	sbc	r19, r1
  98:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
  9c:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
  a0:	08 95       	ret

000000a2 <LEDS_setBlue>:
	green = value;
}

void LEDS_setBlue(uint8_t value){
	OCR1A = 255 - value;
  a2:	2f ef       	ldi	r18, 0xFF	; 255
  a4:	30 e0       	ldi	r19, 0x00	; 0
  a6:	28 1b       	sub	r18, r24
  a8:	31 09       	sbc	r19, r1
  aa:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  ae:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
  b2:	08 95       	ret

000000b4 <main>:
int main(void)
{
    /* Replace with your application code */
	//PIN 51 y 2 como salida
	
	TIMERS_InitTimer0();
  b4:	0e 94 75 00 	call	0xea	; 0xea <TIMERS_InitTimer0>
	TIMERS_InitTimer1();
  b8:	0e 94 83 00 	call	0x106	; 0x106 <TIMERS_InitTimer1>
	estado = OFF;
  bc:	83 e0       	ldi	r24, 0x03	; 3
  be:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	DDRB |= (1<<PORTB1) | (1<<PORTB2) | (1<<PORTB5);
  c2:	84 b1       	in	r24, 0x04	; 4
  c4:	86 62       	ori	r24, 0x26	; 38
  c6:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << PINB5);
  c8:	85 b1       	in	r24, 0x05	; 5
  ca:	80 62       	ori	r24, 0x20	; 32
  cc:	85 b9       	out	0x05, r24	; 5
	
	//Test
	DDRB |= (1<<PORTB4);
  ce:	84 b1       	in	r24, 0x04	; 4
  d0:	80 61       	ori	r24, 0x10	; 16
  d2:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<PORTB4);
  d4:	85 b1       	in	r24, 0x05	; 5
  d6:	80 61       	ori	r24, 0x10	; 16
  d8:	85 b9       	out	0x05, r24	; 5
	//PORTB &= ~(1<<PORTB4);
	LEDS_setBlue(0);
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	0e 94 51 00 	call	0xa2	; 0xa2 <LEDS_setBlue>
	LEDS_setGreen(0);
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	0e 94 48 00 	call	0x90	; 0x90 <LEDS_setGreen>
	
	sei();
  e6:	78 94       	sei
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <main+0x34>

000000ea <TIMERS_InitTimer0>:

volatile uint16_t counter = 0;

void TIMERS_InitTimer0(){
	// Interrupcion cada 1ms
	TCCR0A |= (1 << WGM01);
  ea:	84 b5       	in	r24, 0x24	; 36
  ec:	82 60       	ori	r24, 0x02	; 2
  ee:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS01) | (1 << CS00);  // prescaler 64
  f0:	85 b5       	in	r24, 0x25	; 37
  f2:	83 60       	ori	r24, 0x03	; 3
  f4:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << OCIE0A);
  f6:	ee e6       	ldi	r30, 0x6E	; 110
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	82 60       	ori	r24, 0x02	; 2
  fe:	80 83       	st	Z, r24
	
	OCR0A = 249;
 100:	89 ef       	ldi	r24, 0xF9	; 249
 102:	87 bd       	out	0x27, r24	; 39
 104:	08 95       	ret

00000106 <TIMERS_InitTimer1>:
// Init timer
void TIMERS_InitTimer1(){
	//Modo Fast PWM con top = 0x00FF (Modo 5)
	//Prescaler en 256
	//Modo NO invertido (set on count reset)
	TCCR1A |= (1 << WGM10) | (1<< COM1A1) | (1<< COM1B1);
 106:	e0 e8       	ldi	r30, 0x80	; 128
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	81 6a       	ori	r24, 0xA1	; 161
 10e:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << CS12);// | (1 << CS10) ;
 110:	e1 e8       	ldi	r30, 0x81	; 129
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	8c 60       	ori	r24, 0x0C	; 12
 118:	80 83       	st	Z, r24
 11a:	08 95       	ret

0000011c <_exit>:
 11c:	f8 94       	cli

0000011e <__stop_program>:
 11e:	ff cf       	rjmp	.-2      	; 0x11e <__stop_program>

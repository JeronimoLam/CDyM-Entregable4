
TP4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000016e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000016e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006da  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000631  00000000  00000000  000008f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000269  00000000  00000000  00000f23  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  0000118c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000374  00000000  00000000  000011f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000049  00000000  00000000  00001568  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000015b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__vector_11>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
  78:	0c 94 8b 00 	jmp	0x116	; 0x116 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <InitTimer1>:
// Init timer
void InitTimer1(){
	//Modo Fast PWM con top = 0x00FF (Modo 5)
	//Prescaler en 256
	//Modo NO invertido
	TCCR1A |= (1 << WGM10) | (1<< COM1A1) | (1<< COM1B1);
  80:	e0 e8       	ldi	r30, 0x80	; 128
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	81 6a       	ori	r24, 0xA1	; 161
  88:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << CS12);
  8a:	e1 e8       	ldi	r30, 0x81	; 129
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	8c 60       	ori	r24, 0x0C	; 12
  92:	80 83       	st	Z, r24
	
	OCR1A = 0;
  94:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  98:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = 0;
  9c:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
  a0:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
  a4:	08 95       	ret

000000a6 <InitTimer0>:
}

void InitTimer0(){
	// Interrupcion cada 1ms
	TCCR0A |= (1 << WGM01);
  a6:	84 b5       	in	r24, 0x24	; 36
  a8:	82 60       	ori	r24, 0x02	; 2
  aa:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS02);
  ac:	85 b5       	in	r24, 0x25	; 37
  ae:	84 60       	ori	r24, 0x04	; 4
  b0:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << OCIE0A);
  b2:	ee e6       	ldi	r30, 0x6E	; 110
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	82 60       	ori	r24, 0x02	; 2
  ba:	80 83       	st	Z, r24
	
	OCR0A = 62;
  bc:	8e e3       	ldi	r24, 0x3E	; 62
  be:	87 bd       	out	0x27, r24	; 39
  c0:	08 95       	ret

000000c2 <__vector_11>:
}

ISR(TIMER1_COMPA_vect){
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	8f 93       	push	r24
  ce:	9f 93       	push	r25
	PORTB ^= (1<<PORTB4);
  d0:	95 b1       	in	r25, 0x05	; 5
  d2:	80 e1       	ldi	r24, 0x10	; 16
  d4:	89 27       	eor	r24, r25
  d6:	85 b9       	out	0x05, r24	; 5
}
  d8:	9f 91       	pop	r25
  da:	8f 91       	pop	r24
  dc:	0f 90       	pop	r0
  de:	0f be       	out	0x3f, r0	; 63
  e0:	0f 90       	pop	r0
  e2:	1f 90       	pop	r1
  e4:	18 95       	reti

000000e6 <main>:
int main(void)
{
    /* Replace with your application code */
	//PIN 51 y 2 como salida
	
	InitTimer1();
  e6:	0e 94 40 00 	call	0x80	; 0x80 <InitTimer1>
	InitTimer0();
  ea:	0e 94 53 00 	call	0xa6	; 0xa6 <InitTimer0>
	DDRB |= (1<<PORTB1) | (1<<PORTB2) | (1<<PORTB5);
  ee:	84 b1       	in	r24, 0x04	; 4
  f0:	86 62       	ori	r24, 0x26	; 38
  f2:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << PINB5);
  f4:	85 b1       	in	r24, 0x05	; 5
  f6:	80 62       	ori	r24, 0x20	; 32
  f8:	85 b9       	out	0x05, r24	; 5
	
	//Test
	DDRB |= (1<<PORTB4);
  fa:	84 b1       	in	r24, 0x04	; 4
  fc:	80 61       	ori	r24, 0x10	; 16
  fe:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1<<PORTB4);
 100:	85 b1       	in	r24, 0x05	; 5
 102:	8f 7e       	andi	r24, 0xEF	; 239
 104:	85 b9       	out	0x05, r24	; 5
	//
	
    while (1)
    {
		OCR1A += 1;
 106:	e8 e8       	ldi	r30, 0x88	; 136
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	91 81       	ldd	r25, Z+1	; 0x01
 10e:	01 96       	adiw	r24, 0x01	; 1
 110:	91 83       	std	Z+1, r25	; 0x01
 112:	80 83       	st	Z, r24
 114:	f8 cf       	rjmp	.-16     	; 0x106 <main+0x20>

00000116 <_exit>:
 116:	f8 94       	cli

00000118 <__stop_program>:
 118:	ff cf       	rjmp	.-2      	; 0x118 <__stop_program>

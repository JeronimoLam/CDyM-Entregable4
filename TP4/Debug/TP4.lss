
TP4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000512  000005a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000512  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  00800102  00800102  000005a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00000618  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001171  00000000  00000000  00000798  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ce  00000000  00000000  00001909  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a73  00000000  00000000  000022d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f0  00000000  00000000  00002d4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ab  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004aa  00000000  00000000  000036e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00003b91  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e1       	ldi	r30, 0x12	; 18
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 32       	cpi	r26, 0x2A	; 42
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 5d 01 	call	0x2ba	; 0x2ba <main>
  9e:	0c 94 87 02 	jmp	0x50e	; 0x50e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <distributeValues>:
void LEDS_setFinalGreen(uint8_t value){
	final_green = value;
}

void LEDS_setFinalBlue(uint8_t value){
	final_blue = value;
  a6:	cf 93       	push	r28
  a8:	5d ec       	ldi	r21, 0xCD	; 205
  aa:	85 9f       	mul	r24, r21
  ac:	a1 2d       	mov	r26, r1
  ae:	11 24       	eor	r1, r1
  b0:	a6 95       	lsr	r26
  b2:	a6 95       	lsr	r26
  b4:	a6 95       	lsr	r26
  b6:	2a 2f       	mov	r18, r26
  b8:	22 0f       	add	r18, r18
  ba:	92 2f       	mov	r25, r18
  bc:	99 0f       	add	r25, r25
  be:	99 0f       	add	r25, r25
  c0:	92 0f       	add	r25, r18
  c2:	c8 2f       	mov	r28, r24
  c4:	c9 1b       	sub	r28, r25
  c6:	65 9f       	mul	r22, r21
  c8:	71 2d       	mov	r23, r1
  ca:	11 24       	eor	r1, r1
  cc:	76 95       	lsr	r23
  ce:	76 95       	lsr	r23
  d0:	76 95       	lsr	r23
  d2:	97 2f       	mov	r25, r23
  d4:	99 0f       	add	r25, r25
  d6:	89 2f       	mov	r24, r25
  d8:	88 0f       	add	r24, r24
  da:	88 0f       	add	r24, r24
  dc:	89 0f       	add	r24, r25
  de:	b6 2f       	mov	r27, r22
  e0:	b8 1b       	sub	r27, r24
  e2:	45 9f       	mul	r20, r21
  e4:	51 2d       	mov	r21, r1
  e6:	11 24       	eor	r1, r1
  e8:	56 95       	lsr	r21
  ea:	56 95       	lsr	r21
  ec:	56 95       	lsr	r21
  ee:	95 2f       	mov	r25, r21
  f0:	99 0f       	add	r25, r25
  f2:	89 2f       	mov	r24, r25
  f4:	88 0f       	add	r24, r24
  f6:	88 0f       	add	r24, r24
  f8:	89 0f       	add	r24, r25
  fa:	64 2f       	mov	r22, r20
  fc:	68 1b       	sub	r22, r24
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	21 c0       	rjmp	.+66     	; 0x144 <distributeValues+0x9e>
 102:	28 2f       	mov	r18, r24
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	8c 17       	cp	r24, r28
 108:	18 f4       	brcc	.+6      	; 0x110 <distributeValues+0x6a>
 10a:	91 e0       	ldi	r25, 0x01	; 1
 10c:	9a 0f       	add	r25, r26
 10e:	01 c0       	rjmp	.+2      	; 0x112 <distributeValues+0x6c>
 110:	9a 2f       	mov	r25, r26
 112:	f9 01       	movw	r30, r18
 114:	ea 5e       	subi	r30, 0xEA	; 234
 116:	fe 4f       	sbci	r31, 0xFE	; 254
 118:	90 83       	st	Z, r25
 11a:	8b 17       	cp	r24, r27
 11c:	18 f4       	brcc	.+6      	; 0x124 <distributeValues+0x7e>
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	97 0f       	add	r25, r23
 122:	01 c0       	rjmp	.+2      	; 0x126 <distributeValues+0x80>
 124:	97 2f       	mov	r25, r23
 126:	f9 01       	movw	r30, r18
 128:	e4 5f       	subi	r30, 0xF4	; 244
 12a:	fe 4f       	sbci	r31, 0xFE	; 254
 12c:	90 83       	st	Z, r25
 12e:	86 17       	cp	r24, r22
 130:	18 f4       	brcc	.+6      	; 0x138 <distributeValues+0x92>
 132:	91 e0       	ldi	r25, 0x01	; 1
 134:	95 0f       	add	r25, r21
 136:	01 c0       	rjmp	.+2      	; 0x13a <distributeValues+0x94>
 138:	95 2f       	mov	r25, r21
 13a:	f9 01       	movw	r30, r18
 13c:	ee 5f       	subi	r30, 0xFE	; 254
 13e:	fe 4f       	sbci	r31, 0xFE	; 254
 140:	90 83       	st	Z, r25
 142:	8f 5f       	subi	r24, 0xFF	; 255
 144:	8a 30       	cpi	r24, 0x0A	; 10
 146:	e8 f2       	brcs	.-70     	; 0x102 <distributeValues+0x5c>
 148:	cf 91       	pop	r28
 14a:	08 95       	ret

0000014c <LEDS_setRed>:
 14c:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <red>
 150:	08 95       	ret

00000152 <LEDS_setGreen>:
 152:	2f ef       	ldi	r18, 0xFF	; 255
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	28 1b       	sub	r18, r24
 158:	31 09       	sbc	r19, r1
 15a:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 15e:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 162:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <green>
 166:	08 95       	ret

00000168 <LEDS_setBlue>:
 168:	2f ef       	ldi	r18, 0xFF	; 255
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	28 1b       	sub	r18, r24
 16e:	31 09       	sbc	r19, r1
 170:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 174:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 178:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <blue>
 17c:	08 95       	ret

0000017e <LEDS_init>:
 17e:	84 b1       	in	r24, 0x04	; 4
 180:	86 62       	ori	r24, 0x26	; 38
 182:	84 b9       	out	0x04, r24	; 4
 184:	85 b1       	in	r24, 0x05	; 5
 186:	80 62       	ori	r24, 0x20	; 32
 188:	85 b9       	out	0x05, r24	; 5
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	0e 94 a6 00 	call	0x14c	; 0x14c <LEDS_setRed>
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	0e 94 a9 00 	call	0x152	; 0x152 <LEDS_setGreen>
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	0e 94 b4 00 	call	0x168	; 0x168 <LEDS_setBlue>
 19c:	20 e0       	ldi	r18, 0x00	; 0
 19e:	0f c0       	rjmp	.+30     	; 0x1be <LEDS_init+0x40>
 1a0:	82 2f       	mov	r24, r18
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	fc 01       	movw	r30, r24
 1a6:	ea 5e       	subi	r30, 0xEA	; 234
 1a8:	fe 4f       	sbci	r31, 0xFE	; 254
 1aa:	10 82       	st	Z, r1
 1ac:	fc 01       	movw	r30, r24
 1ae:	e4 5f       	subi	r30, 0xF4	; 244
 1b0:	fe 4f       	sbci	r31, 0xFE	; 254
 1b2:	10 82       	st	Z, r1
 1b4:	fc 01       	movw	r30, r24
 1b6:	ee 5f       	subi	r30, 0xFE	; 254
 1b8:	fe 4f       	sbci	r31, 0xFE	; 254
 1ba:	10 82       	st	Z, r1
 1bc:	2f 5f       	subi	r18, 0xFF	; 255
 1be:	2a 30       	cpi	r18, 0x0A	; 10
 1c0:	78 f3       	brcs	.-34     	; 0x1a0 <LEDS_init+0x22>
 1c2:	08 95       	ret

000001c4 <LEDS_getRed>:
 1c4:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <red>
 1c8:	08 95       	ret

000001ca <LEDS_getGreen>:
 1ca:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <green>
 1ce:	08 95       	ret

000001d0 <LEDS_getBlue>:
 1d0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <blue>
 1d4:	08 95       	ret

000001d6 <LEDS_getFinalRed>:
}

uint8_t LEDS_getFinalRed(){
	return final_red;
}
 1d6:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <final_red>
 1da:	08 95       	ret

000001dc <LEDS_getFinalGreen>:

uint8_t LEDS_getFinalGreen(){
	return final_green;
}
 1dc:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <final_green>
 1e0:	08 95       	ret

000001e2 <LEDS_getFinalBlue>:

uint8_t LEDS_getFinalBlue(){
	return final_blue;
}
 1e2:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <final_blue>
 1e6:	08 95       	ret

000001e8 <LEDS_setFinalRGB>:

void LEDS_setFinalRGB(uint8_t valueR, uint8_t valueG, uint8_t valueB){
	final_red = valueR;
 1e8:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <final_red>
	final_green = valueG;
 1ec:	60 93 24 01 	sts	0x0124, r22	; 0x800124 <final_green>
	final_blue = valueB;
 1f0:	40 93 23 01 	sts	0x0123, r20	; 0x800123 <final_blue>
	distributeValues(valueR, valueG, valueB);
 1f4:	0e 94 53 00 	call	0xa6	; 0xa6 <distributeValues>
 1f8:	08 95       	ret

000001fa <LEDS_incrementRed>:
}

void LEDS_incrementRed(uint16_t value){
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	ec 01       	movw	r28, r24
	LEDS_setRed(LEDS_getRed() + red_increments[value]);
 200:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <LEDS_getRed>
 204:	ca 5e       	subi	r28, 0xEA	; 234
 206:	de 4f       	sbci	r29, 0xFE	; 254
 208:	98 81       	ld	r25, Y
 20a:	89 0f       	add	r24, r25
 20c:	0e 94 a6 00 	call	0x14c	; 0x14c <LEDS_setRed>
}
 210:	df 91       	pop	r29
 212:	cf 91       	pop	r28
 214:	08 95       	ret

00000216 <LEDS_incrementGreen>:

void LEDS_incrementGreen(uint16_t value){
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
 21a:	ec 01       	movw	r28, r24
	LEDS_setGreen(LEDS_getGreen() + green_increments[value]);
 21c:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LEDS_getGreen>
 220:	c4 5f       	subi	r28, 0xF4	; 244
 222:	de 4f       	sbci	r29, 0xFE	; 254
 224:	98 81       	ld	r25, Y
 226:	89 0f       	add	r24, r25
 228:	0e 94 a9 00 	call	0x152	; 0x152 <LEDS_setGreen>
	
}
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	08 95       	ret

00000232 <LEDS_incrementBlue>:

void LEDS_incrementBlue(uint16_t value){
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	ec 01       	movw	r28, r24
	LEDS_setBlue(LEDS_getBlue() + blue_increments[value]);
 238:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LEDS_getBlue>
 23c:	ce 5f       	subi	r28, 0xFE	; 254
 23e:	de 4f       	sbci	r29, 0xFE	; 254
 240:	98 81       	ld	r25, Y
 242:	89 0f       	add	r24, r25
 244:	0e 94 b4 00 	call	0x168	; 0x168 <LEDS_setBlue>
}
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <LEDS_decrementRed>:

void LEDS_decrementRed(uint16_t value){
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	ec 01       	movw	r28, r24
	LEDS_setRed(LEDS_getRed() - red_increments[9 - value]);
 254:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <LEDS_getRed>
 258:	e9 e0       	ldi	r30, 0x09	; 9
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	ec 1b       	sub	r30, r28
 25e:	fd 0b       	sbc	r31, r29
 260:	ea 5e       	subi	r30, 0xEA	; 234
 262:	fe 4f       	sbci	r31, 0xFE	; 254
 264:	90 81       	ld	r25, Z
 266:	89 1b       	sub	r24, r25
 268:	0e 94 a6 00 	call	0x14c	; 0x14c <LEDS_setRed>
}
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	08 95       	ret

00000272 <LEDS_decrementGreen>:

void LEDS_decrementGreen(uint16_t value){
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	ec 01       	movw	r28, r24
	LEDS_setGreen(LEDS_getGreen() - green_increments[9 - value]);
 278:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LEDS_getGreen>
 27c:	e9 e0       	ldi	r30, 0x09	; 9
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	ec 1b       	sub	r30, r28
 282:	fd 0b       	sbc	r31, r29
 284:	e4 5f       	subi	r30, 0xF4	; 244
 286:	fe 4f       	sbci	r31, 0xFE	; 254
 288:	90 81       	ld	r25, Z
 28a:	89 1b       	sub	r24, r25
 28c:	0e 94 a9 00 	call	0x152	; 0x152 <LEDS_setGreen>
}
 290:	df 91       	pop	r29
 292:	cf 91       	pop	r28
 294:	08 95       	ret

00000296 <LEDS_decrementBlue>:

void LEDS_decrementBlue(uint16_t value){
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	ec 01       	movw	r28, r24
	LEDS_setBlue(LEDS_getBlue() - blue_increments[9 - value]);
 29c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LEDS_getBlue>
 2a0:	e9 e0       	ldi	r30, 0x09	; 9
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	ec 1b       	sub	r30, r28
 2a6:	fd 0b       	sbc	r31, r29
 2a8:	ee 5f       	subi	r30, 0xFE	; 254
 2aa:	fe 4f       	sbci	r31, 0xFE	; 254
 2ac:	90 81       	ld	r25, Z
 2ae:	89 1b       	sub	r24, r25
 2b0:	0e 94 b4 00 	call	0x168	; 0x168 <LEDS_setBlue>
}
 2b4:	df 91       	pop	r29
 2b6:	cf 91       	pop	r28
 2b8:	08 95       	ret

000002ba <main>:


int main(void)
{
	
	TIMERS_InitTimer0();
 2ba:	0e 94 4a 02 	call	0x494	; 0x494 <TIMERS_InitTimer0>
	TIMERS_InitTimer1();
 2be:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <TIMERS_InitTimer1>
	
	LEDS_init();
 2c2:	0e 94 bf 00 	call	0x17e	; 0x17e <LEDS_init>
	MEF_init();
 2c6:	0e 94 76 01 	call	0x2ec	; 0x2ec <MEF_init>
	LEDS_setFinalRGB(0, 10, 200);
 2ca:	48 ec       	ldi	r20, 0xC8	; 200
 2cc:	6a e0       	ldi	r22, 0x0A	; 10
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LEDS_setFinalRGB>
	
	//Test PB4 como salida y un 1 en la misma
	DDRB |= (1 << PORTB4);
 2d4:	84 b1       	in	r24, 0x04	; 4
 2d6:	80 61       	ori	r24, 0x10	; 16
 2d8:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1 << PORTB4);
 2da:	85 b1       	in	r24, 0x05	; 5
 2dc:	8f 7e       	andi	r24, 0xEF	; 239
 2de:	85 b9       	out	0x05, r24	; 5
	
	sei();
 2e0:	78 94       	sei
	
    while(1)
    {
		sEOS_Dispatch_Tasks();
 2e2:	0e 94 23 02 	call	0x446	; 0x446 <sEOS_Dispatch_Tasks>
		sEOS_Go_To_Sleep();
 2e6:	0e 94 3f 02 	call	0x47e	; 0x47e <sEOS_Go_To_Sleep>
 2ea:	fb cf       	rjmp	.-10     	; 0x2e2 <main+0x28>

000002ec <MEF_init>:
static states state;
static uint16_t stateCount;
static uint16_t timeOff = 20;

void MEF_init(){
	state = OFF;
 2ec:	83 e0       	ldi	r24, 0x03	; 3
 2ee:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <state>
	stateCount = 0;
 2f2:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <stateCount+0x1>
 2f6:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <stateCount>
 2fa:	08 95       	ret

000002fc <MEF_Update>:
}

void MEF_Update(){
	stateCount++;
 2fc:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <stateCount>
 300:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <stateCount+0x1>
 304:	01 96       	adiw	r24, 0x01	; 1
 306:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <stateCount+0x1>
 30a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <stateCount>
	
	switch (state){
 30e:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <state>
 312:	81 30       	cpi	r24, 0x01	; 1
 314:	09 f4       	brne	.+2      	; 0x318 <MEF_Update+0x1c>
 316:	48 c0       	rjmp	.+144    	; 0x3a8 <MEF_Update+0xac>
 318:	00 f1       	brcs	.+64     	; 0x35a <MEF_Update+0x5e>
 31a:	82 30       	cpi	r24, 0x02	; 2
 31c:	09 f4       	brne	.+2      	; 0x320 <MEF_Update+0x24>
 31e:	61 c0       	rjmp	.+194    	; 0x3e2 <MEF_Update+0xe6>
 320:	83 30       	cpi	r24, 0x03	; 3
 322:	09 f0       	breq	.+2      	; 0x326 <MEF_Update+0x2a>
 324:	8f c0       	rjmp	.+286    	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
		case OFF:
			PORTB |= (1<<PORTB4);
 326:	85 b1       	in	r24, 0x05	; 5
 328:	80 61       	ori	r24, 0x10	; 16
 32a:	85 b9       	out	0x05, r24	; 5
			
			LEDS_setRed(0);
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	0e 94 a6 00 	call	0x14c	; 0x14c <LEDS_setRed>
			LEDS_setGreen(0);
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	0e 94 a9 00 	call	0x152	; 0x152 <LEDS_setGreen>
			LEDS_setBlue(0);
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	0e 94 b4 00 	call	0x168	; 0x168 <LEDS_setBlue>
			
			if(stateCount == timeOff){
 33e:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <stateCount>
 342:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <stateCount+0x1>
 346:	44 97       	sbiw	r24, 0x14	; 20
 348:	09 f0       	breq	.+2      	; 0x34c <MEF_Update+0x50>
 34a:	7c c0       	rjmp	.+248    	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
				state = RAISING;
 34c:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <state>
				stateCount = 0;
 350:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <stateCount+0x1>
 354:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <stateCount>
 358:	08 95       	ret
			}
			break;
			
		case RAISING:
			PORTB |= (1<<PORTB4);
 35a:	85 b1       	in	r24, 0x05	; 5
 35c:	80 61       	ori	r24, 0x10	; 16
 35e:	85 b9       	out	0x05, r24	; 5
			
			LEDS_incrementRed(stateCount - 1);
 360:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <stateCount>
 364:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <stateCount+0x1>
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LEDS_incrementRed>
			LEDS_incrementGreen(stateCount - 1);
 36e:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <stateCount>
 372:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <stateCount+0x1>
 376:	01 97       	sbiw	r24, 0x01	; 1
 378:	0e 94 0b 01 	call	0x216	; 0x216 <LEDS_incrementGreen>
			LEDS_incrementBlue(stateCount - 1);
 37c:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <stateCount>
 380:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <stateCount+0x1>
 384:	01 97       	sbiw	r24, 0x01	; 1
 386:	0e 94 19 01 	call	0x232	; 0x232 <LEDS_incrementBlue>
			
			if(stateCount == 10){
 38a:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <stateCount>
 38e:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <stateCount+0x1>
 392:	0a 97       	sbiw	r24, 0x0a	; 10
 394:	09 f0       	breq	.+2      	; 0x398 <MEF_Update+0x9c>
 396:	56 c0       	rjmp	.+172    	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
				state = ON;
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <state>
				stateCount = 0;
 39e:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <stateCount+0x1>
 3a2:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <stateCount>
 3a6:	08 95       	ret
			}
			break;
			
		case ON:
			PORTB &= ~(1<<PORTB4);
 3a8:	85 b1       	in	r24, 0x05	; 5
 3aa:	8f 7e       	andi	r24, 0xEF	; 239
 3ac:	85 b9       	out	0x05, r24	; 5

			
			LEDS_setRed(LEDS_getFinalRed());
 3ae:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LEDS_getFinalRed>
 3b2:	0e 94 a6 00 	call	0x14c	; 0x14c <LEDS_setRed>
			LEDS_setGreen(LEDS_getFinalGreen());
 3b6:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LEDS_getFinalGreen>
 3ba:	0e 94 a9 00 	call	0x152	; 0x152 <LEDS_setGreen>
			LEDS_setBlue(LEDS_getFinalBlue());
 3be:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LEDS_getFinalBlue>
 3c2:	0e 94 b4 00 	call	0x168	; 0x168 <LEDS_setBlue>
			
			if(stateCount == 20){
 3c6:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <stateCount>
 3ca:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <stateCount+0x1>
 3ce:	44 97       	sbiw	r24, 0x14	; 20
 3d0:	c9 f5       	brne	.+114    	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
				state = FALLING;
 3d2:	82 e0       	ldi	r24, 0x02	; 2
 3d4:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <state>
				stateCount = 0;
 3d8:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <stateCount+0x1>
 3dc:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <stateCount>
 3e0:	08 95       	ret
			}
			break;
			
		case FALLING:
			PORTB |= (1<<PORTB4);
 3e2:	85 b1       	in	r24, 0x05	; 5
 3e4:	80 61       	ori	r24, 0x10	; 16
 3e6:	85 b9       	out	0x05, r24	; 5
			
			if (LEDS_getFinalRed() != 0) LEDS_decrementRed(stateCount - 1);
 3e8:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LEDS_getFinalRed>
 3ec:	88 23       	and	r24, r24
 3ee:	39 f0       	breq	.+14     	; 0x3fe <MEF_Update+0x102>
 3f0:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <stateCount>
 3f4:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <stateCount+0x1>
 3f8:	01 97       	sbiw	r24, 0x01	; 1
 3fa:	0e 94 27 01 	call	0x24e	; 0x24e <LEDS_decrementRed>
			if (LEDS_getFinalGreen() != 0) LEDS_decrementGreen(stateCount - 1);
 3fe:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LEDS_getFinalGreen>
 402:	88 23       	and	r24, r24
 404:	39 f0       	breq	.+14     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 406:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <stateCount>
 40a:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <stateCount+0x1>
 40e:	01 97       	sbiw	r24, 0x01	; 1
 410:	0e 94 39 01 	call	0x272	; 0x272 <LEDS_decrementGreen>
			if (LEDS_getFinalBlue() != 0) LEDS_decrementBlue(stateCount - 1);
 414:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LEDS_getFinalBlue>
 418:	88 23       	and	r24, r24
 41a:	39 f0       	breq	.+14     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 41c:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <stateCount>
 420:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <stateCount+0x1>
 424:	01 97       	sbiw	r24, 0x01	; 1
 426:	0e 94 4b 01 	call	0x296	; 0x296 <LEDS_decrementBlue>
			
			if(stateCount == 10){
 42a:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <stateCount>
 42e:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <stateCount+0x1>
 432:	0a 97       	sbiw	r24, 0x0a	; 10
 434:	39 f4       	brne	.+14     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
				state = OFF;
 436:	83 e0       	ldi	r24, 0x03	; 3
 438:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <state>
				stateCount = 0;
 43c:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <stateCount+0x1>
 440:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <stateCount>
 444:	08 95       	ret

00000446 <sEOS_Dispatch_Tasks>:
static volatile uint16_t counter = 49;
static volatile uint8_t FLAG_MEF = 0;


void sEOS_Dispatch_Tasks(){
	if(FLAG_MEF){
 446:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <FLAG_MEF>
 44a:	88 23       	and	r24, r24
 44c:	21 f0       	breq	.+8      	; 0x456 <sEOS_Dispatch_Tasks+0x10>
		MEF_Update();
 44e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <MEF_Update>
		FLAG_MEF = 0;	
 452:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <FLAG_MEF>
 456:	08 95       	ret

00000458 <sEOS_SCH_Tasks>:
		*/
}

void sEOS_SCH_Tasks(){
	//Cada 50 ms pone el flag en 1
	if (++counter == 50) {
 458:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 45c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 460:	01 96       	adiw	r24, 0x01	; 1
 462:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 466:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 46a:	c2 97       	sbiw	r24, 0x32	; 50
 46c:	39 f4       	brne	.+14     	; 0x47c <sEOS_SCH_Tasks+0x24>
		FLAG_MEF = 1;
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <FLAG_MEF>
		counter = 0;
 474:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 478:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 47c:	08 95       	ret

0000047e <sEOS_Go_To_Sleep>:
//Pone en modo ahorro el micro
void sEOS_Go_To_Sleep(){
	
	// Setea el sleep mode a "idle". Este modo permite a la CPU dormir
	// dejando los perifericos (Como Timers y UART) corriendo
	set_sleep_mode(SLEEP_MODE_IDLE);
 47e:	83 b7       	in	r24, 0x33	; 51
 480:	81 7f       	andi	r24, 0xF1	; 241
 482:	83 bf       	out	0x33, r24	; 51

	// Habilita sleep mode
	sleep_enable();
 484:	83 b7       	in	r24, 0x33	; 51
 486:	81 60       	ori	r24, 0x01	; 1
 488:	83 bf       	out	0x33, r24	; 51

	// Duerme al cpu
	sleep_cpu();
 48a:	88 95       	sleep

	// Deshabilita sleep mode
	sleep_disable();
 48c:	83 b7       	in	r24, 0x33	; 51
 48e:	8e 7f       	andi	r24, 0xFE	; 254
 490:	83 bf       	out	0x33, r24	; 51
 492:	08 95       	ret

00000494 <TIMERS_InitTimer0>:
#include "timers.h"
#include "../sEOS/sEOS.h"

void TIMERS_InitTimer0(){
	// Interrupcion cada 1ms
	TCCR0A |= (1 << WGM01);
 494:	84 b5       	in	r24, 0x24	; 36
 496:	82 60       	ori	r24, 0x02	; 2
 498:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS01) | (1 << CS00);  // prescaler 64
 49a:	85 b5       	in	r24, 0x25	; 37
 49c:	83 60       	ori	r24, 0x03	; 3
 49e:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << OCIE0A);
 4a0:	ee e6       	ldi	r30, 0x6E	; 110
 4a2:	f0 e0       	ldi	r31, 0x00	; 0
 4a4:	80 81       	ld	r24, Z
 4a6:	82 60       	ori	r24, 0x02	; 2
 4a8:	80 83       	st	Z, r24
	
	OCR0A = 249;
 4aa:	89 ef       	ldi	r24, 0xF9	; 249
 4ac:	87 bd       	out	0x27, r24	; 39
 4ae:	08 95       	ret

000004b0 <__vector_14>:
}

ISR(TIMER0_COMPA_vect){
 4b0:	1f 92       	push	r1
 4b2:	0f 92       	push	r0
 4b4:	0f b6       	in	r0, 0x3f	; 63
 4b6:	0f 92       	push	r0
 4b8:	11 24       	eor	r1, r1
 4ba:	2f 93       	push	r18
 4bc:	3f 93       	push	r19
 4be:	4f 93       	push	r20
 4c0:	5f 93       	push	r21
 4c2:	6f 93       	push	r22
 4c4:	7f 93       	push	r23
 4c6:	8f 93       	push	r24
 4c8:	9f 93       	push	r25
 4ca:	af 93       	push	r26
 4cc:	bf 93       	push	r27
 4ce:	ef 93       	push	r30
 4d0:	ff 93       	push	r31
	sEOS_SCH_Tasks();
 4d2:	0e 94 2c 02 	call	0x458	; 0x458 <sEOS_SCH_Tasks>
 4d6:	ff 91       	pop	r31
 4d8:	ef 91       	pop	r30
 4da:	bf 91       	pop	r27
 4dc:	af 91       	pop	r26
 4de:	9f 91       	pop	r25
 4e0:	8f 91       	pop	r24
 4e2:	7f 91       	pop	r23
 4e4:	6f 91       	pop	r22
 4e6:	5f 91       	pop	r21
 4e8:	4f 91       	pop	r20
 4ea:	3f 91       	pop	r19
 4ec:	2f 91       	pop	r18
 4ee:	0f 90       	pop	r0
 4f0:	0f be       	out	0x3f, r0	; 63
 4f2:	0f 90       	pop	r0
 4f4:	1f 90       	pop	r1
 4f6:	18 95       	reti

000004f8 <TIMERS_InitTimer1>:
// Init timer
void TIMERS_InitTimer1(){
	//Modo Fast PWM con top = 0x00FF (Modo 5)
	//Prescaler en 256
	//Modo NO invertido (set on count reset)
	TCCR1A |= (1 << WGM10) | (1<< COM1A1) | (1<< COM1B1);
 4f8:	e0 e8       	ldi	r30, 0x80	; 128
 4fa:	f0 e0       	ldi	r31, 0x00	; 0
 4fc:	80 81       	ld	r24, Z
 4fe:	81 6a       	ori	r24, 0xA1	; 161
 500:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << CS12);// | (1 << CS10) ;
 502:	e1 e8       	ldi	r30, 0x81	; 129
 504:	f0 e0       	ldi	r31, 0x00	; 0
 506:	80 81       	ld	r24, Z
 508:	8c 60       	ori	r24, 0x0C	; 12
 50a:	80 83       	st	Z, r24
 50c:	08 95       	ret

0000050e <_exit>:
 50e:	f8 94       	cli

00000510 <__stop_program>:
 510:	ff cf       	rjmp	.-2      	; 0x510 <__stop_program>

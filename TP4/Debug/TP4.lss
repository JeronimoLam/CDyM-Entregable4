
TP4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000005e6  0000067a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000033  00800106  00800106  00000680  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  000006f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001419  00000000  00000000  000008e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b06  00000000  00000000  00001cf9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d4b  00000000  00000000  000027ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a0  00000000  00000000  0000354c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000792  00000000  00000000  000038ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004f9  00000000  00000000  0000407e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00004577  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 c2 02 	jmp	0x584	; 0x584 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ee       	ldi	r30, 0xE6	; 230
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 33       	cpi	r26, 0x39	; 57
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 86 01 	call	0x30c	; 0x30c <main>
  9e:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LDR_config>:

void LDR_Update(){
	ADCSRA |= (1<<ADSC);//start conversion
	if((ADCSRA&(1<<ADIF))==0) {//wait for conversion to finish
		ADCSRA |= (1<<ADIF); //borrar flag
		result = ADC;
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
  ac:	87 e8       	ldi	r24, 0x87	; 135
  ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  b2:	ec e7       	ldi	r30, 0x7C	; 124
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	10 82       	st	Z, r1
  b8:	80 81       	ld	r24, Z
  ba:	80 64       	ori	r24, 0x40	; 64
  bc:	80 83       	st	Z, r24
  be:	08 95       	ret

000000c0 <LDR_get_value>:
	}
}

uint16_t LDR_get_value(){
	ADCSRA |= (1<<ADSC);//start conversion
  c0:	ea e7       	ldi	r30, 0x7A	; 122
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	80 64       	ori	r24, 0x40	; 64
  c8:	80 83       	st	Z, r24
	while((ADCSRA&(1<<ADIF))==0);//wait for conversion to finish
  ca:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  ce:	84 ff       	sbrs	r24, 4
  d0:	fc cf       	rjmp	.-8      	; 0xca <LDR_get_value+0xa>
	ADCSRA |= (1<<ADIF); //borrar flag
  d2:	ea e7       	ldi	r30, 0x7A	; 122
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	80 61       	ori	r24, 0x10	; 16
  da:	80 83       	st	Z, r24
	result = (uint16_t) ADC;
  dc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  e0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  e4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
  e8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
	return result;
  ec:	08 95       	ret

000000ee <distributeValues>:
void LEDS_setFinalGreen(uint8_t value){
	final_green = value;
}

void LEDS_setFinalBlue(uint8_t value){
	final_blue = value;
  ee:	cf 93       	push	r28
  f0:	5d ec       	ldi	r21, 0xCD	; 205
  f2:	85 9f       	mul	r24, r21
  f4:	a1 2d       	mov	r26, r1
  f6:	11 24       	eor	r1, r1
  f8:	a6 95       	lsr	r26
  fa:	a6 95       	lsr	r26
  fc:	a6 95       	lsr	r26
  fe:	2a 2f       	mov	r18, r26
 100:	22 0f       	add	r18, r18
 102:	92 2f       	mov	r25, r18
 104:	99 0f       	add	r25, r25
 106:	99 0f       	add	r25, r25
 108:	92 0f       	add	r25, r18
 10a:	c8 2f       	mov	r28, r24
 10c:	c9 1b       	sub	r28, r25
 10e:	65 9f       	mul	r22, r21
 110:	71 2d       	mov	r23, r1
 112:	11 24       	eor	r1, r1
 114:	76 95       	lsr	r23
 116:	76 95       	lsr	r23
 118:	76 95       	lsr	r23
 11a:	97 2f       	mov	r25, r23
 11c:	99 0f       	add	r25, r25
 11e:	89 2f       	mov	r24, r25
 120:	88 0f       	add	r24, r24
 122:	88 0f       	add	r24, r24
 124:	89 0f       	add	r24, r25
 126:	b6 2f       	mov	r27, r22
 128:	b8 1b       	sub	r27, r24
 12a:	45 9f       	mul	r20, r21
 12c:	51 2d       	mov	r21, r1
 12e:	11 24       	eor	r1, r1
 130:	56 95       	lsr	r21
 132:	56 95       	lsr	r21
 134:	56 95       	lsr	r21
 136:	95 2f       	mov	r25, r21
 138:	99 0f       	add	r25, r25
 13a:	89 2f       	mov	r24, r25
 13c:	88 0f       	add	r24, r24
 13e:	88 0f       	add	r24, r24
 140:	89 0f       	add	r24, r25
 142:	64 2f       	mov	r22, r20
 144:	68 1b       	sub	r22, r24
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	21 c0       	rjmp	.+66     	; 0x18c <distributeValues+0x9e>
 14a:	28 2f       	mov	r18, r24
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	8c 17       	cp	r24, r28
 150:	18 f4       	brcc	.+6      	; 0x158 <distributeValues+0x6a>
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	9a 0f       	add	r25, r26
 156:	01 c0       	rjmp	.+2      	; 0x15a <distributeValues+0x6c>
 158:	9a 2f       	mov	r25, r26
 15a:	f9 01       	movw	r30, r18
 15c:	e4 5e       	subi	r30, 0xE4	; 228
 15e:	fe 4f       	sbci	r31, 0xFE	; 254
 160:	90 83       	st	Z, r25
 162:	8b 17       	cp	r24, r27
 164:	18 f4       	brcc	.+6      	; 0x16c <distributeValues+0x7e>
 166:	91 e0       	ldi	r25, 0x01	; 1
 168:	97 0f       	add	r25, r23
 16a:	01 c0       	rjmp	.+2      	; 0x16e <distributeValues+0x80>
 16c:	97 2f       	mov	r25, r23
 16e:	f9 01       	movw	r30, r18
 170:	ee 5e       	subi	r30, 0xEE	; 238
 172:	fe 4f       	sbci	r31, 0xFE	; 254
 174:	90 83       	st	Z, r25
 176:	86 17       	cp	r24, r22
 178:	18 f4       	brcc	.+6      	; 0x180 <distributeValues+0x92>
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	95 0f       	add	r25, r21
 17e:	01 c0       	rjmp	.+2      	; 0x182 <distributeValues+0x94>
 180:	95 2f       	mov	r25, r21
 182:	f9 01       	movw	r30, r18
 184:	e8 5f       	subi	r30, 0xF8	; 248
 186:	fe 4f       	sbci	r31, 0xFE	; 254
 188:	90 83       	st	Z, r25
 18a:	8f 5f       	subi	r24, 0xFF	; 255
 18c:	8a 30       	cpi	r24, 0x0A	; 10
 18e:	e8 f2       	brcs	.-70     	; 0x14a <distributeValues+0x5c>
 190:	cf 91       	pop	r28
 192:	08 95       	ret

00000194 <LEDS_setRed>:
 194:	cf 93       	push	r28
 196:	c8 2f       	mov	r28, r24
 198:	0e 94 b1 02 	call	0x562	; 0x562 <PWM_set_comp_value>
 19c:	c0 93 28 01 	sts	0x0128, r28	; 0x800128 <red>
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <LEDS_setGreen>:
 1a4:	2f ef       	ldi	r18, 0xFF	; 255
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	28 1b       	sub	r18, r24
 1aa:	31 09       	sbc	r19, r1
 1ac:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 1b0:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 1b4:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <green>
 1b8:	08 95       	ret

000001ba <LEDS_setBlue>:
 1ba:	2f ef       	ldi	r18, 0xFF	; 255
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	28 1b       	sub	r18, r24
 1c0:	31 09       	sbc	r19, r1
 1c2:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1c6:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 1ca:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <blue>
 1ce:	08 95       	ret

000001d0 <LEDS_init>:
 1d0:	84 b1       	in	r24, 0x04	; 4
 1d2:	86 62       	ori	r24, 0x26	; 38
 1d4:	84 b9       	out	0x04, r24	; 4
 1d6:	85 b1       	in	r24, 0x05	; 5
 1d8:	80 62       	ori	r24, 0x20	; 32
 1da:	85 b9       	out	0x05, r24	; 5
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	0e 94 ca 00 	call	0x194	; 0x194 <LEDS_setRed>
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LEDS_setGreen>
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LEDS_setBlue>
 1ee:	20 e0       	ldi	r18, 0x00	; 0
 1f0:	0f c0       	rjmp	.+30     	; 0x210 <LEDS_init+0x40>
 1f2:	82 2f       	mov	r24, r18
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	fc 01       	movw	r30, r24
 1f8:	e4 5e       	subi	r30, 0xE4	; 228
 1fa:	fe 4f       	sbci	r31, 0xFE	; 254
 1fc:	10 82       	st	Z, r1
 1fe:	fc 01       	movw	r30, r24
 200:	ee 5e       	subi	r30, 0xEE	; 238
 202:	fe 4f       	sbci	r31, 0xFE	; 254
 204:	10 82       	st	Z, r1
 206:	fc 01       	movw	r30, r24
 208:	e8 5f       	subi	r30, 0xF8	; 248
 20a:	fe 4f       	sbci	r31, 0xFE	; 254
 20c:	10 82       	st	Z, r1
 20e:	2f 5f       	subi	r18, 0xFF	; 255
 210:	2a 30       	cpi	r18, 0x0A	; 10
 212:	78 f3       	brcs	.-34     	; 0x1f2 <LEDS_init+0x22>
 214:	08 95       	ret

00000216 <LEDS_getRed>:
 216:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <red>
 21a:	08 95       	ret

0000021c <LEDS_getGreen>:
 21c:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <green>
 220:	08 95       	ret

00000222 <LEDS_getBlue>:
 222:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <blue>
 226:	08 95       	ret

00000228 <LEDS_getFinalRed>:
}

uint8_t LEDS_getFinalRed(){
	return final_red;
}
 228:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <final_red>
 22c:	08 95       	ret

0000022e <LEDS_getFinalGreen>:

uint8_t LEDS_getFinalGreen(){
	return final_green;
}
 22e:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <final_green>
 232:	08 95       	ret

00000234 <LEDS_getFinalBlue>:

uint8_t LEDS_getFinalBlue(){
	return final_blue;
}
 234:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <final_blue>
 238:	08 95       	ret

0000023a <LEDS_setFinalRGB>:

void LEDS_setFinalRGB(uint8_t valueR, uint8_t valueG, uint8_t valueB){
	final_red = valueR;
 23a:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <final_red>
	final_green = valueG;
 23e:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <final_green>
	final_blue = valueB;
 242:	40 93 29 01 	sts	0x0129, r20	; 0x800129 <final_blue>
	distributeValues(valueR, valueG, valueB);
 246:	0e 94 77 00 	call	0xee	; 0xee <distributeValues>
 24a:	08 95       	ret

0000024c <LEDS_incrementRed>:
}

void LEDS_incrementRed(uint16_t value){
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	ec 01       	movw	r28, r24
	LEDS_setRed(LEDS_getRed() + red_increments[value]);
 252:	0e 94 0b 01 	call	0x216	; 0x216 <LEDS_getRed>
 256:	c4 5e       	subi	r28, 0xE4	; 228
 258:	de 4f       	sbci	r29, 0xFE	; 254
 25a:	98 81       	ld	r25, Y
 25c:	89 0f       	add	r24, r25
 25e:	0e 94 ca 00 	call	0x194	; 0x194 <LEDS_setRed>
}
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	08 95       	ret

00000268 <LEDS_incrementGreen>:

void LEDS_incrementGreen(uint16_t value){
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	ec 01       	movw	r28, r24
	LEDS_setGreen(LEDS_getGreen() + green_increments[value]);
 26e:	0e 94 0e 01 	call	0x21c	; 0x21c <LEDS_getGreen>
 272:	ce 5e       	subi	r28, 0xEE	; 238
 274:	de 4f       	sbci	r29, 0xFE	; 254
 276:	98 81       	ld	r25, Y
 278:	89 0f       	add	r24, r25
 27a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LEDS_setGreen>
	
}
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	08 95       	ret

00000284 <LEDS_incrementBlue>:

void LEDS_incrementBlue(uint16_t value){
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
 288:	ec 01       	movw	r28, r24
	LEDS_setBlue(LEDS_getBlue() + blue_increments[value]);
 28a:	0e 94 11 01 	call	0x222	; 0x222 <LEDS_getBlue>
 28e:	c8 5f       	subi	r28, 0xF8	; 248
 290:	de 4f       	sbci	r29, 0xFE	; 254
 292:	98 81       	ld	r25, Y
 294:	89 0f       	add	r24, r25
 296:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LEDS_setBlue>
}
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	08 95       	ret

000002a0 <LEDS_decrementRed>:

void LEDS_decrementRed(uint16_t value){
 2a0:	cf 93       	push	r28
 2a2:	df 93       	push	r29
 2a4:	ec 01       	movw	r28, r24
	LEDS_setRed(LEDS_getRed() - red_increments[9 - value]);
 2a6:	0e 94 0b 01 	call	0x216	; 0x216 <LEDS_getRed>
 2aa:	e9 e0       	ldi	r30, 0x09	; 9
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	ec 1b       	sub	r30, r28
 2b0:	fd 0b       	sbc	r31, r29
 2b2:	e4 5e       	subi	r30, 0xE4	; 228
 2b4:	fe 4f       	sbci	r31, 0xFE	; 254
 2b6:	90 81       	ld	r25, Z
 2b8:	89 1b       	sub	r24, r25
 2ba:	0e 94 ca 00 	call	0x194	; 0x194 <LEDS_setRed>
}
 2be:	df 91       	pop	r29
 2c0:	cf 91       	pop	r28
 2c2:	08 95       	ret

000002c4 <LEDS_decrementGreen>:

void LEDS_decrementGreen(uint16_t value){
 2c4:	cf 93       	push	r28
 2c6:	df 93       	push	r29
 2c8:	ec 01       	movw	r28, r24
	LEDS_setGreen(LEDS_getGreen() - green_increments[9 - value]);
 2ca:	0e 94 0e 01 	call	0x21c	; 0x21c <LEDS_getGreen>
 2ce:	e9 e0       	ldi	r30, 0x09	; 9
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	ec 1b       	sub	r30, r28
 2d4:	fd 0b       	sbc	r31, r29
 2d6:	ee 5e       	subi	r30, 0xEE	; 238
 2d8:	fe 4f       	sbci	r31, 0xFE	; 254
 2da:	90 81       	ld	r25, Z
 2dc:	89 1b       	sub	r24, r25
 2de:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LEDS_setGreen>
}
 2e2:	df 91       	pop	r29
 2e4:	cf 91       	pop	r28
 2e6:	08 95       	ret

000002e8 <LEDS_decrementBlue>:

void LEDS_decrementBlue(uint16_t value){
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
 2ec:	ec 01       	movw	r28, r24
	LEDS_setBlue(LEDS_getBlue() - blue_increments[9 - value]);
 2ee:	0e 94 11 01 	call	0x222	; 0x222 <LEDS_getBlue>
 2f2:	e9 e0       	ldi	r30, 0x09	; 9
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	ec 1b       	sub	r30, r28
 2f8:	fd 0b       	sbc	r31, r29
 2fa:	e8 5f       	subi	r30, 0xF8	; 248
 2fc:	fe 4f       	sbci	r31, 0xFE	; 254
 2fe:	90 81       	ld	r25, Z
 300:	89 1b       	sub	r24, r25
 302:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LEDS_setBlue>
}
 306:	df 91       	pop	r29
 308:	cf 91       	pop	r28
 30a:	08 95       	ret

0000030c <main>:


int main(void)
{
	
	TIMERS_InitTimer0();
 30c:	0e 94 b4 02 	call	0x568	; 0x568 <TIMERS_InitTimer0>
	TIMERS_InitTimer1();
 310:	0e 94 e6 02 	call	0x5cc	; 0x5cc <TIMERS_InitTimer1>
	
	LEDS_init();
 314:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LEDS_init>
	MEF_init();
 318:	0e 94 a1 01 	call	0x342	; 0x342 <MEF_init>
	LEDS_setFinalRGB(204, 255, 229);
 31c:	45 ee       	ldi	r20, 0xE5	; 229
 31e:	6f ef       	ldi	r22, 0xFF	; 255
 320:	8c ec       	ldi	r24, 0xCC	; 204
 322:	0e 94 1d 01 	call	0x23a	; 0x23a <LEDS_setFinalRGB>
	
	LDR_config();
 326:	0e 94 53 00 	call	0xa6	; 0xa6 <LDR_config>
	
	PWM_soft_init();
 32a:	0e 94 aa 02 	call	0x554	; 0x554 <PWM_soft_init>
	
	//Test PB4 como salida y un 1 en la misma
	DDRB |= (1 << PORTB4);
 32e:	84 b1       	in	r24, 0x04	; 4
 330:	80 61       	ori	r24, 0x10	; 16
 332:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1 << PORTB4);
 334:	85 b1       	in	r24, 0x05	; 5
 336:	8f 7e       	andi	r24, 0xEF	; 239
 338:	85 b9       	out	0x05, r24	; 5
	
	sei();
 33a:	78 94       	sei
	
    while(1)
    {
		sEOS_Dispatch_Tasks();
 33c:	0e 94 56 02 	call	0x4ac	; 0x4ac <sEOS_Dispatch_Tasks>
 340:	fd cf       	rjmp	.-6      	; 0x33c <main+0x30>

00000342 <MEF_init>:
static uint16_t timeOff = 20;
static double pendiente;
static uint16_t desplazamiento;

void MEF_init(){
	state = OFF;
 342:	83 e0       	ldi	r24, 0x03	; 3
 344:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <state>
	stateCount = 0;
 348:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <stateCount+0x1>
 34c:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <stateCount>

	pendiente = (40-100) / (MIN_SUP_LDR - MAX_INF_LDR);
 350:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <pendiente>
 354:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <pendiente+0x1>
 358:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <pendiente+0x2>
 35c:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <pendiente+0x3>
	desplazamiento = 100 + round(pendiente * MAX_INF_LDR);
 360:	84 e6       	ldi	r24, 0x64	; 100
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <desplazamiento+0x1>
 368:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <desplazamiento>
 36c:	08 95       	ret

0000036e <update_timeOff>:
}

void  update_timeOff(){
	uint16_t LDR_value = LDR_get_value();
 36e:	0e 94 60 00 	call	0xc0	; 0xc0 <LDR_get_value>
 372:	08 95       	ret

00000374 <MEF_Update>:
		timeOff = desplazamiento - round(pendiente*LDR_value); // Parte de la recta con pendiente m negativa
	}
}

void MEF_Update(){
	stateCount++;
 374:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <stateCount>
 378:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <stateCount+0x1>
 37c:	01 96       	adiw	r24, 0x01	; 1
 37e:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <stateCount+0x1>
 382:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <stateCount>
	
	switch (state){
 386:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <state>
 38a:	81 30       	cpi	r24, 0x01	; 1
 38c:	09 f4       	brne	.+2      	; 0x390 <MEF_Update+0x1c>
 38e:	4b c0       	rjmp	.+150    	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 390:	18 f1       	brcs	.+70     	; 0x3d8 <MEF_Update+0x64>
 392:	82 30       	cpi	r24, 0x02	; 2
 394:	09 f4       	brne	.+2      	; 0x398 <MEF_Update+0x24>
 396:	64 c0       	rjmp	.+200    	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 398:	83 30       	cpi	r24, 0x03	; 3
 39a:	09 f0       	breq	.+2      	; 0x39e <MEF_Update+0x2a>
 39c:	86 c0       	rjmp	.+268    	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
		case OFF:
			PORTB |= (1<<PORTB4);
 39e:	85 b1       	in	r24, 0x05	; 5
 3a0:	80 61       	ori	r24, 0x10	; 16
 3a2:	85 b9       	out	0x05, r24	; 5
			
			LEDS_setRed(0);
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	0e 94 ca 00 	call	0x194	; 0x194 <LEDS_setRed>
			LEDS_setGreen(0);
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LEDS_setGreen>
			LEDS_setBlue(0);
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LEDS_setBlue>
			
			update_timeOff();
 3b6:	0e 94 b7 01 	call	0x36e	; 0x36e <update_timeOff>
			if(stateCount >= 100){
 3ba:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <stateCount>
 3be:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <stateCount+0x1>
 3c2:	84 36       	cpi	r24, 0x64	; 100
 3c4:	91 05       	cpc	r25, r1
 3c6:	08 f4       	brcc	.+2      	; 0x3ca <MEF_Update+0x56>
 3c8:	70 c0       	rjmp	.+224    	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
				state = RAISING;
 3ca:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <state>
				stateCount = 0;
 3ce:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <stateCount+0x1>
 3d2:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <stateCount>
 3d6:	08 95       	ret
			}
			break;
			
		case RAISING:
			PORTB |= (1<<PORTB4);
 3d8:	85 b1       	in	r24, 0x05	; 5
 3da:	80 61       	ori	r24, 0x10	; 16
 3dc:	85 b9       	out	0x05, r24	; 5
			
			LEDS_incrementRed(stateCount - 1);
 3de:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <stateCount>
 3e2:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <stateCount+0x1>
 3e6:	01 97       	sbiw	r24, 0x01	; 1
 3e8:	0e 94 26 01 	call	0x24c	; 0x24c <LEDS_incrementRed>
			LEDS_incrementGreen(stateCount - 1);
 3ec:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <stateCount>
 3f0:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <stateCount+0x1>
 3f4:	01 97       	sbiw	r24, 0x01	; 1
 3f6:	0e 94 34 01 	call	0x268	; 0x268 <LEDS_incrementGreen>
			LEDS_incrementBlue(stateCount - 1);
 3fa:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <stateCount>
 3fe:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <stateCount+0x1>
 402:	01 97       	sbiw	r24, 0x01	; 1
 404:	0e 94 42 01 	call	0x284	; 0x284 <LEDS_incrementBlue>
			
			if(stateCount == 10){
 408:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <stateCount>
 40c:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <stateCount+0x1>
 410:	0a 97       	sbiw	r24, 0x0a	; 10
 412:	09 f0       	breq	.+2      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 414:	4a c0       	rjmp	.+148    	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
				state = ON;
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <state>
				stateCount = 0;
 41c:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <stateCount+0x1>
 420:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <stateCount>
 424:	08 95       	ret
			}
			break;
			
		case ON:
			PORTB &= ~(1<<PORTB4);
 426:	85 b1       	in	r24, 0x05	; 5
 428:	8f 7e       	andi	r24, 0xEF	; 239
 42a:	85 b9       	out	0x05, r24	; 5

			
			LEDS_setRed(LEDS_getFinalRed());
 42c:	0e 94 14 01 	call	0x228	; 0x228 <LEDS_getFinalRed>
 430:	0e 94 ca 00 	call	0x194	; 0x194 <LEDS_setRed>
			LEDS_setGreen(LEDS_getFinalGreen());
 434:	0e 94 17 01 	call	0x22e	; 0x22e <LEDS_getFinalGreen>
 438:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LEDS_setGreen>
			LEDS_setBlue(LEDS_getFinalBlue());
 43c:	0e 94 1a 01 	call	0x234	; 0x234 <LEDS_getFinalBlue>
 440:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LEDS_setBlue>
			
			if(stateCount == 20){
 444:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <stateCount>
 448:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <stateCount+0x1>
 44c:	44 97       	sbiw	r24, 0x14	; 20
 44e:	69 f5       	brne	.+90     	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
				state = FALLING;
 450:	82 e0       	ldi	r24, 0x02	; 2
 452:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <state>
				stateCount = 0;
 456:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <stateCount+0x1>
 45a:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <stateCount>
 45e:	08 95       	ret
			}
			break;
			
		case FALLING:
			PORTB |= (1<<PORTB4);
 460:	85 b1       	in	r24, 0x05	; 5
 462:	80 61       	ori	r24, 0x10	; 16
 464:	85 b9       	out	0x05, r24	; 5
			
			LEDS_decrementRed(stateCount - 1);
 466:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <stateCount>
 46a:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <stateCount+0x1>
 46e:	01 97       	sbiw	r24, 0x01	; 1
 470:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LEDS_decrementRed>
			LEDS_decrementGreen(stateCount - 1);
 474:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <stateCount>
 478:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <stateCount+0x1>
 47c:	01 97       	sbiw	r24, 0x01	; 1
 47e:	0e 94 62 01 	call	0x2c4	; 0x2c4 <LEDS_decrementGreen>
			LEDS_decrementBlue(stateCount - 1);
 482:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <stateCount>
 486:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <stateCount+0x1>
 48a:	01 97       	sbiw	r24, 0x01	; 1
 48c:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LEDS_decrementBlue>
			
			if(stateCount == 10){
 490:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <stateCount>
 494:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <stateCount+0x1>
 498:	0a 97       	sbiw	r24, 0x0a	; 10
 49a:	39 f4       	brne	.+14     	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
				state = OFF;
 49c:	83 e0       	ldi	r24, 0x03	; 3
 49e:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <state>
				stateCount = 0;
 4a2:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <stateCount+0x1>
 4a6:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <stateCount>
 4aa:	08 95       	ret

000004ac <sEOS_Dispatch_Tasks>:
static volatile uint16_t counter_LDR = 8;
static volatile uint8_t FLAG_LDR = 0;


void sEOS_Dispatch_Tasks(){
	if(FLAG_MEF){
 4ac:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <FLAG_MEF>
 4b0:	88 23       	and	r24, r24
 4b2:	21 f0       	breq	.+8      	; 0x4bc <sEOS_Dispatch_Tasks+0x10>
		MEF_Update();
 4b4:	0e 94 ba 01 	call	0x374	; 0x374 <MEF_Update>
		FLAG_MEF = 0;	
 4b8:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <FLAG_MEF>
 4bc:	08 95       	ret

000004be <sEOS_SCH_Tasks>:
	*/
}

void sEOS_SCH_Tasks(){
	//Cada 50 ms pone el flag en 1
	if (++counter_MEF == 781) {
 4be:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <counter_MEF>
 4c2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <counter_MEF+0x1>
 4c6:	01 96       	adiw	r24, 0x01	; 1
 4c8:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <counter_MEF+0x1>
 4cc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <counter_MEF>
 4d0:	8d 30       	cpi	r24, 0x0D	; 13
 4d2:	93 40       	sbci	r25, 0x03	; 3
 4d4:	39 f4       	brne	.+14     	; 0x4e4 <sEOS_SCH_Tasks+0x26>
		FLAG_MEF = 1;
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <FLAG_MEF>
		counter_MEF = 0;
 4dc:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <counter_MEF+0x1>
 4e0:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <counter_MEF>
	}
	if (++counter_LDR == 10) {
 4e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4e8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 4ec:	01 96       	adiw	r24, 0x01	; 1
 4ee:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 4f2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 4f6:	0a 97       	sbiw	r24, 0x0a	; 10
 4f8:	39 f4       	brne	.+14     	; 0x508 <sEOS_SCH_Tasks+0x4a>
		FLAG_LDR = 1;
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <FLAG_LDR>
		counter_LDR = 0;
 500:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 504:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	PWM_soft_Update();
 508:	0e 94 87 02 	call	0x50e	; 0x50e <PWM_soft_Update>
 50c:	08 95       	ret

0000050e <PWM_soft_Update>:
	PWM_OFF;
}

uint8_t PWM_get_comp_value(){
	return PWM_DELTA;
}
 50e:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <PWM_position>
 512:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <PWM_position+0x1>
 516:	01 96       	adiw	r24, 0x01	; 1
 518:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <PWM_position+0x1>
 51c:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <PWM_position>
 520:	8f 3f       	cpi	r24, 0xFF	; 255
 522:	91 05       	cpc	r25, r1
 524:	49 f0       	breq	.+18     	; 0x538 <PWM_soft_Update+0x2a>
 526:	40 f0       	brcs	.+16     	; 0x538 <PWM_soft_Update+0x2a>
 528:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <PWM_position+0x1>
 52c:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <PWM_position>
 530:	85 b1       	in	r24, 0x05	; 5
 532:	80 62       	ori	r24, 0x20	; 32
 534:	85 b9       	out	0x05, r24	; 5
 536:	08 95       	ret
 538:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <PWM_DELTA>
 53c:	30 e0       	ldi	r19, 0x00	; 0
 53e:	82 17       	cp	r24, r18
 540:	93 07       	cpc	r25, r19
 542:	20 f4       	brcc	.+8      	; 0x54c <PWM_soft_Update+0x3e>
 544:	85 b1       	in	r24, 0x05	; 5
 546:	8f 7d       	andi	r24, 0xDF	; 223
 548:	85 b9       	out	0x05, r24	; 5
 54a:	08 95       	ret
 54c:	85 b1       	in	r24, 0x05	; 5
 54e:	80 62       	ori	r24, 0x20	; 32
 550:	85 b9       	out	0x05, r24	; 5
 552:	08 95       	ret

00000554 <PWM_soft_init>:
 554:	84 b1       	in	r24, 0x04	; 4
 556:	80 62       	ori	r24, 0x20	; 32
 558:	84 b9       	out	0x04, r24	; 4
 55a:	85 b1       	in	r24, 0x05	; 5
 55c:	8f 7d       	andi	r24, 0xDF	; 223
 55e:	85 b9       	out	0x05, r24	; 5
 560:	08 95       	ret

00000562 <PWM_set_comp_value>:

void PWM_set_comp_value(uint8_t value){
	PWM_DELTA = value;
 562:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <PWM_DELTA>
 566:	08 95       	ret

00000568 <TIMERS_InitTimer0>:
	OCR0A = 249;
	*/
	
	// Interrupcion cada 64 us
	// Prescaler en 8
	TCCR0A |= (1 << WGM01); // Modo CTC
 568:	84 b5       	in	r24, 0x24	; 36
 56a:	82 60       	ori	r24, 0x02	; 2
 56c:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS01);
 56e:	85 b5       	in	r24, 0x25	; 37
 570:	82 60       	ori	r24, 0x02	; 2
 572:	85 bd       	out	0x25, r24	; 37
	OCR0A = 127;
 574:	8f e7       	ldi	r24, 0x7F	; 127
 576:	87 bd       	out	0x27, r24	; 39
	
	TIMSK0 |= (1 << OCIE0A);
 578:	ee e6       	ldi	r30, 0x6E	; 110
 57a:	f0 e0       	ldi	r31, 0x00	; 0
 57c:	80 81       	ld	r24, Z
 57e:	82 60       	ori	r24, 0x02	; 2
 580:	80 83       	st	Z, r24
 582:	08 95       	ret

00000584 <__vector_14>:
	
}

ISR(TIMER0_COMPA_vect){
 584:	1f 92       	push	r1
 586:	0f 92       	push	r0
 588:	0f b6       	in	r0, 0x3f	; 63
 58a:	0f 92       	push	r0
 58c:	11 24       	eor	r1, r1
 58e:	2f 93       	push	r18
 590:	3f 93       	push	r19
 592:	4f 93       	push	r20
 594:	5f 93       	push	r21
 596:	6f 93       	push	r22
 598:	7f 93       	push	r23
 59a:	8f 93       	push	r24
 59c:	9f 93       	push	r25
 59e:	af 93       	push	r26
 5a0:	bf 93       	push	r27
 5a2:	ef 93       	push	r30
 5a4:	ff 93       	push	r31
	sEOS_SCH_Tasks();
 5a6:	0e 94 5f 02 	call	0x4be	; 0x4be <sEOS_SCH_Tasks>
 5aa:	ff 91       	pop	r31
 5ac:	ef 91       	pop	r30
 5ae:	bf 91       	pop	r27
 5b0:	af 91       	pop	r26
 5b2:	9f 91       	pop	r25
 5b4:	8f 91       	pop	r24
 5b6:	7f 91       	pop	r23
 5b8:	6f 91       	pop	r22
 5ba:	5f 91       	pop	r21
 5bc:	4f 91       	pop	r20
 5be:	3f 91       	pop	r19
 5c0:	2f 91       	pop	r18
 5c2:	0f 90       	pop	r0
 5c4:	0f be       	out	0x3f, r0	; 63
 5c6:	0f 90       	pop	r0
 5c8:	1f 90       	pop	r1
 5ca:	18 95       	reti

000005cc <TIMERS_InitTimer1>:
// Init timer
void TIMERS_InitTimer1(){
	//Modo Fast PWM con top = 0x00FF (Modo 5)
	//Prescaler en 1024
	//Modo invertido (clear on count reset)
	TCCR1A |= (1 << WGM10) | (1<< COM1A1) | (1<< COM1B1);
 5cc:	e0 e8       	ldi	r30, 0x80	; 128
 5ce:	f0 e0       	ldi	r31, 0x00	; 0
 5d0:	80 81       	ld	r24, Z
 5d2:	81 6a       	ori	r24, 0xA1	; 161
 5d4:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << CS12) | (1 << CS10);// | (1 << CS10) ;
 5d6:	e1 e8       	ldi	r30, 0x81	; 129
 5d8:	f0 e0       	ldi	r31, 0x00	; 0
 5da:	80 81       	ld	r24, Z
 5dc:	8d 60       	ori	r24, 0x0D	; 13
 5de:	80 83       	st	Z, r24
 5e0:	08 95       	ret

000005e2 <_exit>:
 5e2:	f8 94       	cli

000005e4 <__stop_program>:
 5e4:	ff cf       	rjmp	.-2      	; 0x5e4 <__stop_program>

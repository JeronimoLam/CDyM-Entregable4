
TP4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000009ee  00000a82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000140  00800106  00800106  00000a88  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a88  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ab8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00000af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001437  00000000  00000000  00000ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b25  00000000  00000000  00002117  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cc1  00000000  00000000  00002c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a4  00000000  00000000  00003900  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000075f  00000000  00000000  00003ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000584  00000000  00000000  00004403  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00004987  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 e2 02 	jmp	0x5c4	; 0x5c4 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ee       	ldi	r30, 0xEE	; 238
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 34       	cpi	r26, 0x46	; 70
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <main>
  9e:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LDR_config>:

uint16_t result = 0;
uint8_t is_converting = 0;

void LDR_config(){
	DIDR0= 0x01; //Digital Input Disable (opcional)
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
	ADCSRA= 0x87;//make ADC enable and select ck/128
  ac:	87 e8       	ldi	r24, 0x87	; 135
  ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	ADMUX= 0x00;// Vref=AVCC, right-justified, ADC0 pin
  b2:	ec e7       	ldi	r30, 0x7C	; 124
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	10 82       	st	Z, r1
	ADMUX |= (1<<REFS0);
  b8:	80 81       	ld	r24, Z
  ba:	80 64       	ori	r24, 0x40	; 64
  bc:	80 83       	st	Z, r24
  be:	08 95       	ret

000000c0 <LDR_get_value>:
}

uint16_t LDR_get_value(){
	ADCSRA |= (1<<ADSC);//start conversion
  c0:	ea e7       	ldi	r30, 0x7A	; 122
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	80 64       	ori	r24, 0x40	; 64
  c8:	80 83       	st	Z, r24
	while((ADCSRA&(1<<ADIF))==0);//wait for conversion to finish
  ca:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  ce:	84 ff       	sbrs	r24, 4
  d0:	fc cf       	rjmp	.-8      	; 0xca <LDR_get_value+0xa>
	ADCSRA |= (1<<ADIF); //borrar flag
  d2:	ea e7       	ldi	r30, 0x7A	; 122
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	80 61       	ori	r24, 0x10	; 16
  da:	80 83       	st	Z, r24
	result = (uint16_t) ADC;
  dc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  e0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  e4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
  e8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
	// para no polling comentar las 4 lineas de arriba
	return result;
  ec:	08 95       	ret

000000ee <distributeValues>:
void LEDS_setFinalGreen(uint8_t value){
	final_green = value;
}

void LEDS_setFinalBlue(uint8_t value){
	final_blue = value;
  ee:	cf 93       	push	r28
  f0:	99 e2       	ldi	r25, 0x29	; 41
  f2:	89 9f       	mul	r24, r25
  f4:	a1 2d       	mov	r26, r1
  f6:	11 24       	eor	r1, r1
  f8:	a2 95       	swap	r26
  fa:	af 70       	andi	r26, 0x0F	; 15
  fc:	24 e6       	ldi	r18, 0x64	; 100
  fe:	c8 2f       	mov	r28, r24
 100:	a2 9f       	mul	r26, r18
 102:	c0 19       	sub	r28, r0
 104:	11 24       	eor	r1, r1
 106:	69 9f       	mul	r22, r25
 108:	71 2d       	mov	r23, r1
 10a:	11 24       	eor	r1, r1
 10c:	72 95       	swap	r23
 10e:	7f 70       	andi	r23, 0x0F	; 15
 110:	b6 2f       	mov	r27, r22
 112:	72 9f       	mul	r23, r18
 114:	b0 19       	sub	r27, r0
 116:	11 24       	eor	r1, r1
 118:	49 9f       	mul	r20, r25
 11a:	51 2d       	mov	r21, r1
 11c:	11 24       	eor	r1, r1
 11e:	52 95       	swap	r21
 120:	5f 70       	andi	r21, 0x0F	; 15
 122:	64 2f       	mov	r22, r20
 124:	52 9f       	mul	r21, r18
 126:	60 19       	sub	r22, r0
 128:	11 24       	eor	r1, r1
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	21 c0       	rjmp	.+66     	; 0x170 <distributeValues+0x82>
 12e:	28 2f       	mov	r18, r24
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	8c 17       	cp	r24, r28
 134:	18 f4       	brcc	.+6      	; 0x13c <distributeValues+0x4e>
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	9a 0f       	add	r25, r26
 13a:	01 c0       	rjmp	.+2      	; 0x13e <distributeValues+0x50>
 13c:	9a 2f       	mov	r25, r26
 13e:	f9 01       	movw	r30, r18
 140:	e0 53       	subi	r30, 0x30	; 48
 142:	fe 4f       	sbci	r31, 0xFE	; 254
 144:	90 83       	st	Z, r25
 146:	8b 17       	cp	r24, r27
 148:	18 f4       	brcc	.+6      	; 0x150 <distributeValues+0x62>
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	97 0f       	add	r25, r23
 14e:	01 c0       	rjmp	.+2      	; 0x152 <distributeValues+0x64>
 150:	97 2f       	mov	r25, r23
 152:	f9 01       	movw	r30, r18
 154:	e4 59       	subi	r30, 0x94	; 148
 156:	fe 4f       	sbci	r31, 0xFE	; 254
 158:	90 83       	st	Z, r25
 15a:	86 17       	cp	r24, r22
 15c:	18 f4       	brcc	.+6      	; 0x164 <distributeValues+0x76>
 15e:	91 e0       	ldi	r25, 0x01	; 1
 160:	95 0f       	add	r25, r21
 162:	01 c0       	rjmp	.+2      	; 0x166 <distributeValues+0x78>
 164:	95 2f       	mov	r25, r21
 166:	f9 01       	movw	r30, r18
 168:	e8 5f       	subi	r30, 0xF8	; 248
 16a:	fe 4f       	sbci	r31, 0xFE	; 254
 16c:	90 83       	st	Z, r25
 16e:	8f 5f       	subi	r24, 0xFF	; 255
 170:	84 36       	cpi	r24, 0x64	; 100
 172:	e8 f2       	brcs	.-70     	; 0x12e <distributeValues+0x40>
 174:	cf 91       	pop	r28
 176:	08 95       	ret

00000178 <LEDS_setRed>:
 178:	cf 93       	push	r28
 17a:	c8 2f       	mov	r28, r24
 17c:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <PWM_set_comp_value>
 180:	c0 93 36 02 	sts	0x0236, r28	; 0x800236 <red>
 184:	cf 91       	pop	r28
 186:	08 95       	ret

00000188 <LEDS_setGreen>:
 188:	2f ef       	ldi	r18, 0xFF	; 255
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	28 1b       	sub	r18, r24
 18e:	31 09       	sbc	r19, r1
 190:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 194:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 198:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <green>
 19c:	08 95       	ret

0000019e <LEDS_setBlue>:
 19e:	2f ef       	ldi	r18, 0xFF	; 255
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	28 1b       	sub	r18, r24
 1a4:	31 09       	sbc	r19, r1
 1a6:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1aa:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 1ae:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <blue>
 1b2:	08 95       	ret

000001b4 <LEDS_init>:
 1b4:	84 b1       	in	r24, 0x04	; 4
 1b6:	86 62       	ori	r24, 0x26	; 38
 1b8:	84 b9       	out	0x04, r24	; 4
 1ba:	85 b1       	in	r24, 0x05	; 5
 1bc:	80 62       	ori	r24, 0x20	; 32
 1be:	85 b9       	out	0x05, r24	; 5
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	0e 94 bc 00 	call	0x178	; 0x178 <LEDS_setRed>
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	0e 94 c4 00 	call	0x188	; 0x188 <LEDS_setGreen>
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	0e 94 cf 00 	call	0x19e	; 0x19e <LEDS_setBlue>
 1d2:	20 e0       	ldi	r18, 0x00	; 0
 1d4:	0f c0       	rjmp	.+30     	; 0x1f4 <LEDS_init+0x40>
 1d6:	82 2f       	mov	r24, r18
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	fc 01       	movw	r30, r24
 1dc:	e0 53       	subi	r30, 0x30	; 48
 1de:	fe 4f       	sbci	r31, 0xFE	; 254
 1e0:	10 82       	st	Z, r1
 1e2:	fc 01       	movw	r30, r24
 1e4:	e4 59       	subi	r30, 0x94	; 148
 1e6:	fe 4f       	sbci	r31, 0xFE	; 254
 1e8:	10 82       	st	Z, r1
 1ea:	fc 01       	movw	r30, r24
 1ec:	e8 5f       	subi	r30, 0xF8	; 248
 1ee:	fe 4f       	sbci	r31, 0xFE	; 254
 1f0:	10 82       	st	Z, r1
 1f2:	2f 5f       	subi	r18, 0xFF	; 255
 1f4:	24 36       	cpi	r18, 0x64	; 100
 1f6:	78 f3       	brcs	.-34     	; 0x1d6 <LEDS_init+0x22>
 1f8:	08 95       	ret

000001fa <LEDS_getRed>:
 1fa:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <red>
 1fe:	08 95       	ret

00000200 <LEDS_getGreen>:
 200:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <green>
 204:	08 95       	ret

00000206 <LEDS_getBlue>:
 206:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <blue>
 20a:	08 95       	ret

0000020c <LEDS_getFinalRed>:
}

uint8_t LEDS_getFinalRed(){
	return final_red;
}
 20c:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <final_red>
 210:	08 95       	ret

00000212 <LEDS_getFinalGreen>:

uint8_t LEDS_getFinalGreen(){
	return final_green;
}
 212:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <final_green>
 216:	08 95       	ret

00000218 <LEDS_getFinalBlue>:

uint8_t LEDS_getFinalBlue(){
	return final_blue;
}
 218:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <final_blue>
 21c:	08 95       	ret

0000021e <LEDS_setFinalRGB>:

void LEDS_setFinalRGB(uint8_t valueR, uint8_t valueG, uint8_t valueB){
	final_red = valueR;
 21e:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <final_red>
	final_green = valueG;
 222:	60 93 38 02 	sts	0x0238, r22	; 0x800238 <final_green>
	final_blue = valueB;
 226:	40 93 37 02 	sts	0x0237, r20	; 0x800237 <final_blue>
	distributeValues(valueR, valueG, valueB);
 22a:	0e 94 77 00 	call	0xee	; 0xee <distributeValues>
 22e:	08 95       	ret

00000230 <LEDS_incrementRed>:
}

void LEDS_incrementRed(uint16_t value){
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	ec 01       	movw	r28, r24
	LEDS_setRed(LEDS_getRed() + red_increments[value]);
 236:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LEDS_getRed>
 23a:	c0 53       	subi	r28, 0x30	; 48
 23c:	de 4f       	sbci	r29, 0xFE	; 254
 23e:	98 81       	ld	r25, Y
 240:	89 0f       	add	r24, r25
 242:	0e 94 bc 00 	call	0x178	; 0x178 <LEDS_setRed>
}
 246:	df 91       	pop	r29
 248:	cf 91       	pop	r28
 24a:	08 95       	ret

0000024c <LEDS_incrementGreen>:

void LEDS_incrementGreen(uint16_t value){
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	ec 01       	movw	r28, r24
	LEDS_setGreen(LEDS_getGreen() + green_increments[value]);
 252:	0e 94 00 01 	call	0x200	; 0x200 <LEDS_getGreen>
 256:	c4 59       	subi	r28, 0x94	; 148
 258:	de 4f       	sbci	r29, 0xFE	; 254
 25a:	98 81       	ld	r25, Y
 25c:	89 0f       	add	r24, r25
 25e:	0e 94 c4 00 	call	0x188	; 0x188 <LEDS_setGreen>
	
}
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	08 95       	ret

00000268 <LEDS_incrementBlue>:

void LEDS_incrementBlue(uint16_t value){
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	ec 01       	movw	r28, r24
	LEDS_setBlue(LEDS_getBlue() + blue_increments[value]);
 26e:	0e 94 03 01 	call	0x206	; 0x206 <LEDS_getBlue>
 272:	c8 5f       	subi	r28, 0xF8	; 248
 274:	de 4f       	sbci	r29, 0xFE	; 254
 276:	98 81       	ld	r25, Y
 278:	89 0f       	add	r24, r25
 27a:	0e 94 cf 00 	call	0x19e	; 0x19e <LEDS_setBlue>
}
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	08 95       	ret

00000284 <LEDS_decrementRed>:

void LEDS_decrementRed(uint16_t value){
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
 288:	ec 01       	movw	r28, r24
	LEDS_setRed(LEDS_getRed() - red_increments[STEPS - 1 - value]);
 28a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LEDS_getRed>
 28e:	e3 e6       	ldi	r30, 0x63	; 99
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	ec 1b       	sub	r30, r28
 294:	fd 0b       	sbc	r31, r29
 296:	e0 53       	subi	r30, 0x30	; 48
 298:	fe 4f       	sbci	r31, 0xFE	; 254
 29a:	90 81       	ld	r25, Z
 29c:	89 1b       	sub	r24, r25
 29e:	0e 94 bc 00 	call	0x178	; 0x178 <LEDS_setRed>
}
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	08 95       	ret

000002a8 <LEDS_decrementGreen>:

void LEDS_decrementGreen(uint16_t value){
 2a8:	cf 93       	push	r28
 2aa:	df 93       	push	r29
 2ac:	ec 01       	movw	r28, r24
	LEDS_setGreen(LEDS_getGreen() - green_increments[STEPS - 1 - value]);
 2ae:	0e 94 00 01 	call	0x200	; 0x200 <LEDS_getGreen>
 2b2:	e3 e6       	ldi	r30, 0x63	; 99
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	ec 1b       	sub	r30, r28
 2b8:	fd 0b       	sbc	r31, r29
 2ba:	e4 59       	subi	r30, 0x94	; 148
 2bc:	fe 4f       	sbci	r31, 0xFE	; 254
 2be:	90 81       	ld	r25, Z
 2c0:	89 1b       	sub	r24, r25
 2c2:	0e 94 c4 00 	call	0x188	; 0x188 <LEDS_setGreen>
}
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	08 95       	ret

000002cc <LEDS_decrementBlue>:

void LEDS_decrementBlue(uint16_t value){
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	ec 01       	movw	r28, r24
	LEDS_setBlue(LEDS_getBlue() - blue_increments[STEPS - 1- value]);
 2d2:	0e 94 03 01 	call	0x206	; 0x206 <LEDS_getBlue>
 2d6:	e3 e6       	ldi	r30, 0x63	; 99
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	ec 1b       	sub	r30, r28
 2dc:	fd 0b       	sbc	r31, r29
 2de:	e8 5f       	subi	r30, 0xF8	; 248
 2e0:	fe 4f       	sbci	r31, 0xFE	; 254
 2e2:	90 81       	ld	r25, Z
 2e4:	89 1b       	sub	r24, r25
 2e6:	0e 94 cf 00 	call	0x19e	; 0x19e <LEDS_setBlue>
}
 2ea:	df 91       	pop	r29
 2ec:	cf 91       	pop	r28
 2ee:	08 95       	ret

000002f0 <main>:
#include "SW_PWM/PWM.h"
#include "LDR/LDR.h"

int main(void)
{
	TIMERS_InitTimer0();
 2f0:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <TIMERS_InitTimer0>
	TIMERS_InitTimer1();
 2f4:	0e 94 06 03 	call	0x60c	; 0x60c <TIMERS_InitTimer1>
	
	LEDS_init();
 2f8:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LEDS_init>
	MEF_init();
 2fc:	0e 94 8f 01 	call	0x31e	; 0x31e <MEF_init>
	LEDS_setFinalRGB(200, 200, 128);
 300:	40 e8       	ldi	r20, 0x80	; 128
 302:	68 ec       	ldi	r22, 0xC8	; 200
 304:	88 ec       	ldi	r24, 0xC8	; 200
 306:	0e 94 0f 01 	call	0x21e	; 0x21e <LEDS_setFinalRGB>
	
	LDR_config();
 30a:	0e 94 53 00 	call	0xa6	; 0xa6 <LDR_config>
	
	PWM_soft_init();
 30e:	0e 94 ca 02 	call	0x594	; 0x594 <PWM_soft_init>
	
	sei();
 312:	78 94       	sei
	
    while(1)
    {
		sEOS_Dispatch_Tasks();
 314:	0e 94 7d 02 	call	0x4fa	; 0x4fa <sEOS_Dispatch_Tasks>
		sEOS_Go_To_Sleep();
 318:	0e 94 9c 02 	call	0x538	; 0x538 <sEOS_Go_To_Sleep>
 31c:	fb cf       	rjmp	.-10     	; 0x314 <main+0x24>

0000031e <MEF_init>:
static uint16_t timeOff = 20;
static double pendiente;
static uint16_t desplazamiento;

void MEF_init(){
	state = OFF;
 31e:	83 e0       	ldi	r24, 0x03	; 3
 320:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <state>
	stateCount = 0;
 324:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <stateCount+0x1>
 328:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <stateCount>

	pendiente = (400-1000) / (MIN_SUP_LDR - MAX_INF_LDR);
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	a0 e7       	ldi	r26, 0x70	; 112
 332:	b1 ec       	ldi	r27, 0xC1	; 193
 334:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <pendiente>
 338:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <pendiente+0x1>
 33c:	a0 93 3e 02 	sts	0x023E, r26	; 0x80023e <pendiente+0x2>
 340:	b0 93 3f 02 	sts	0x023F, r27	; 0x80023f <pendiente+0x3>
	desplazamiento = 1000 + round(pendiente * MAX_INF_LDR);
 344:	8a ef       	ldi	r24, 0xFA	; 250
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <desplazamiento+0x1>
 34c:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <desplazamiento>
 350:	08 95       	ret

00000352 <update_timeOff>:
}

void  update_timeOff(){
 352:	cf 92       	push	r12
 354:	df 92       	push	r13
 356:	ef 92       	push	r14
 358:	ff 92       	push	r15
	uint16_t LDR_value = LDR_get_value();
 35a:	0e 94 60 00 	call	0xc0	; 0xc0 <LDR_get_value>
	
	// Caso en el que Tparpadeo = 5seg (minima luz o menos)
	if (LDR_value < MAX_INF_LDR){
 35e:	82 33       	cpi	r24, 0x32	; 50
 360:	91 05       	cpc	r25, r1
 362:	38 f4       	brcc	.+14     	; 0x372 <update_timeOff+0x20>
		timeOff = 1000;
 364:	88 ee       	ldi	r24, 0xE8	; 232
 366:	93 e0       	ldi	r25, 0x03	; 3
 368:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 36c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 370:	2f c0       	rjmp	.+94     	; 0x3d0 <update_timeOff+0x7e>
	}
	// Caso en el que Tparepadeo = 2seg (luz ambiente o mas)
	else if (LDR_value > MIN_SUP_LDR){
 372:	8b 35       	cpi	r24, 0x5B	; 91
 374:	91 05       	cpc	r25, r1
 376:	38 f0       	brcs	.+14     	; 0x386 <update_timeOff+0x34>
		timeOff = 400;
 378:	80 e9       	ldi	r24, 0x90	; 144
 37a:	91 e0       	ldi	r25, 0x01	; 1
 37c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 380:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 384:	25 c0       	rjmp	.+74     	; 0x3d0 <update_timeOff+0x7e>
	}
	else {
		timeOff = desplazamiento - round(pendiente*LDR_value); // Parte de la recta con pendiente m negativa
 386:	bc 01       	movw	r22, r24
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	0e 94 ad 03 	call	0x75a	; 0x75a <__floatunsisf>
 390:	20 91 3c 02 	lds	r18, 0x023C	; 0x80023c <pendiente>
 394:	30 91 3d 02 	lds	r19, 0x023D	; 0x80023d <pendiente+0x1>
 398:	40 91 3e 02 	lds	r20, 0x023E	; 0x80023e <pendiente+0x2>
 39c:	50 91 3f 02 	lds	r21, 0x023F	; 0x80023f <pendiente+0x3>
 3a0:	0e 94 3b 04 	call	0x876	; 0x876 <__mulsf3>
 3a4:	0e 94 a8 04 	call	0x950	; 0x950 <round>
 3a8:	6b 01       	movw	r12, r22
 3aa:	7c 01       	movw	r14, r24
 3ac:	60 91 3a 02 	lds	r22, 0x023A	; 0x80023a <desplazamiento>
 3b0:	70 91 3b 02 	lds	r23, 0x023B	; 0x80023b <desplazamiento+0x1>
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	0e 94 ad 03 	call	0x75a	; 0x75a <__floatunsisf>
 3bc:	a7 01       	movw	r20, r14
 3be:	96 01       	movw	r18, r12
 3c0:	0e 94 11 03 	call	0x622	; 0x622 <__subsf3>
 3c4:	0e 94 7e 03 	call	0x6fc	; 0x6fc <__fixunssfsi>
 3c8:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3cc:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
 3d0:	ff 90       	pop	r15
 3d2:	ef 90       	pop	r14
 3d4:	df 90       	pop	r13
 3d6:	cf 90       	pop	r12
 3d8:	08 95       	ret

000003da <MEF_Update>:

void MEF_Update(){
	stateCount++;
 3da:	20 91 40 02 	lds	r18, 0x0240	; 0x800240 <stateCount>
 3de:	30 91 41 02 	lds	r19, 0x0241	; 0x800241 <stateCount+0x1>
 3e2:	c9 01       	movw	r24, r18
 3e4:	01 96       	adiw	r24, 0x01	; 1
 3e6:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <stateCount+0x1>
 3ea:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <stateCount>
	
	switch (state){
 3ee:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <state>
 3f2:	91 30       	cpi	r25, 0x01	; 1
 3f4:	09 f4       	brne	.+2      	; 0x3f8 <MEF_Update+0x1e>
 3f6:	46 c0       	rjmp	.+140    	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 3f8:	20 f1       	brcs	.+72     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 3fa:	92 30       	cpi	r25, 0x02	; 2
 3fc:	09 f4       	brne	.+2      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fe:	5d c0       	rjmp	.+186    	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
 400:	93 30       	cpi	r25, 0x03	; 3
 402:	09 f0       	breq	.+2      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 404:	79 c0       	rjmp	.+242    	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
		case OFF:
			
			LEDS_setRed(0);
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	0e 94 bc 00 	call	0x178	; 0x178 <LEDS_setRed>
			LEDS_setGreen(0);
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	0e 94 c4 00 	call	0x188	; 0x188 <LEDS_setGreen>
			LEDS_setBlue(0);
 412:	80 e0       	ldi	r24, 0x00	; 0
 414:	0e 94 cf 00 	call	0x19e	; 0x19e <LEDS_setBlue>
			
			update_timeOff();
 418:	0e 94 a9 01 	call	0x352	; 0x352 <update_timeOff>
			if(stateCount >= timeOff){
 41c:	20 91 40 02 	lds	r18, 0x0240	; 0x800240 <stateCount>
 420:	30 91 41 02 	lds	r19, 0x0241	; 0x800241 <stateCount+0x1>
 424:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 428:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 42c:	28 17       	cp	r18, r24
 42e:	39 07       	cpc	r19, r25
 430:	08 f4       	brcc	.+2      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 432:	62 c0       	rjmp	.+196    	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
				state = RAISING;
 434:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <state>
				stateCount = 0;
 438:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <stateCount+0x1>
 43c:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <stateCount>
 440:	08 95       	ret
			}
			break;
			
		case RAISING:
			
			LEDS_incrementRed(stateCount - 1);
 442:	c9 01       	movw	r24, r18
 444:	0e 94 18 01 	call	0x230	; 0x230 <LEDS_incrementRed>
			LEDS_incrementGreen(stateCount - 1);
 448:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <stateCount>
 44c:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <stateCount+0x1>
 450:	01 97       	sbiw	r24, 0x01	; 1
 452:	0e 94 26 01 	call	0x24c	; 0x24c <LEDS_incrementGreen>
			LEDS_incrementBlue(stateCount - 1);
 456:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <stateCount>
 45a:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <stateCount+0x1>
 45e:	01 97       	sbiw	r24, 0x01	; 1
 460:	0e 94 34 01 	call	0x268	; 0x268 <LEDS_incrementBlue>
			
			if(stateCount == 100){
 464:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <stateCount>
 468:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <stateCount+0x1>
 46c:	84 36       	cpi	r24, 0x64	; 100
 46e:	91 05       	cpc	r25, r1
 470:	09 f0       	breq	.+2      	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 472:	42 c0       	rjmp	.+132    	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
				state = ON;
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <state>
				stateCount = 0;
 47a:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <stateCount+0x1>
 47e:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <stateCount>
 482:	08 95       	ret
			break;
			
		case ON:

			
			LEDS_setRed(LEDS_getFinalRed());
 484:	0e 94 06 01 	call	0x20c	; 0x20c <LEDS_getFinalRed>
 488:	0e 94 bc 00 	call	0x178	; 0x178 <LEDS_setRed>
			LEDS_setGreen(LEDS_getFinalGreen());
 48c:	0e 94 09 01 	call	0x212	; 0x212 <LEDS_getFinalGreen>
 490:	0e 94 c4 00 	call	0x188	; 0x188 <LEDS_setGreen>
			LEDS_setBlue(LEDS_getFinalBlue());
 494:	0e 94 0c 01 	call	0x218	; 0x218 <LEDS_getFinalBlue>
 498:	0e 94 cf 00 	call	0x19e	; 0x19e <LEDS_setBlue>
			
			if(stateCount == 200){
 49c:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <stateCount>
 4a0:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <stateCount+0x1>
 4a4:	88 3c       	cpi	r24, 0xC8	; 200
 4a6:	91 05       	cpc	r25, r1
 4a8:	39 f5       	brne	.+78     	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
				state = FALLING;
 4aa:	82 e0       	ldi	r24, 0x02	; 2
 4ac:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <state>
				stateCount = 0;
 4b0:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <stateCount+0x1>
 4b4:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <stateCount>
 4b8:	08 95       	ret
			}
			break;
			
		case FALLING:
			
			LEDS_decrementRed(stateCount - 1);
 4ba:	c9 01       	movw	r24, r18
 4bc:	0e 94 42 01 	call	0x284	; 0x284 <LEDS_decrementRed>
			LEDS_decrementGreen(stateCount - 1);
 4c0:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <stateCount>
 4c4:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <stateCount+0x1>
 4c8:	01 97       	sbiw	r24, 0x01	; 1
 4ca:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LEDS_decrementGreen>
			LEDS_decrementBlue(stateCount - 1);
 4ce:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <stateCount>
 4d2:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <stateCount+0x1>
 4d6:	01 97       	sbiw	r24, 0x01	; 1
 4d8:	0e 94 66 01 	call	0x2cc	; 0x2cc <LEDS_decrementBlue>
			
			if(stateCount == 100){
 4dc:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <stateCount>
 4e0:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <stateCount+0x1>
 4e4:	84 36       	cpi	r24, 0x64	; 100
 4e6:	91 05       	cpc	r25, r1
 4e8:	39 f4       	brne	.+14     	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
				state = OFF;
 4ea:	83 e0       	ldi	r24, 0x03	; 3
 4ec:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <state>
				stateCount = 0;
 4f0:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <stateCount+0x1>
 4f4:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <stateCount>
 4f8:	08 95       	ret

000004fa <sEOS_Dispatch_Tasks>:
static volatile uint16_t counter_LDR = 3;
static volatile uint8_t FLAG_LDR = 0;


void sEOS_Dispatch_Tasks(){
	if(FLAG_MEF){
 4fa:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <FLAG_MEF>
 4fe:	88 23       	and	r24, r24
 500:	21 f0       	breq	.+8      	; 0x50a <sEOS_Dispatch_Tasks+0x10>
		MEF_Update();
 502:	0e 94 ed 01 	call	0x3da	; 0x3da <MEF_Update>
		FLAG_MEF = 0;	
 506:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <FLAG_MEF>
 50a:	08 95       	ret

0000050c <sEOS_SCH_Tasks>:
	}
}

void sEOS_SCH_Tasks(){
	//Cada 5 ms pone el flag en 1
	if (++counter_MEF == 78) {
 50c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <counter_MEF>
 510:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <counter_MEF+0x1>
 514:	01 96       	adiw	r24, 0x01	; 1
 516:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <counter_MEF+0x1>
 51a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <counter_MEF>
 51e:	8e 34       	cpi	r24, 0x4E	; 78
 520:	91 05       	cpc	r25, r1
 522:	39 f4       	brne	.+14     	; 0x532 <sEOS_SCH_Tasks+0x26>
		FLAG_MEF = 1;
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <FLAG_MEF>
		counter_MEF = 0;
 52a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <counter_MEF+0x1>
 52e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <counter_MEF>
	}
	PWM_soft_Update();
 532:	0e 94 a7 02 	call	0x54e	; 0x54e <PWM_soft_Update>
 536:	08 95       	ret

00000538 <sEOS_Go_To_Sleep>:
//Pone en modo ahorro el micro
void sEOS_Go_To_Sleep(){
	
	// Setea el sleep mode a "idle". Este modo permite a la CPU dormir
	// dejando los perifericos (Como Timers y UART) corriendo
	set_sleep_mode(SLEEP_MODE_IDLE);
 538:	83 b7       	in	r24, 0x33	; 51
 53a:	81 7f       	andi	r24, 0xF1	; 241
 53c:	83 bf       	out	0x33, r24	; 51

	// Habilita sleep mode
	sleep_enable();
 53e:	83 b7       	in	r24, 0x33	; 51
 540:	81 60       	ori	r24, 0x01	; 1
 542:	83 bf       	out	0x33, r24	; 51

	// Duerme al cpu
	sleep_cpu();
 544:	88 95       	sleep

	// Deshabilita sleep mode
	sleep_disable();
 546:	83 b7       	in	r24, 0x33	; 51
 548:	8e 7f       	andi	r24, 0xFE	; 254
 54a:	83 bf       	out	0x33, r24	; 51
 54c:	08 95       	ret

0000054e <PWM_soft_Update>:
	PWM_OFF;
}

uint8_t PWM_get_comp_value(){
	return PWM_DELTA;
}
 54e:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <PWM_position>
 552:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <PWM_position+0x1>
 556:	01 96       	adiw	r24, 0x01	; 1
 558:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <PWM_position+0x1>
 55c:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <PWM_position>
 560:	8f 3f       	cpi	r24, 0xFF	; 255
 562:	91 05       	cpc	r25, r1
 564:	49 f0       	breq	.+18     	; 0x578 <PWM_soft_Update+0x2a>
 566:	40 f0       	brcs	.+16     	; 0x578 <PWM_soft_Update+0x2a>
 568:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <PWM_position+0x1>
 56c:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <PWM_position>
 570:	85 b1       	in	r24, 0x05	; 5
 572:	80 62       	ori	r24, 0x20	; 32
 574:	85 b9       	out	0x05, r24	; 5
 576:	08 95       	ret
 578:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <PWM_DELTA>
 57c:	30 e0       	ldi	r19, 0x00	; 0
 57e:	82 17       	cp	r24, r18
 580:	93 07       	cpc	r25, r19
 582:	20 f4       	brcc	.+8      	; 0x58c <PWM_soft_Update+0x3e>
 584:	85 b1       	in	r24, 0x05	; 5
 586:	8f 7d       	andi	r24, 0xDF	; 223
 588:	85 b9       	out	0x05, r24	; 5
 58a:	08 95       	ret
 58c:	85 b1       	in	r24, 0x05	; 5
 58e:	80 62       	ori	r24, 0x20	; 32
 590:	85 b9       	out	0x05, r24	; 5
 592:	08 95       	ret

00000594 <PWM_soft_init>:
 594:	84 b1       	in	r24, 0x04	; 4
 596:	80 62       	ori	r24, 0x20	; 32
 598:	84 b9       	out	0x04, r24	; 4
 59a:	85 b1       	in	r24, 0x05	; 5
 59c:	8f 7d       	andi	r24, 0xDF	; 223
 59e:	85 b9       	out	0x05, r24	; 5
 5a0:	08 95       	ret

000005a2 <PWM_set_comp_value>:

void PWM_set_comp_value(uint8_t value){
	PWM_DELTA = value;
 5a2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <PWM_DELTA>
 5a6:	08 95       	ret

000005a8 <TIMERS_InitTimer0>:
#include "../sEOS/sEOS.h"

void TIMERS_InitTimer0(){
	// Interrupcion cada 64 us
	// Prescaler en 8
	TCCR0A |= (1 << WGM01); // Modo CTC
 5a8:	84 b5       	in	r24, 0x24	; 36
 5aa:	82 60       	ori	r24, 0x02	; 2
 5ac:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS01);
 5ae:	85 b5       	in	r24, 0x25	; 37
 5b0:	82 60       	ori	r24, 0x02	; 2
 5b2:	85 bd       	out	0x25, r24	; 37
	OCR0A = 127;
 5b4:	8f e7       	ldi	r24, 0x7F	; 127
 5b6:	87 bd       	out	0x27, r24	; 39
	
	TIMSK0 |= (1 << OCIE0A);
 5b8:	ee e6       	ldi	r30, 0x6E	; 110
 5ba:	f0 e0       	ldi	r31, 0x00	; 0
 5bc:	80 81       	ld	r24, Z
 5be:	82 60       	ori	r24, 0x02	; 2
 5c0:	80 83       	st	Z, r24
 5c2:	08 95       	ret

000005c4 <__vector_14>:
}

ISR(TIMER0_COMPA_vect){
 5c4:	1f 92       	push	r1
 5c6:	0f 92       	push	r0
 5c8:	0f b6       	in	r0, 0x3f	; 63
 5ca:	0f 92       	push	r0
 5cc:	11 24       	eor	r1, r1
 5ce:	2f 93       	push	r18
 5d0:	3f 93       	push	r19
 5d2:	4f 93       	push	r20
 5d4:	5f 93       	push	r21
 5d6:	6f 93       	push	r22
 5d8:	7f 93       	push	r23
 5da:	8f 93       	push	r24
 5dc:	9f 93       	push	r25
 5de:	af 93       	push	r26
 5e0:	bf 93       	push	r27
 5e2:	ef 93       	push	r30
 5e4:	ff 93       	push	r31
	sEOS_SCH_Tasks();
 5e6:	0e 94 86 02 	call	0x50c	; 0x50c <sEOS_SCH_Tasks>
 5ea:	ff 91       	pop	r31
 5ec:	ef 91       	pop	r30
 5ee:	bf 91       	pop	r27
 5f0:	af 91       	pop	r26
 5f2:	9f 91       	pop	r25
 5f4:	8f 91       	pop	r24
 5f6:	7f 91       	pop	r23
 5f8:	6f 91       	pop	r22
 5fa:	5f 91       	pop	r21
 5fc:	4f 91       	pop	r20
 5fe:	3f 91       	pop	r19
 600:	2f 91       	pop	r18
 602:	0f 90       	pop	r0
 604:	0f be       	out	0x3f, r0	; 63
 606:	0f 90       	pop	r0
 608:	1f 90       	pop	r1
 60a:	18 95       	reti

0000060c <TIMERS_InitTimer1>:

void TIMERS_InitTimer1(){
	//Modo Fast PWM con top = 0x00FF (Modo 5)
	//Prescaler en 1024
	//Modo invertido (clear on count reset)
	TCCR1A |= (1 << WGM10) | (1<< COM1A1) | (1<< COM1B1);
 60c:	e0 e8       	ldi	r30, 0x80	; 128
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	80 81       	ld	r24, Z
 612:	81 6a       	ori	r24, 0xA1	; 161
 614:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << CS12) | (1 << CS10);
 616:	e1 e8       	ldi	r30, 0x81	; 129
 618:	f0 e0       	ldi	r31, 0x00	; 0
 61a:	80 81       	ld	r24, Z
 61c:	8d 60       	ori	r24, 0x0D	; 13
 61e:	80 83       	st	Z, r24
 620:	08 95       	ret

00000622 <__subsf3>:
 622:	50 58       	subi	r21, 0x80	; 128

00000624 <__addsf3>:
 624:	bb 27       	eor	r27, r27
 626:	aa 27       	eor	r26, r26
 628:	0e 94 29 03 	call	0x652	; 0x652 <__addsf3x>
 62c:	0c 94 01 04 	jmp	0x802	; 0x802 <__fp_round>
 630:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__fp_pscA>
 634:	38 f0       	brcs	.+14     	; 0x644 <__addsf3+0x20>
 636:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__fp_pscB>
 63a:	20 f0       	brcs	.+8      	; 0x644 <__addsf3+0x20>
 63c:	39 f4       	brne	.+14     	; 0x64c <__addsf3+0x28>
 63e:	9f 3f       	cpi	r25, 0xFF	; 255
 640:	19 f4       	brne	.+6      	; 0x648 <__addsf3+0x24>
 642:	26 f4       	brtc	.+8      	; 0x64c <__addsf3+0x28>
 644:	0c 94 f0 03 	jmp	0x7e0	; 0x7e0 <__fp_nan>
 648:	0e f4       	brtc	.+2      	; 0x64c <__addsf3+0x28>
 64a:	e0 95       	com	r30
 64c:	e7 fb       	bst	r30, 7
 64e:	0c 94 ea 03 	jmp	0x7d4	; 0x7d4 <__fp_inf>

00000652 <__addsf3x>:
 652:	e9 2f       	mov	r30, r25
 654:	0e 94 12 04 	call	0x824	; 0x824 <__fp_split3>
 658:	58 f3       	brcs	.-42     	; 0x630 <__addsf3+0xc>
 65a:	ba 17       	cp	r27, r26
 65c:	62 07       	cpc	r22, r18
 65e:	73 07       	cpc	r23, r19
 660:	84 07       	cpc	r24, r20
 662:	95 07       	cpc	r25, r21
 664:	20 f0       	brcs	.+8      	; 0x66e <__addsf3x+0x1c>
 666:	79 f4       	brne	.+30     	; 0x686 <__addsf3x+0x34>
 668:	a6 f5       	brtc	.+104    	; 0x6d2 <__addsf3x+0x80>
 66a:	0c 94 34 04 	jmp	0x868	; 0x868 <__fp_zero>
 66e:	0e f4       	brtc	.+2      	; 0x672 <__addsf3x+0x20>
 670:	e0 95       	com	r30
 672:	0b 2e       	mov	r0, r27
 674:	ba 2f       	mov	r27, r26
 676:	a0 2d       	mov	r26, r0
 678:	0b 01       	movw	r0, r22
 67a:	b9 01       	movw	r22, r18
 67c:	90 01       	movw	r18, r0
 67e:	0c 01       	movw	r0, r24
 680:	ca 01       	movw	r24, r20
 682:	a0 01       	movw	r20, r0
 684:	11 24       	eor	r1, r1
 686:	ff 27       	eor	r31, r31
 688:	59 1b       	sub	r21, r25
 68a:	99 f0       	breq	.+38     	; 0x6b2 <__addsf3x+0x60>
 68c:	59 3f       	cpi	r21, 0xF9	; 249
 68e:	50 f4       	brcc	.+20     	; 0x6a4 <__addsf3x+0x52>
 690:	50 3e       	cpi	r21, 0xE0	; 224
 692:	68 f1       	brcs	.+90     	; 0x6ee <__addsf3x+0x9c>
 694:	1a 16       	cp	r1, r26
 696:	f0 40       	sbci	r31, 0x00	; 0
 698:	a2 2f       	mov	r26, r18
 69a:	23 2f       	mov	r18, r19
 69c:	34 2f       	mov	r19, r20
 69e:	44 27       	eor	r20, r20
 6a0:	58 5f       	subi	r21, 0xF8	; 248
 6a2:	f3 cf       	rjmp	.-26     	; 0x68a <__addsf3x+0x38>
 6a4:	46 95       	lsr	r20
 6a6:	37 95       	ror	r19
 6a8:	27 95       	ror	r18
 6aa:	a7 95       	ror	r26
 6ac:	f0 40       	sbci	r31, 0x00	; 0
 6ae:	53 95       	inc	r21
 6b0:	c9 f7       	brne	.-14     	; 0x6a4 <__addsf3x+0x52>
 6b2:	7e f4       	brtc	.+30     	; 0x6d2 <__addsf3x+0x80>
 6b4:	1f 16       	cp	r1, r31
 6b6:	ba 0b       	sbc	r27, r26
 6b8:	62 0b       	sbc	r22, r18
 6ba:	73 0b       	sbc	r23, r19
 6bc:	84 0b       	sbc	r24, r20
 6be:	ba f0       	brmi	.+46     	; 0x6ee <__addsf3x+0x9c>
 6c0:	91 50       	subi	r25, 0x01	; 1
 6c2:	a1 f0       	breq	.+40     	; 0x6ec <__addsf3x+0x9a>
 6c4:	ff 0f       	add	r31, r31
 6c6:	bb 1f       	adc	r27, r27
 6c8:	66 1f       	adc	r22, r22
 6ca:	77 1f       	adc	r23, r23
 6cc:	88 1f       	adc	r24, r24
 6ce:	c2 f7       	brpl	.-16     	; 0x6c0 <__addsf3x+0x6e>
 6d0:	0e c0       	rjmp	.+28     	; 0x6ee <__addsf3x+0x9c>
 6d2:	ba 0f       	add	r27, r26
 6d4:	62 1f       	adc	r22, r18
 6d6:	73 1f       	adc	r23, r19
 6d8:	84 1f       	adc	r24, r20
 6da:	48 f4       	brcc	.+18     	; 0x6ee <__addsf3x+0x9c>
 6dc:	87 95       	ror	r24
 6de:	77 95       	ror	r23
 6e0:	67 95       	ror	r22
 6e2:	b7 95       	ror	r27
 6e4:	f7 95       	ror	r31
 6e6:	9e 3f       	cpi	r25, 0xFE	; 254
 6e8:	08 f0       	brcs	.+2      	; 0x6ec <__addsf3x+0x9a>
 6ea:	b0 cf       	rjmp	.-160    	; 0x64c <__addsf3+0x28>
 6ec:	93 95       	inc	r25
 6ee:	88 0f       	add	r24, r24
 6f0:	08 f0       	brcs	.+2      	; 0x6f4 <__addsf3x+0xa2>
 6f2:	99 27       	eor	r25, r25
 6f4:	ee 0f       	add	r30, r30
 6f6:	97 95       	ror	r25
 6f8:	87 95       	ror	r24
 6fa:	08 95       	ret

000006fc <__fixunssfsi>:
 6fc:	0e 94 1a 04 	call	0x834	; 0x834 <__fp_splitA>
 700:	88 f0       	brcs	.+34     	; 0x724 <__fixunssfsi+0x28>
 702:	9f 57       	subi	r25, 0x7F	; 127
 704:	98 f0       	brcs	.+38     	; 0x72c <__fixunssfsi+0x30>
 706:	b9 2f       	mov	r27, r25
 708:	99 27       	eor	r25, r25
 70a:	b7 51       	subi	r27, 0x17	; 23
 70c:	b0 f0       	brcs	.+44     	; 0x73a <__fixunssfsi+0x3e>
 70e:	e1 f0       	breq	.+56     	; 0x748 <__fixunssfsi+0x4c>
 710:	66 0f       	add	r22, r22
 712:	77 1f       	adc	r23, r23
 714:	88 1f       	adc	r24, r24
 716:	99 1f       	adc	r25, r25
 718:	1a f0       	brmi	.+6      	; 0x720 <__fixunssfsi+0x24>
 71a:	ba 95       	dec	r27
 71c:	c9 f7       	brne	.-14     	; 0x710 <__fixunssfsi+0x14>
 71e:	14 c0       	rjmp	.+40     	; 0x748 <__fixunssfsi+0x4c>
 720:	b1 30       	cpi	r27, 0x01	; 1
 722:	91 f0       	breq	.+36     	; 0x748 <__fixunssfsi+0x4c>
 724:	0e 94 34 04 	call	0x868	; 0x868 <__fp_zero>
 728:	b1 e0       	ldi	r27, 0x01	; 1
 72a:	08 95       	ret
 72c:	0c 94 34 04 	jmp	0x868	; 0x868 <__fp_zero>
 730:	67 2f       	mov	r22, r23
 732:	78 2f       	mov	r23, r24
 734:	88 27       	eor	r24, r24
 736:	b8 5f       	subi	r27, 0xF8	; 248
 738:	39 f0       	breq	.+14     	; 0x748 <__fixunssfsi+0x4c>
 73a:	b9 3f       	cpi	r27, 0xF9	; 249
 73c:	cc f3       	brlt	.-14     	; 0x730 <__fixunssfsi+0x34>
 73e:	86 95       	lsr	r24
 740:	77 95       	ror	r23
 742:	67 95       	ror	r22
 744:	b3 95       	inc	r27
 746:	d9 f7       	brne	.-10     	; 0x73e <__fixunssfsi+0x42>
 748:	3e f4       	brtc	.+14     	; 0x758 <__fixunssfsi+0x5c>
 74a:	90 95       	com	r25
 74c:	80 95       	com	r24
 74e:	70 95       	com	r23
 750:	61 95       	neg	r22
 752:	7f 4f       	sbci	r23, 0xFF	; 255
 754:	8f 4f       	sbci	r24, 0xFF	; 255
 756:	9f 4f       	sbci	r25, 0xFF	; 255
 758:	08 95       	ret

0000075a <__floatunsisf>:
 75a:	e8 94       	clt
 75c:	09 c0       	rjmp	.+18     	; 0x770 <__floatsisf+0x12>

0000075e <__floatsisf>:
 75e:	97 fb       	bst	r25, 7
 760:	3e f4       	brtc	.+14     	; 0x770 <__floatsisf+0x12>
 762:	90 95       	com	r25
 764:	80 95       	com	r24
 766:	70 95       	com	r23
 768:	61 95       	neg	r22
 76a:	7f 4f       	sbci	r23, 0xFF	; 255
 76c:	8f 4f       	sbci	r24, 0xFF	; 255
 76e:	9f 4f       	sbci	r25, 0xFF	; 255
 770:	99 23       	and	r25, r25
 772:	a9 f0       	breq	.+42     	; 0x79e <__floatsisf+0x40>
 774:	f9 2f       	mov	r31, r25
 776:	96 e9       	ldi	r25, 0x96	; 150
 778:	bb 27       	eor	r27, r27
 77a:	93 95       	inc	r25
 77c:	f6 95       	lsr	r31
 77e:	87 95       	ror	r24
 780:	77 95       	ror	r23
 782:	67 95       	ror	r22
 784:	b7 95       	ror	r27
 786:	f1 11       	cpse	r31, r1
 788:	f8 cf       	rjmp	.-16     	; 0x77a <__floatsisf+0x1c>
 78a:	fa f4       	brpl	.+62     	; 0x7ca <__floatsisf+0x6c>
 78c:	bb 0f       	add	r27, r27
 78e:	11 f4       	brne	.+4      	; 0x794 <__floatsisf+0x36>
 790:	60 ff       	sbrs	r22, 0
 792:	1b c0       	rjmp	.+54     	; 0x7ca <__floatsisf+0x6c>
 794:	6f 5f       	subi	r22, 0xFF	; 255
 796:	7f 4f       	sbci	r23, 0xFF	; 255
 798:	8f 4f       	sbci	r24, 0xFF	; 255
 79a:	9f 4f       	sbci	r25, 0xFF	; 255
 79c:	16 c0       	rjmp	.+44     	; 0x7ca <__floatsisf+0x6c>
 79e:	88 23       	and	r24, r24
 7a0:	11 f0       	breq	.+4      	; 0x7a6 <__floatsisf+0x48>
 7a2:	96 e9       	ldi	r25, 0x96	; 150
 7a4:	11 c0       	rjmp	.+34     	; 0x7c8 <__floatsisf+0x6a>
 7a6:	77 23       	and	r23, r23
 7a8:	21 f0       	breq	.+8      	; 0x7b2 <__floatsisf+0x54>
 7aa:	9e e8       	ldi	r25, 0x8E	; 142
 7ac:	87 2f       	mov	r24, r23
 7ae:	76 2f       	mov	r23, r22
 7b0:	05 c0       	rjmp	.+10     	; 0x7bc <__floatsisf+0x5e>
 7b2:	66 23       	and	r22, r22
 7b4:	71 f0       	breq	.+28     	; 0x7d2 <__floatsisf+0x74>
 7b6:	96 e8       	ldi	r25, 0x86	; 134
 7b8:	86 2f       	mov	r24, r22
 7ba:	70 e0       	ldi	r23, 0x00	; 0
 7bc:	60 e0       	ldi	r22, 0x00	; 0
 7be:	2a f0       	brmi	.+10     	; 0x7ca <__floatsisf+0x6c>
 7c0:	9a 95       	dec	r25
 7c2:	66 0f       	add	r22, r22
 7c4:	77 1f       	adc	r23, r23
 7c6:	88 1f       	adc	r24, r24
 7c8:	da f7       	brpl	.-10     	; 0x7c0 <__floatsisf+0x62>
 7ca:	88 0f       	add	r24, r24
 7cc:	96 95       	lsr	r25
 7ce:	87 95       	ror	r24
 7d0:	97 f9       	bld	r25, 7
 7d2:	08 95       	ret

000007d4 <__fp_inf>:
 7d4:	97 f9       	bld	r25, 7
 7d6:	9f 67       	ori	r25, 0x7F	; 127
 7d8:	80 e8       	ldi	r24, 0x80	; 128
 7da:	70 e0       	ldi	r23, 0x00	; 0
 7dc:	60 e0       	ldi	r22, 0x00	; 0
 7de:	08 95       	ret

000007e0 <__fp_nan>:
 7e0:	9f ef       	ldi	r25, 0xFF	; 255
 7e2:	80 ec       	ldi	r24, 0xC0	; 192
 7e4:	08 95       	ret

000007e6 <__fp_pscA>:
 7e6:	00 24       	eor	r0, r0
 7e8:	0a 94       	dec	r0
 7ea:	16 16       	cp	r1, r22
 7ec:	17 06       	cpc	r1, r23
 7ee:	18 06       	cpc	r1, r24
 7f0:	09 06       	cpc	r0, r25
 7f2:	08 95       	ret

000007f4 <__fp_pscB>:
 7f4:	00 24       	eor	r0, r0
 7f6:	0a 94       	dec	r0
 7f8:	12 16       	cp	r1, r18
 7fa:	13 06       	cpc	r1, r19
 7fc:	14 06       	cpc	r1, r20
 7fe:	05 06       	cpc	r0, r21
 800:	08 95       	ret

00000802 <__fp_round>:
 802:	09 2e       	mov	r0, r25
 804:	03 94       	inc	r0
 806:	00 0c       	add	r0, r0
 808:	11 f4       	brne	.+4      	; 0x80e <__fp_round+0xc>
 80a:	88 23       	and	r24, r24
 80c:	52 f0       	brmi	.+20     	; 0x822 <__fp_round+0x20>
 80e:	bb 0f       	add	r27, r27
 810:	40 f4       	brcc	.+16     	; 0x822 <__fp_round+0x20>
 812:	bf 2b       	or	r27, r31
 814:	11 f4       	brne	.+4      	; 0x81a <__fp_round+0x18>
 816:	60 ff       	sbrs	r22, 0
 818:	04 c0       	rjmp	.+8      	; 0x822 <__fp_round+0x20>
 81a:	6f 5f       	subi	r22, 0xFF	; 255
 81c:	7f 4f       	sbci	r23, 0xFF	; 255
 81e:	8f 4f       	sbci	r24, 0xFF	; 255
 820:	9f 4f       	sbci	r25, 0xFF	; 255
 822:	08 95       	ret

00000824 <__fp_split3>:
 824:	57 fd       	sbrc	r21, 7
 826:	90 58       	subi	r25, 0x80	; 128
 828:	44 0f       	add	r20, r20
 82a:	55 1f       	adc	r21, r21
 82c:	59 f0       	breq	.+22     	; 0x844 <__fp_splitA+0x10>
 82e:	5f 3f       	cpi	r21, 0xFF	; 255
 830:	71 f0       	breq	.+28     	; 0x84e <__fp_splitA+0x1a>
 832:	47 95       	ror	r20

00000834 <__fp_splitA>:
 834:	88 0f       	add	r24, r24
 836:	97 fb       	bst	r25, 7
 838:	99 1f       	adc	r25, r25
 83a:	61 f0       	breq	.+24     	; 0x854 <__fp_splitA+0x20>
 83c:	9f 3f       	cpi	r25, 0xFF	; 255
 83e:	79 f0       	breq	.+30     	; 0x85e <__fp_splitA+0x2a>
 840:	87 95       	ror	r24
 842:	08 95       	ret
 844:	12 16       	cp	r1, r18
 846:	13 06       	cpc	r1, r19
 848:	14 06       	cpc	r1, r20
 84a:	55 1f       	adc	r21, r21
 84c:	f2 cf       	rjmp	.-28     	; 0x832 <__fp_split3+0xe>
 84e:	46 95       	lsr	r20
 850:	f1 df       	rcall	.-30     	; 0x834 <__fp_splitA>
 852:	08 c0       	rjmp	.+16     	; 0x864 <__fp_splitA+0x30>
 854:	16 16       	cp	r1, r22
 856:	17 06       	cpc	r1, r23
 858:	18 06       	cpc	r1, r24
 85a:	99 1f       	adc	r25, r25
 85c:	f1 cf       	rjmp	.-30     	; 0x840 <__fp_splitA+0xc>
 85e:	86 95       	lsr	r24
 860:	71 05       	cpc	r23, r1
 862:	61 05       	cpc	r22, r1
 864:	08 94       	sec
 866:	08 95       	ret

00000868 <__fp_zero>:
 868:	e8 94       	clt

0000086a <__fp_szero>:
 86a:	bb 27       	eor	r27, r27
 86c:	66 27       	eor	r22, r22
 86e:	77 27       	eor	r23, r23
 870:	cb 01       	movw	r24, r22
 872:	97 f9       	bld	r25, 7
 874:	08 95       	ret

00000876 <__mulsf3>:
 876:	0e 94 4e 04 	call	0x89c	; 0x89c <__mulsf3x>
 87a:	0c 94 01 04 	jmp	0x802	; 0x802 <__fp_round>
 87e:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__fp_pscA>
 882:	38 f0       	brcs	.+14     	; 0x892 <__mulsf3+0x1c>
 884:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__fp_pscB>
 888:	20 f0       	brcs	.+8      	; 0x892 <__mulsf3+0x1c>
 88a:	95 23       	and	r25, r21
 88c:	11 f0       	breq	.+4      	; 0x892 <__mulsf3+0x1c>
 88e:	0c 94 ea 03 	jmp	0x7d4	; 0x7d4 <__fp_inf>
 892:	0c 94 f0 03 	jmp	0x7e0	; 0x7e0 <__fp_nan>
 896:	11 24       	eor	r1, r1
 898:	0c 94 35 04 	jmp	0x86a	; 0x86a <__fp_szero>

0000089c <__mulsf3x>:
 89c:	0e 94 12 04 	call	0x824	; 0x824 <__fp_split3>
 8a0:	70 f3       	brcs	.-36     	; 0x87e <__mulsf3+0x8>

000008a2 <__mulsf3_pse>:
 8a2:	95 9f       	mul	r25, r21
 8a4:	c1 f3       	breq	.-16     	; 0x896 <__mulsf3+0x20>
 8a6:	95 0f       	add	r25, r21
 8a8:	50 e0       	ldi	r21, 0x00	; 0
 8aa:	55 1f       	adc	r21, r21
 8ac:	62 9f       	mul	r22, r18
 8ae:	f0 01       	movw	r30, r0
 8b0:	72 9f       	mul	r23, r18
 8b2:	bb 27       	eor	r27, r27
 8b4:	f0 0d       	add	r31, r0
 8b6:	b1 1d       	adc	r27, r1
 8b8:	63 9f       	mul	r22, r19
 8ba:	aa 27       	eor	r26, r26
 8bc:	f0 0d       	add	r31, r0
 8be:	b1 1d       	adc	r27, r1
 8c0:	aa 1f       	adc	r26, r26
 8c2:	64 9f       	mul	r22, r20
 8c4:	66 27       	eor	r22, r22
 8c6:	b0 0d       	add	r27, r0
 8c8:	a1 1d       	adc	r26, r1
 8ca:	66 1f       	adc	r22, r22
 8cc:	82 9f       	mul	r24, r18
 8ce:	22 27       	eor	r18, r18
 8d0:	b0 0d       	add	r27, r0
 8d2:	a1 1d       	adc	r26, r1
 8d4:	62 1f       	adc	r22, r18
 8d6:	73 9f       	mul	r23, r19
 8d8:	b0 0d       	add	r27, r0
 8da:	a1 1d       	adc	r26, r1
 8dc:	62 1f       	adc	r22, r18
 8de:	83 9f       	mul	r24, r19
 8e0:	a0 0d       	add	r26, r0
 8e2:	61 1d       	adc	r22, r1
 8e4:	22 1f       	adc	r18, r18
 8e6:	74 9f       	mul	r23, r20
 8e8:	33 27       	eor	r19, r19
 8ea:	a0 0d       	add	r26, r0
 8ec:	61 1d       	adc	r22, r1
 8ee:	23 1f       	adc	r18, r19
 8f0:	84 9f       	mul	r24, r20
 8f2:	60 0d       	add	r22, r0
 8f4:	21 1d       	adc	r18, r1
 8f6:	82 2f       	mov	r24, r18
 8f8:	76 2f       	mov	r23, r22
 8fa:	6a 2f       	mov	r22, r26
 8fc:	11 24       	eor	r1, r1
 8fe:	9f 57       	subi	r25, 0x7F	; 127
 900:	50 40       	sbci	r21, 0x00	; 0
 902:	9a f0       	brmi	.+38     	; 0x92a <__stack+0x2b>
 904:	f1 f0       	breq	.+60     	; 0x942 <__stack+0x43>
 906:	88 23       	and	r24, r24
 908:	4a f0       	brmi	.+18     	; 0x91c <__stack+0x1d>
 90a:	ee 0f       	add	r30, r30
 90c:	ff 1f       	adc	r31, r31
 90e:	bb 1f       	adc	r27, r27
 910:	66 1f       	adc	r22, r22
 912:	77 1f       	adc	r23, r23
 914:	88 1f       	adc	r24, r24
 916:	91 50       	subi	r25, 0x01	; 1
 918:	50 40       	sbci	r21, 0x00	; 0
 91a:	a9 f7       	brne	.-22     	; 0x906 <__stack+0x7>
 91c:	9e 3f       	cpi	r25, 0xFE	; 254
 91e:	51 05       	cpc	r21, r1
 920:	80 f0       	brcs	.+32     	; 0x942 <__stack+0x43>
 922:	0c 94 ea 03 	jmp	0x7d4	; 0x7d4 <__fp_inf>
 926:	0c 94 35 04 	jmp	0x86a	; 0x86a <__fp_szero>
 92a:	5f 3f       	cpi	r21, 0xFF	; 255
 92c:	e4 f3       	brlt	.-8      	; 0x926 <__stack+0x27>
 92e:	98 3e       	cpi	r25, 0xE8	; 232
 930:	d4 f3       	brlt	.-12     	; 0x926 <__stack+0x27>
 932:	86 95       	lsr	r24
 934:	77 95       	ror	r23
 936:	67 95       	ror	r22
 938:	b7 95       	ror	r27
 93a:	f7 95       	ror	r31
 93c:	e7 95       	ror	r30
 93e:	9f 5f       	subi	r25, 0xFF	; 255
 940:	c1 f7       	brne	.-16     	; 0x932 <__stack+0x33>
 942:	fe 2b       	or	r31, r30
 944:	88 0f       	add	r24, r24
 946:	91 1d       	adc	r25, r1
 948:	96 95       	lsr	r25
 94a:	87 95       	ror	r24
 94c:	97 f9       	bld	r25, 7
 94e:	08 95       	ret

00000950 <round>:
 950:	0e 94 1a 04 	call	0x834	; 0x834 <__fp_splitA>
 954:	e8 f0       	brcs	.+58     	; 0x990 <round+0x40>
 956:	9e 37       	cpi	r25, 0x7E	; 126
 958:	e8 f0       	brcs	.+58     	; 0x994 <round+0x44>
 95a:	96 39       	cpi	r25, 0x96	; 150
 95c:	b8 f4       	brcc	.+46     	; 0x98c <round+0x3c>
 95e:	9e 38       	cpi	r25, 0x8E	; 142
 960:	48 f4       	brcc	.+18     	; 0x974 <round+0x24>
 962:	67 2f       	mov	r22, r23
 964:	78 2f       	mov	r23, r24
 966:	88 27       	eor	r24, r24
 968:	98 5f       	subi	r25, 0xF8	; 248
 96a:	f9 cf       	rjmp	.-14     	; 0x95e <round+0xe>
 96c:	86 95       	lsr	r24
 96e:	77 95       	ror	r23
 970:	67 95       	ror	r22
 972:	93 95       	inc	r25
 974:	95 39       	cpi	r25, 0x95	; 149
 976:	d0 f3       	brcs	.-12     	; 0x96c <round+0x1c>
 978:	b6 2f       	mov	r27, r22
 97a:	b1 70       	andi	r27, 0x01	; 1
 97c:	6b 0f       	add	r22, r27
 97e:	71 1d       	adc	r23, r1
 980:	81 1d       	adc	r24, r1
 982:	20 f4       	brcc	.+8      	; 0x98c <round+0x3c>
 984:	87 95       	ror	r24
 986:	77 95       	ror	r23
 988:	67 95       	ror	r22
 98a:	93 95       	inc	r25
 98c:	0c 94 cc 04 	jmp	0x998	; 0x998 <__fp_mintl>
 990:	0c 94 e7 04 	jmp	0x9ce	; 0x9ce <__fp_mpack>
 994:	0c 94 35 04 	jmp	0x86a	; 0x86a <__fp_szero>

00000998 <__fp_mintl>:
 998:	88 23       	and	r24, r24
 99a:	71 f4       	brne	.+28     	; 0x9b8 <__fp_mintl+0x20>
 99c:	77 23       	and	r23, r23
 99e:	21 f0       	breq	.+8      	; 0x9a8 <__fp_mintl+0x10>
 9a0:	98 50       	subi	r25, 0x08	; 8
 9a2:	87 2b       	or	r24, r23
 9a4:	76 2f       	mov	r23, r22
 9a6:	07 c0       	rjmp	.+14     	; 0x9b6 <__fp_mintl+0x1e>
 9a8:	66 23       	and	r22, r22
 9aa:	11 f4       	brne	.+4      	; 0x9b0 <__fp_mintl+0x18>
 9ac:	99 27       	eor	r25, r25
 9ae:	0d c0       	rjmp	.+26     	; 0x9ca <__fp_mintl+0x32>
 9b0:	90 51       	subi	r25, 0x10	; 16
 9b2:	86 2b       	or	r24, r22
 9b4:	70 e0       	ldi	r23, 0x00	; 0
 9b6:	60 e0       	ldi	r22, 0x00	; 0
 9b8:	2a f0       	brmi	.+10     	; 0x9c4 <__fp_mintl+0x2c>
 9ba:	9a 95       	dec	r25
 9bc:	66 0f       	add	r22, r22
 9be:	77 1f       	adc	r23, r23
 9c0:	88 1f       	adc	r24, r24
 9c2:	da f7       	brpl	.-10     	; 0x9ba <__fp_mintl+0x22>
 9c4:	88 0f       	add	r24, r24
 9c6:	96 95       	lsr	r25
 9c8:	87 95       	ror	r24
 9ca:	97 f9       	bld	r25, 7
 9cc:	08 95       	ret

000009ce <__fp_mpack>:
 9ce:	9f 3f       	cpi	r25, 0xFF	; 255
 9d0:	31 f0       	breq	.+12     	; 0x9de <__fp_mpack_finite+0xc>

000009d2 <__fp_mpack_finite>:
 9d2:	91 50       	subi	r25, 0x01	; 1
 9d4:	20 f4       	brcc	.+8      	; 0x9de <__fp_mpack_finite+0xc>
 9d6:	87 95       	ror	r24
 9d8:	77 95       	ror	r23
 9da:	67 95       	ror	r22
 9dc:	b7 95       	ror	r27
 9de:	88 0f       	add	r24, r24
 9e0:	91 1d       	adc	r25, r1
 9e2:	96 95       	lsr	r25
 9e4:	87 95       	ror	r24
 9e6:	97 f9       	bld	r25, 7
 9e8:	08 95       	ret

000009ea <_exit>:
 9ea:	f8 94       	cli

000009ec <__stop_program>:
 9ec:	ff cf       	rjmp	.-2      	; 0x9ec <__stop_program>

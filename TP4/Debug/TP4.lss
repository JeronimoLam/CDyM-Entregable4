
TP4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000a30  00000ac4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a30  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000142  00800106  00800106  00000aca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000aca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000afc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  00000b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001462  00000000  00000000  00000d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b32  00000000  00000000  0000218e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d98  00000000  00000000  00002cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b4  00000000  00000000  00003a58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007af  00000000  00000000  00003e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000584  00000000  00000000  000045bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00004b3f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 03 03 	jmp	0x606	; 0x606 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e3       	ldi	r30, 0x30	; 48
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 34       	cpi	r26, 0x48	; 72
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 87 01 	call	0x30e	; 0x30e <main>
  9e:	0c 94 16 05 	jmp	0xa2c	; 0xa2c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LDR_config>:
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
  ac:	87 e8       	ldi	r24, 0x87	; 135
  ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  b2:	ec e7       	ldi	r30, 0x7C	; 124
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	10 82       	st	Z, r1
  b8:	80 81       	ld	r24, Z
  ba:	80 64       	ori	r24, 0x40	; 64
  bc:	80 83       	st	Z, r24
  be:	08 95       	ret

000000c0 <LDR_Update>:
  c0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
  c4:	81 11       	cpse	r24, r1
  c6:	08 c0       	rjmp	.+16     	; 0xd8 <LDR_Update+0x18>
  c8:	ea e7       	ldi	r30, 0x7A	; 122
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	80 64       	ori	r24, 0x40	; 64
  d0:	80 83       	st	Z, r24
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
  d8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  dc:	08 95       	ret

000000de <LDR_get_value>:
  de:	ea e7       	ldi	r30, 0x7A	; 122
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	80 64       	ori	r24, 0x40	; 64
  e6:	80 83       	st	Z, r24
  e8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  ec:	84 ff       	sbrs	r24, 4
  ee:	fc cf       	rjmp	.-8      	; 0xe8 <LDR_get_value+0xa>
  f0:	ea e7       	ldi	r30, 0x7A	; 122
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	80 61       	ori	r24, 0x10	; 16
  f8:	80 83       	st	Z, r24
  fa:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  fe:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 102:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <result+0x1>
 106:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <result>
 10a:	08 95       	ret

0000010c <distributeValues>:
void LEDS_setFinalGreen(uint8_t value){
	final_green = value;
}

void LEDS_setFinalBlue(uint8_t value){
	final_blue = value;
 10c:	cf 93       	push	r28
 10e:	99 e2       	ldi	r25, 0x29	; 41
 110:	89 9f       	mul	r24, r25
 112:	a1 2d       	mov	r26, r1
 114:	11 24       	eor	r1, r1
 116:	a2 95       	swap	r26
 118:	af 70       	andi	r26, 0x0F	; 15
 11a:	24 e6       	ldi	r18, 0x64	; 100
 11c:	c8 2f       	mov	r28, r24
 11e:	a2 9f       	mul	r26, r18
 120:	c0 19       	sub	r28, r0
 122:	11 24       	eor	r1, r1
 124:	69 9f       	mul	r22, r25
 126:	71 2d       	mov	r23, r1
 128:	11 24       	eor	r1, r1
 12a:	72 95       	swap	r23
 12c:	7f 70       	andi	r23, 0x0F	; 15
 12e:	b6 2f       	mov	r27, r22
 130:	72 9f       	mul	r23, r18
 132:	b0 19       	sub	r27, r0
 134:	11 24       	eor	r1, r1
 136:	49 9f       	mul	r20, r25
 138:	51 2d       	mov	r21, r1
 13a:	11 24       	eor	r1, r1
 13c:	52 95       	swap	r21
 13e:	5f 70       	andi	r21, 0x0F	; 15
 140:	64 2f       	mov	r22, r20
 142:	52 9f       	mul	r21, r18
 144:	60 19       	sub	r22, r0
 146:	11 24       	eor	r1, r1
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	21 c0       	rjmp	.+66     	; 0x18e <distributeValues+0x82>
 14c:	28 2f       	mov	r18, r24
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	8c 17       	cp	r24, r28
 152:	18 f4       	brcc	.+6      	; 0x15a <distributeValues+0x4e>
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	9a 0f       	add	r25, r26
 158:	01 c0       	rjmp	.+2      	; 0x15c <distributeValues+0x50>
 15a:	9a 2f       	mov	r25, r26
 15c:	f9 01       	movw	r30, r18
 15e:	ef 52       	subi	r30, 0x2F	; 47
 160:	fe 4f       	sbci	r31, 0xFE	; 254
 162:	90 83       	st	Z, r25
 164:	8b 17       	cp	r24, r27
 166:	18 f4       	brcc	.+6      	; 0x16e <distributeValues+0x62>
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	97 0f       	add	r25, r23
 16c:	01 c0       	rjmp	.+2      	; 0x170 <distributeValues+0x64>
 16e:	97 2f       	mov	r25, r23
 170:	f9 01       	movw	r30, r18
 172:	e3 59       	subi	r30, 0x93	; 147
 174:	fe 4f       	sbci	r31, 0xFE	; 254
 176:	90 83       	st	Z, r25
 178:	86 17       	cp	r24, r22
 17a:	18 f4       	brcc	.+6      	; 0x182 <distributeValues+0x76>
 17c:	91 e0       	ldi	r25, 0x01	; 1
 17e:	95 0f       	add	r25, r21
 180:	01 c0       	rjmp	.+2      	; 0x184 <distributeValues+0x78>
 182:	95 2f       	mov	r25, r21
 184:	f9 01       	movw	r30, r18
 186:	e7 5f       	subi	r30, 0xF7	; 247
 188:	fe 4f       	sbci	r31, 0xFE	; 254
 18a:	90 83       	st	Z, r25
 18c:	8f 5f       	subi	r24, 0xFF	; 255
 18e:	84 36       	cpi	r24, 0x64	; 100
 190:	e8 f2       	brcs	.-70     	; 0x14c <distributeValues+0x40>
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <LEDS_setRed>:
 196:	cf 93       	push	r28
 198:	c8 2f       	mov	r28, r24
 19a:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <PWM_set_comp_value>
 19e:	c0 93 37 02 	sts	0x0237, r28	; 0x800237 <red>
 1a2:	cf 91       	pop	r28
 1a4:	08 95       	ret

000001a6 <LEDS_setGreen>:
 1a6:	2f ef       	ldi	r18, 0xFF	; 255
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	28 1b       	sub	r18, r24
 1ac:	31 09       	sbc	r19, r1
 1ae:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 1b2:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 1b6:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <green>
 1ba:	08 95       	ret

000001bc <LEDS_setBlue>:
 1bc:	2f ef       	ldi	r18, 0xFF	; 255
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	28 1b       	sub	r18, r24
 1c2:	31 09       	sbc	r19, r1
 1c4:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1c8:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 1cc:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <blue>
 1d0:	08 95       	ret

000001d2 <LEDS_init>:
 1d2:	84 b1       	in	r24, 0x04	; 4
 1d4:	86 62       	ori	r24, 0x26	; 38
 1d6:	84 b9       	out	0x04, r24	; 4
 1d8:	85 b1       	in	r24, 0x05	; 5
 1da:	80 62       	ori	r24, 0x20	; 32
 1dc:	85 b9       	out	0x05, r24	; 5
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	0e 94 cb 00 	call	0x196	; 0x196 <LEDS_setRed>
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LEDS_setGreen>
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	0e 94 de 00 	call	0x1bc	; 0x1bc <LEDS_setBlue>
 1f0:	20 e0       	ldi	r18, 0x00	; 0
 1f2:	0f c0       	rjmp	.+30     	; 0x212 <LEDS_init+0x40>
 1f4:	82 2f       	mov	r24, r18
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	fc 01       	movw	r30, r24
 1fa:	ef 52       	subi	r30, 0x2F	; 47
 1fc:	fe 4f       	sbci	r31, 0xFE	; 254
 1fe:	10 82       	st	Z, r1
 200:	fc 01       	movw	r30, r24
 202:	e3 59       	subi	r30, 0x93	; 147
 204:	fe 4f       	sbci	r31, 0xFE	; 254
 206:	10 82       	st	Z, r1
 208:	fc 01       	movw	r30, r24
 20a:	e7 5f       	subi	r30, 0xF7	; 247
 20c:	fe 4f       	sbci	r31, 0xFE	; 254
 20e:	10 82       	st	Z, r1
 210:	2f 5f       	subi	r18, 0xFF	; 255
 212:	24 36       	cpi	r18, 0x64	; 100
 214:	78 f3       	brcs	.-34     	; 0x1f4 <LEDS_init+0x22>
 216:	08 95       	ret

00000218 <LEDS_getRed>:
 218:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <red>
 21c:	08 95       	ret

0000021e <LEDS_getGreen>:
 21e:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <green>
 222:	08 95       	ret

00000224 <LEDS_getBlue>:
 224:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <blue>
 228:	08 95       	ret

0000022a <LEDS_getFinalRed>:
}

uint8_t LEDS_getFinalRed(){
	return final_red;
}
 22a:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <final_red>
 22e:	08 95       	ret

00000230 <LEDS_getFinalGreen>:

uint8_t LEDS_getFinalGreen(){
	return final_green;
}
 230:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <final_green>
 234:	08 95       	ret

00000236 <LEDS_getFinalBlue>:

uint8_t LEDS_getFinalBlue(){
	return final_blue;
}
 236:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <final_blue>
 23a:	08 95       	ret

0000023c <LEDS_setFinalRGB>:

void LEDS_setFinalRGB(uint8_t valueR, uint8_t valueG, uint8_t valueB){
	final_red = valueR;
 23c:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <final_red>
	final_green = valueG;
 240:	60 93 39 02 	sts	0x0239, r22	; 0x800239 <final_green>
	final_blue = valueB;
 244:	40 93 38 02 	sts	0x0238, r20	; 0x800238 <final_blue>
	distributeValues(valueR, valueG, valueB);
 248:	0e 94 86 00 	call	0x10c	; 0x10c <distributeValues>
 24c:	08 95       	ret

0000024e <LEDS_incrementRed>:
}

void LEDS_incrementRed(uint16_t value){
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	ec 01       	movw	r28, r24
	LEDS_setRed(LEDS_getRed() + red_increments[value]);
 254:	0e 94 0c 01 	call	0x218	; 0x218 <LEDS_getRed>
 258:	cf 52       	subi	r28, 0x2F	; 47
 25a:	de 4f       	sbci	r29, 0xFE	; 254
 25c:	98 81       	ld	r25, Y
 25e:	89 0f       	add	r24, r25
 260:	0e 94 cb 00 	call	0x196	; 0x196 <LEDS_setRed>
}
 264:	df 91       	pop	r29
 266:	cf 91       	pop	r28
 268:	08 95       	ret

0000026a <LEDS_incrementGreen>:

void LEDS_incrementGreen(uint16_t value){
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	ec 01       	movw	r28, r24
	LEDS_setGreen(LEDS_getGreen() + green_increments[value]);
 270:	0e 94 0f 01 	call	0x21e	; 0x21e <LEDS_getGreen>
 274:	c3 59       	subi	r28, 0x93	; 147
 276:	de 4f       	sbci	r29, 0xFE	; 254
 278:	98 81       	ld	r25, Y
 27a:	89 0f       	add	r24, r25
 27c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LEDS_setGreen>
	
}
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	08 95       	ret

00000286 <LEDS_incrementBlue>:

void LEDS_incrementBlue(uint16_t value){
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	ec 01       	movw	r28, r24
	LEDS_setBlue(LEDS_getBlue() + blue_increments[value]);
 28c:	0e 94 12 01 	call	0x224	; 0x224 <LEDS_getBlue>
 290:	c7 5f       	subi	r28, 0xF7	; 247
 292:	de 4f       	sbci	r29, 0xFE	; 254
 294:	98 81       	ld	r25, Y
 296:	89 0f       	add	r24, r25
 298:	0e 94 de 00 	call	0x1bc	; 0x1bc <LEDS_setBlue>
}
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	08 95       	ret

000002a2 <LEDS_decrementRed>:

void LEDS_decrementRed(uint16_t value){
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
 2a6:	ec 01       	movw	r28, r24
	LEDS_setRed(LEDS_getRed() - red_increments[STEPS - 1 - value]);
 2a8:	0e 94 0c 01 	call	0x218	; 0x218 <LEDS_getRed>
 2ac:	e3 e6       	ldi	r30, 0x63	; 99
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	ec 1b       	sub	r30, r28
 2b2:	fd 0b       	sbc	r31, r29
 2b4:	ef 52       	subi	r30, 0x2F	; 47
 2b6:	fe 4f       	sbci	r31, 0xFE	; 254
 2b8:	90 81       	ld	r25, Z
 2ba:	89 1b       	sub	r24, r25
 2bc:	0e 94 cb 00 	call	0x196	; 0x196 <LEDS_setRed>
}
 2c0:	df 91       	pop	r29
 2c2:	cf 91       	pop	r28
 2c4:	08 95       	ret

000002c6 <LEDS_decrementGreen>:

void LEDS_decrementGreen(uint16_t value){
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
 2ca:	ec 01       	movw	r28, r24
	LEDS_setGreen(LEDS_getGreen() - green_increments[STEPS - 1 - value]);
 2cc:	0e 94 0f 01 	call	0x21e	; 0x21e <LEDS_getGreen>
 2d0:	e3 e6       	ldi	r30, 0x63	; 99
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	ec 1b       	sub	r30, r28
 2d6:	fd 0b       	sbc	r31, r29
 2d8:	e3 59       	subi	r30, 0x93	; 147
 2da:	fe 4f       	sbci	r31, 0xFE	; 254
 2dc:	90 81       	ld	r25, Z
 2de:	89 1b       	sub	r24, r25
 2e0:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LEDS_setGreen>
}
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	08 95       	ret

000002ea <LEDS_decrementBlue>:

void LEDS_decrementBlue(uint16_t value){
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
 2ee:	ec 01       	movw	r28, r24
	LEDS_setBlue(LEDS_getBlue() - blue_increments[STEPS - 1- value]);
 2f0:	0e 94 12 01 	call	0x224	; 0x224 <LEDS_getBlue>
 2f4:	e3 e6       	ldi	r30, 0x63	; 99
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	ec 1b       	sub	r30, r28
 2fa:	fd 0b       	sbc	r31, r29
 2fc:	e7 5f       	subi	r30, 0xF7	; 247
 2fe:	fe 4f       	sbci	r31, 0xFE	; 254
 300:	90 81       	ld	r25, Z
 302:	89 1b       	sub	r24, r25
 304:	0e 94 de 00 	call	0x1bc	; 0x1bc <LEDS_setBlue>
}
 308:	df 91       	pop	r29
 30a:	cf 91       	pop	r28
 30c:	08 95       	ret

0000030e <main>:


int main(void)
{
	
	TIMERS_InitTimer0();
 30e:	0e 94 f5 02 	call	0x5ea	; 0x5ea <TIMERS_InitTimer0>
	TIMERS_InitTimer1();
 312:	0e 94 27 03 	call	0x64e	; 0x64e <TIMERS_InitTimer1>
	
	LEDS_init();
 316:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LEDS_init>
	MEF_init();
 31a:	0e 94 a2 01 	call	0x344	; 0x344 <MEF_init>
	LEDS_setFinalRGB(200, 200, 128);
 31e:	40 e8       	ldi	r20, 0x80	; 128
 320:	68 ec       	ldi	r22, 0xC8	; 200
 322:	88 ec       	ldi	r24, 0xC8	; 200
 324:	0e 94 1e 01 	call	0x23c	; 0x23c <LEDS_setFinalRGB>
	
	LDR_config();
 328:	0e 94 53 00 	call	0xa6	; 0xa6 <LDR_config>
	
	PWM_soft_init();
 32c:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <PWM_soft_init>
	
	//Test PB4 como salida y un 1 en la misma
	DDRB |= (1 << PORTB4);
 330:	84 b1       	in	r24, 0x04	; 4
 332:	80 61       	ori	r24, 0x10	; 16
 334:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1 << PORTB4);
 336:	85 b1       	in	r24, 0x05	; 5
 338:	8f 7e       	andi	r24, 0xEF	; 239
 33a:	85 b9       	out	0x05, r24	; 5
	
	sei();
 33c:	78 94       	sei
	
    while(1)
    {
		sEOS_Dispatch_Tasks();
 33e:	0e 94 a0 02 	call	0x540	; 0x540 <sEOS_Dispatch_Tasks>
 342:	fd cf       	rjmp	.-6      	; 0x33e <main+0x30>

00000344 <MEF_init>:
static uint16_t timeOff = 20;
static double pendiente;
static uint16_t desplazamiento;

void MEF_init(){
	state = OFF;
 344:	83 e0       	ldi	r24, 0x03	; 3
 346:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <state>
	stateCount = 0;
 34a:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <stateCount+0x1>
 34e:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <stateCount>

	pendiente = (10-100) / (MIN_SUP_LDR - MAX_INF_LDR);
 352:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <pendiente>
 356:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <pendiente+0x1>
 35a:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <pendiente+0x2>
 35e:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <pendiente+0x3>
	desplazamiento = 100 + round(pendiente * MAX_INF_LDR);
 362:	84 e6       	ldi	r24, 0x64	; 100
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	90 93 3c 02 	sts	0x023C, r25	; 0x80023c <desplazamiento+0x1>
 36a:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <desplazamiento>
 36e:	08 95       	ret

00000370 <update_timeOff>:
}

void  update_timeOff(){
 370:	cf 92       	push	r12
 372:	df 92       	push	r13
 374:	ef 92       	push	r14
 376:	ff 92       	push	r15
	uint16_t LDR_value = LDR_get_value();
 378:	0e 94 6f 00 	call	0xde	; 0xde <LDR_get_value>
	
	// Caso en el que Tparpadeo = 5seg (minima luz o menos)
	if (LDR_value < MAX_INF_LDR){
 37c:	82 33       	cpi	r24, 0x32	; 50
 37e:	91 05       	cpc	r25, r1
 380:	38 f4       	brcc	.+14     	; 0x390 <update_timeOff+0x20>
		timeOff = 1000;
 382:	88 ee       	ldi	r24, 0xE8	; 232
 384:	93 e0       	ldi	r25, 0x03	; 3
 386:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 38a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 38e:	30 c0       	rjmp	.+96     	; 0x3f0 <update_timeOff+0x80>
	}
	// Caso en el que Tparepadeo = 2seg (luz ambiente o mas)
	else if (LDR_value > MIN_SUP_LDR){
 390:	8d 32       	cpi	r24, 0x2D	; 45
 392:	21 e0       	ldi	r18, 0x01	; 1
 394:	92 07       	cpc	r25, r18
 396:	38 f0       	brcs	.+14     	; 0x3a6 <update_timeOff+0x36>
		timeOff = 100;
 398:	84 e6       	ldi	r24, 0x64	; 100
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3a0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 3a4:	25 c0       	rjmp	.+74     	; 0x3f0 <update_timeOff+0x80>
	}
	else {
		timeOff = desplazamiento - round(pendiente*LDR_value); // Parte de la recta con pendiente m negativa
 3a6:	bc 01       	movw	r22, r24
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	0e 94 ce 03 	call	0x79c	; 0x79c <__floatunsisf>
 3b0:	20 91 3d 02 	lds	r18, 0x023D	; 0x80023d <pendiente>
 3b4:	30 91 3e 02 	lds	r19, 0x023E	; 0x80023e <pendiente+0x1>
 3b8:	40 91 3f 02 	lds	r20, 0x023F	; 0x80023f <pendiente+0x2>
 3bc:	50 91 40 02 	lds	r21, 0x0240	; 0x800240 <pendiente+0x3>
 3c0:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <__mulsf3>
 3c4:	0e 94 c9 04 	call	0x992	; 0x992 <round>
 3c8:	6b 01       	movw	r12, r22
 3ca:	7c 01       	movw	r14, r24
 3cc:	60 91 3b 02 	lds	r22, 0x023B	; 0x80023b <desplazamiento>
 3d0:	70 91 3c 02 	lds	r23, 0x023C	; 0x80023c <desplazamiento+0x1>
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	0e 94 ce 03 	call	0x79c	; 0x79c <__floatunsisf>
 3dc:	a7 01       	movw	r20, r14
 3de:	96 01       	movw	r18, r12
 3e0:	0e 94 32 03 	call	0x664	; 0x664 <__subsf3>
 3e4:	0e 94 9f 03 	call	0x73e	; 0x73e <__fixunssfsi>
 3e8:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3ec:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
 3f0:	ff 90       	pop	r15
 3f2:	ef 90       	pop	r14
 3f4:	df 90       	pop	r13
 3f6:	cf 90       	pop	r12
 3f8:	08 95       	ret

000003fa <MEF_Update>:

void MEF_Update(){
	stateCount++;
 3fa:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <stateCount>
 3fe:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <stateCount+0x1>
 402:	01 96       	adiw	r24, 0x01	; 1
 404:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <stateCount+0x1>
 408:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <stateCount>
	
	switch (state){
 40c:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <state>
 410:	81 30       	cpi	r24, 0x01	; 1
 412:	09 f4       	brne	.+2      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 414:	50 c0       	rjmp	.+160    	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
 416:	38 f1       	brcs	.+78     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 418:	82 30       	cpi	r24, 0x02	; 2
 41a:	09 f4       	brne	.+2      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 41c:	6a c0       	rjmp	.+212    	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
 41e:	83 30       	cpi	r24, 0x03	; 3
 420:	09 f0       	breq	.+2      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 422:	8d c0       	rjmp	.+282    	; 0x53e <__EEPROM_REGION_LENGTH__+0x13e>
		case OFF:
			PORTB |= (1<<PORTB4);
 424:	85 b1       	in	r24, 0x05	; 5
 426:	80 61       	ori	r24, 0x10	; 16
 428:	85 b9       	out	0x05, r24	; 5
			
			LEDS_setRed(0);
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	0e 94 cb 00 	call	0x196	; 0x196 <LEDS_setRed>
			LEDS_setGreen(0);
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LEDS_setGreen>
			LEDS_setBlue(0);
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	0e 94 de 00 	call	0x1bc	; 0x1bc <LEDS_setBlue>
			
			update_timeOff();
 43c:	0e 94 b8 01 	call	0x370	; 0x370 <update_timeOff>
			if(stateCount >= timeOff){
 440:	20 91 41 02 	lds	r18, 0x0241	; 0x800241 <stateCount>
 444:	30 91 42 02 	lds	r19, 0x0242	; 0x800242 <stateCount+0x1>
 448:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 44c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 450:	28 17       	cp	r18, r24
 452:	39 07       	cpc	r19, r25
 454:	08 f4       	brcc	.+2      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 456:	73 c0       	rjmp	.+230    	; 0x53e <__EEPROM_REGION_LENGTH__+0x13e>
				state = RAISING;
 458:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <state>
				stateCount = 0;
 45c:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <stateCount+0x1>
 460:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <stateCount>
 464:	08 95       	ret
			}
			break;
			
		case RAISING:
			PORTB |= (1<<PORTB4);
 466:	85 b1       	in	r24, 0x05	; 5
 468:	80 61       	ori	r24, 0x10	; 16
 46a:	85 b9       	out	0x05, r24	; 5
			
			LEDS_incrementRed(stateCount - 1);
 46c:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <stateCount>
 470:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <stateCount+0x1>
 474:	01 97       	sbiw	r24, 0x01	; 1
 476:	0e 94 27 01 	call	0x24e	; 0x24e <LEDS_incrementRed>
			LEDS_incrementGreen(stateCount - 1);
 47a:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <stateCount>
 47e:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <stateCount+0x1>
 482:	01 97       	sbiw	r24, 0x01	; 1
 484:	0e 94 35 01 	call	0x26a	; 0x26a <LEDS_incrementGreen>
			LEDS_incrementBlue(stateCount - 1);
 488:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <stateCount>
 48c:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <stateCount+0x1>
 490:	01 97       	sbiw	r24, 0x01	; 1
 492:	0e 94 43 01 	call	0x286	; 0x286 <LEDS_incrementBlue>
			
			if(stateCount == 100){
 496:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <stateCount>
 49a:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <stateCount+0x1>
 49e:	84 36       	cpi	r24, 0x64	; 100
 4a0:	91 05       	cpc	r25, r1
 4a2:	09 f0       	breq	.+2      	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
 4a4:	4c c0       	rjmp	.+152    	; 0x53e <__EEPROM_REGION_LENGTH__+0x13e>
				state = ON;
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <state>
				stateCount = 0;
 4ac:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <stateCount+0x1>
 4b0:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <stateCount>
 4b4:	08 95       	ret
			}
			break;
			
		case ON:
			PORTB &= ~(1<<PORTB4);
 4b6:	85 b1       	in	r24, 0x05	; 5
 4b8:	8f 7e       	andi	r24, 0xEF	; 239
 4ba:	85 b9       	out	0x05, r24	; 5

			
			LEDS_setRed(LEDS_getFinalRed());
 4bc:	0e 94 15 01 	call	0x22a	; 0x22a <LEDS_getFinalRed>
 4c0:	0e 94 cb 00 	call	0x196	; 0x196 <LEDS_setRed>
			LEDS_setGreen(LEDS_getFinalGreen());
 4c4:	0e 94 18 01 	call	0x230	; 0x230 <LEDS_getFinalGreen>
 4c8:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LEDS_setGreen>
			LEDS_setBlue(LEDS_getFinalBlue());
 4cc:	0e 94 1b 01 	call	0x236	; 0x236 <LEDS_getFinalBlue>
 4d0:	0e 94 de 00 	call	0x1bc	; 0x1bc <LEDS_setBlue>
			
			if(stateCount == 200){
 4d4:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <stateCount>
 4d8:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <stateCount+0x1>
 4dc:	88 3c       	cpi	r24, 0xC8	; 200
 4de:	91 05       	cpc	r25, r1
 4e0:	71 f5       	brne	.+92     	; 0x53e <__EEPROM_REGION_LENGTH__+0x13e>
				state = FALLING;
 4e2:	82 e0       	ldi	r24, 0x02	; 2
 4e4:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <state>
				stateCount = 0;
 4e8:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <stateCount+0x1>
 4ec:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <stateCount>
 4f0:	08 95       	ret
			}
			break;
			
		case FALLING:
			PORTB |= (1<<PORTB4);
 4f2:	85 b1       	in	r24, 0x05	; 5
 4f4:	80 61       	ori	r24, 0x10	; 16
 4f6:	85 b9       	out	0x05, r24	; 5
			
			LEDS_decrementRed(stateCount - 1);
 4f8:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <stateCount>
 4fc:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <stateCount+0x1>
 500:	01 97       	sbiw	r24, 0x01	; 1
 502:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LEDS_decrementRed>
			LEDS_decrementGreen(stateCount - 1);
 506:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <stateCount>
 50a:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <stateCount+0x1>
 50e:	01 97       	sbiw	r24, 0x01	; 1
 510:	0e 94 63 01 	call	0x2c6	; 0x2c6 <LEDS_decrementGreen>
			LEDS_decrementBlue(stateCount - 1);
 514:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <stateCount>
 518:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <stateCount+0x1>
 51c:	01 97       	sbiw	r24, 0x01	; 1
 51e:	0e 94 75 01 	call	0x2ea	; 0x2ea <LEDS_decrementBlue>
			
			if(stateCount == 100){
 522:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <stateCount>
 526:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <stateCount+0x1>
 52a:	84 36       	cpi	r24, 0x64	; 100
 52c:	91 05       	cpc	r25, r1
 52e:	39 f4       	brne	.+14     	; 0x53e <__EEPROM_REGION_LENGTH__+0x13e>
				state = OFF;
 530:	83 e0       	ldi	r24, 0x03	; 3
 532:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <state>
				stateCount = 0;
 536:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <stateCount+0x1>
 53a:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <stateCount>
 53e:	08 95       	ret

00000540 <sEOS_Dispatch_Tasks>:
static volatile uint16_t counter_LDR = 3;
static volatile uint8_t FLAG_LDR = 0;


void sEOS_Dispatch_Tasks(){
	if(FLAG_MEF){
 540:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <FLAG_MEF>
 544:	88 23       	and	r24, r24
 546:	29 f0       	breq	.+10     	; 0x552 <sEOS_Dispatch_Tasks+0x12>
		MEF_Update();
 548:	0e 94 fd 01 	call	0x3fa	; 0x3fa <MEF_Update>
		FLAG_MEF = 0;	
 54c:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <FLAG_MEF>
 550:	08 95       	ret
	}
	else if (FLAG_LDR){
 552:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <FLAG_LDR>
 556:	88 23       	and	r24, r24
 558:	21 f0       	breq	.+8      	; 0x562 <sEOS_Dispatch_Tasks+0x22>
		LDR_Update();
 55a:	0e 94 60 00 	call	0xc0	; 0xc0 <LDR_Update>
		FLAG_LDR = 0;
 55e:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <FLAG_LDR>
 562:	08 95       	ret

00000564 <sEOS_SCH_Tasks>:
	}
}

void sEOS_SCH_Tasks(){
	//Cada 50 ms pone el flag en 1
	if (++counter_MEF == 78) {
 564:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <counter_MEF>
 568:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <counter_MEF+0x1>
 56c:	01 96       	adiw	r24, 0x01	; 1
 56e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <counter_MEF+0x1>
 572:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <counter_MEF>
 576:	8e 34       	cpi	r24, 0x4E	; 78
 578:	91 05       	cpc	r25, r1
 57a:	39 f4       	brne	.+14     	; 0x58a <sEOS_SCH_Tasks+0x26>
		FLAG_MEF = 1;
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <FLAG_MEF>
		counter_MEF = 0;
 582:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <counter_MEF+0x1>
 586:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <counter_MEF>
	}
/*	if (++counter_LDR == 5) {
		FLAG_LDR = 1;
		counter_LDR = 0;
	} DESCOMENTAR PARA NO LDR POR TIME TRIGGERED*/ 
	PWM_soft_Update();
 58a:	0e 94 c8 02 	call	0x590	; 0x590 <PWM_soft_Update>
 58e:	08 95       	ret

00000590 <PWM_soft_Update>:
 590:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <PWM_position>
 594:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <PWM_position+0x1>
 598:	01 96       	adiw	r24, 0x01	; 1
 59a:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <PWM_position+0x1>
 59e:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <PWM_position>
 5a2:	8f 3f       	cpi	r24, 0xFF	; 255
 5a4:	91 05       	cpc	r25, r1
 5a6:	49 f0       	breq	.+18     	; 0x5ba <PWM_soft_Update+0x2a>
 5a8:	40 f0       	brcs	.+16     	; 0x5ba <PWM_soft_Update+0x2a>
 5aa:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <PWM_position+0x1>
 5ae:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <PWM_position>
 5b2:	85 b1       	in	r24, 0x05	; 5
 5b4:	80 62       	ori	r24, 0x20	; 32
 5b6:	85 b9       	out	0x05, r24	; 5
 5b8:	08 95       	ret
 5ba:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <PWM_DELTA>
 5be:	30 e0       	ldi	r19, 0x00	; 0
 5c0:	82 17       	cp	r24, r18
 5c2:	93 07       	cpc	r25, r19
 5c4:	20 f4       	brcc	.+8      	; 0x5ce <PWM_soft_Update+0x3e>
 5c6:	85 b1       	in	r24, 0x05	; 5
 5c8:	8f 7d       	andi	r24, 0xDF	; 223
 5ca:	85 b9       	out	0x05, r24	; 5
 5cc:	08 95       	ret
 5ce:	85 b1       	in	r24, 0x05	; 5
 5d0:	80 62       	ori	r24, 0x20	; 32
 5d2:	85 b9       	out	0x05, r24	; 5
 5d4:	08 95       	ret

000005d6 <PWM_soft_init>:
 5d6:	84 b1       	in	r24, 0x04	; 4
 5d8:	80 62       	ori	r24, 0x20	; 32
 5da:	84 b9       	out	0x04, r24	; 4
 5dc:	85 b1       	in	r24, 0x05	; 5
 5de:	8f 7d       	andi	r24, 0xDF	; 223
 5e0:	85 b9       	out	0x05, r24	; 5
 5e2:	08 95       	ret

000005e4 <PWM_set_comp_value>:
 5e4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <PWM_DELTA>
 5e8:	08 95       	ret

000005ea <TIMERS_InitTimer0>:
	OCR0A = 249;
	*/
	
	// Interrupcion cada 64 us
	// Prescaler en 8
	TCCR0A |= (1 << WGM01); // Modo CTC
 5ea:	84 b5       	in	r24, 0x24	; 36
 5ec:	82 60       	ori	r24, 0x02	; 2
 5ee:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS01);
 5f0:	85 b5       	in	r24, 0x25	; 37
 5f2:	82 60       	ori	r24, 0x02	; 2
 5f4:	85 bd       	out	0x25, r24	; 37
	OCR0A = 127;
 5f6:	8f e7       	ldi	r24, 0x7F	; 127
 5f8:	87 bd       	out	0x27, r24	; 39
	
	TIMSK0 |= (1 << OCIE0A);
 5fa:	ee e6       	ldi	r30, 0x6E	; 110
 5fc:	f0 e0       	ldi	r31, 0x00	; 0
 5fe:	80 81       	ld	r24, Z
 600:	82 60       	ori	r24, 0x02	; 2
 602:	80 83       	st	Z, r24
 604:	08 95       	ret

00000606 <__vector_14>:
	
}

ISR(TIMER0_COMPA_vect){
 606:	1f 92       	push	r1
 608:	0f 92       	push	r0
 60a:	0f b6       	in	r0, 0x3f	; 63
 60c:	0f 92       	push	r0
 60e:	11 24       	eor	r1, r1
 610:	2f 93       	push	r18
 612:	3f 93       	push	r19
 614:	4f 93       	push	r20
 616:	5f 93       	push	r21
 618:	6f 93       	push	r22
 61a:	7f 93       	push	r23
 61c:	8f 93       	push	r24
 61e:	9f 93       	push	r25
 620:	af 93       	push	r26
 622:	bf 93       	push	r27
 624:	ef 93       	push	r30
 626:	ff 93       	push	r31
	sEOS_SCH_Tasks();
 628:	0e 94 b2 02 	call	0x564	; 0x564 <sEOS_SCH_Tasks>
 62c:	ff 91       	pop	r31
 62e:	ef 91       	pop	r30
 630:	bf 91       	pop	r27
 632:	af 91       	pop	r26
 634:	9f 91       	pop	r25
 636:	8f 91       	pop	r24
 638:	7f 91       	pop	r23
 63a:	6f 91       	pop	r22
 63c:	5f 91       	pop	r21
 63e:	4f 91       	pop	r20
 640:	3f 91       	pop	r19
 642:	2f 91       	pop	r18
 644:	0f 90       	pop	r0
 646:	0f be       	out	0x3f, r0	; 63
 648:	0f 90       	pop	r0
 64a:	1f 90       	pop	r1
 64c:	18 95       	reti

0000064e <TIMERS_InitTimer1>:
 64e:	e0 e8       	ldi	r30, 0x80	; 128
 650:	f0 e0       	ldi	r31, 0x00	; 0
 652:	80 81       	ld	r24, Z
 654:	81 6a       	ori	r24, 0xA1	; 161
 656:	80 83       	st	Z, r24
 658:	e1 e8       	ldi	r30, 0x81	; 129
 65a:	f0 e0       	ldi	r31, 0x00	; 0
 65c:	80 81       	ld	r24, Z
 65e:	8d 60       	ori	r24, 0x0D	; 13
 660:	80 83       	st	Z, r24
 662:	08 95       	ret

00000664 <__subsf3>:
 664:	50 58       	subi	r21, 0x80	; 128

00000666 <__addsf3>:
 666:	bb 27       	eor	r27, r27
 668:	aa 27       	eor	r26, r26
 66a:	0e 94 4a 03 	call	0x694	; 0x694 <__addsf3x>
 66e:	0c 94 22 04 	jmp	0x844	; 0x844 <__fp_round>
 672:	0e 94 14 04 	call	0x828	; 0x828 <__fp_pscA>
 676:	38 f0       	brcs	.+14     	; 0x686 <__addsf3+0x20>
 678:	0e 94 1b 04 	call	0x836	; 0x836 <__fp_pscB>
 67c:	20 f0       	brcs	.+8      	; 0x686 <__addsf3+0x20>
 67e:	39 f4       	brne	.+14     	; 0x68e <__addsf3+0x28>
 680:	9f 3f       	cpi	r25, 0xFF	; 255
 682:	19 f4       	brne	.+6      	; 0x68a <__addsf3+0x24>
 684:	26 f4       	brtc	.+8      	; 0x68e <__addsf3+0x28>
 686:	0c 94 11 04 	jmp	0x822	; 0x822 <__fp_nan>
 68a:	0e f4       	brtc	.+2      	; 0x68e <__addsf3+0x28>
 68c:	e0 95       	com	r30
 68e:	e7 fb       	bst	r30, 7
 690:	0c 94 0b 04 	jmp	0x816	; 0x816 <__fp_inf>

00000694 <__addsf3x>:
 694:	e9 2f       	mov	r30, r25
 696:	0e 94 33 04 	call	0x866	; 0x866 <__fp_split3>
 69a:	58 f3       	brcs	.-42     	; 0x672 <__addsf3+0xc>
 69c:	ba 17       	cp	r27, r26
 69e:	62 07       	cpc	r22, r18
 6a0:	73 07       	cpc	r23, r19
 6a2:	84 07       	cpc	r24, r20
 6a4:	95 07       	cpc	r25, r21
 6a6:	20 f0       	brcs	.+8      	; 0x6b0 <__addsf3x+0x1c>
 6a8:	79 f4       	brne	.+30     	; 0x6c8 <__addsf3x+0x34>
 6aa:	a6 f5       	brtc	.+104    	; 0x714 <__addsf3x+0x80>
 6ac:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <__fp_zero>
 6b0:	0e f4       	brtc	.+2      	; 0x6b4 <__addsf3x+0x20>
 6b2:	e0 95       	com	r30
 6b4:	0b 2e       	mov	r0, r27
 6b6:	ba 2f       	mov	r27, r26
 6b8:	a0 2d       	mov	r26, r0
 6ba:	0b 01       	movw	r0, r22
 6bc:	b9 01       	movw	r22, r18
 6be:	90 01       	movw	r18, r0
 6c0:	0c 01       	movw	r0, r24
 6c2:	ca 01       	movw	r24, r20
 6c4:	a0 01       	movw	r20, r0
 6c6:	11 24       	eor	r1, r1
 6c8:	ff 27       	eor	r31, r31
 6ca:	59 1b       	sub	r21, r25
 6cc:	99 f0       	breq	.+38     	; 0x6f4 <__addsf3x+0x60>
 6ce:	59 3f       	cpi	r21, 0xF9	; 249
 6d0:	50 f4       	brcc	.+20     	; 0x6e6 <__addsf3x+0x52>
 6d2:	50 3e       	cpi	r21, 0xE0	; 224
 6d4:	68 f1       	brcs	.+90     	; 0x730 <__addsf3x+0x9c>
 6d6:	1a 16       	cp	r1, r26
 6d8:	f0 40       	sbci	r31, 0x00	; 0
 6da:	a2 2f       	mov	r26, r18
 6dc:	23 2f       	mov	r18, r19
 6de:	34 2f       	mov	r19, r20
 6e0:	44 27       	eor	r20, r20
 6e2:	58 5f       	subi	r21, 0xF8	; 248
 6e4:	f3 cf       	rjmp	.-26     	; 0x6cc <__addsf3x+0x38>
 6e6:	46 95       	lsr	r20
 6e8:	37 95       	ror	r19
 6ea:	27 95       	ror	r18
 6ec:	a7 95       	ror	r26
 6ee:	f0 40       	sbci	r31, 0x00	; 0
 6f0:	53 95       	inc	r21
 6f2:	c9 f7       	brne	.-14     	; 0x6e6 <__addsf3x+0x52>
 6f4:	7e f4       	brtc	.+30     	; 0x714 <__addsf3x+0x80>
 6f6:	1f 16       	cp	r1, r31
 6f8:	ba 0b       	sbc	r27, r26
 6fa:	62 0b       	sbc	r22, r18
 6fc:	73 0b       	sbc	r23, r19
 6fe:	84 0b       	sbc	r24, r20
 700:	ba f0       	brmi	.+46     	; 0x730 <__addsf3x+0x9c>
 702:	91 50       	subi	r25, 0x01	; 1
 704:	a1 f0       	breq	.+40     	; 0x72e <__addsf3x+0x9a>
 706:	ff 0f       	add	r31, r31
 708:	bb 1f       	adc	r27, r27
 70a:	66 1f       	adc	r22, r22
 70c:	77 1f       	adc	r23, r23
 70e:	88 1f       	adc	r24, r24
 710:	c2 f7       	brpl	.-16     	; 0x702 <__addsf3x+0x6e>
 712:	0e c0       	rjmp	.+28     	; 0x730 <__addsf3x+0x9c>
 714:	ba 0f       	add	r27, r26
 716:	62 1f       	adc	r22, r18
 718:	73 1f       	adc	r23, r19
 71a:	84 1f       	adc	r24, r20
 71c:	48 f4       	brcc	.+18     	; 0x730 <__addsf3x+0x9c>
 71e:	87 95       	ror	r24
 720:	77 95       	ror	r23
 722:	67 95       	ror	r22
 724:	b7 95       	ror	r27
 726:	f7 95       	ror	r31
 728:	9e 3f       	cpi	r25, 0xFE	; 254
 72a:	08 f0       	brcs	.+2      	; 0x72e <__addsf3x+0x9a>
 72c:	b0 cf       	rjmp	.-160    	; 0x68e <__addsf3+0x28>
 72e:	93 95       	inc	r25
 730:	88 0f       	add	r24, r24
 732:	08 f0       	brcs	.+2      	; 0x736 <__addsf3x+0xa2>
 734:	99 27       	eor	r25, r25
 736:	ee 0f       	add	r30, r30
 738:	97 95       	ror	r25
 73a:	87 95       	ror	r24
 73c:	08 95       	ret

0000073e <__fixunssfsi>:
 73e:	0e 94 3b 04 	call	0x876	; 0x876 <__fp_splitA>
 742:	88 f0       	brcs	.+34     	; 0x766 <__fixunssfsi+0x28>
 744:	9f 57       	subi	r25, 0x7F	; 127
 746:	98 f0       	brcs	.+38     	; 0x76e <__fixunssfsi+0x30>
 748:	b9 2f       	mov	r27, r25
 74a:	99 27       	eor	r25, r25
 74c:	b7 51       	subi	r27, 0x17	; 23
 74e:	b0 f0       	brcs	.+44     	; 0x77c <__fixunssfsi+0x3e>
 750:	e1 f0       	breq	.+56     	; 0x78a <__fixunssfsi+0x4c>
 752:	66 0f       	add	r22, r22
 754:	77 1f       	adc	r23, r23
 756:	88 1f       	adc	r24, r24
 758:	99 1f       	adc	r25, r25
 75a:	1a f0       	brmi	.+6      	; 0x762 <__fixunssfsi+0x24>
 75c:	ba 95       	dec	r27
 75e:	c9 f7       	brne	.-14     	; 0x752 <__fixunssfsi+0x14>
 760:	14 c0       	rjmp	.+40     	; 0x78a <__fixunssfsi+0x4c>
 762:	b1 30       	cpi	r27, 0x01	; 1
 764:	91 f0       	breq	.+36     	; 0x78a <__fixunssfsi+0x4c>
 766:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fp_zero>
 76a:	b1 e0       	ldi	r27, 0x01	; 1
 76c:	08 95       	ret
 76e:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <__fp_zero>
 772:	67 2f       	mov	r22, r23
 774:	78 2f       	mov	r23, r24
 776:	88 27       	eor	r24, r24
 778:	b8 5f       	subi	r27, 0xF8	; 248
 77a:	39 f0       	breq	.+14     	; 0x78a <__fixunssfsi+0x4c>
 77c:	b9 3f       	cpi	r27, 0xF9	; 249
 77e:	cc f3       	brlt	.-14     	; 0x772 <__fixunssfsi+0x34>
 780:	86 95       	lsr	r24
 782:	77 95       	ror	r23
 784:	67 95       	ror	r22
 786:	b3 95       	inc	r27
 788:	d9 f7       	brne	.-10     	; 0x780 <__fixunssfsi+0x42>
 78a:	3e f4       	brtc	.+14     	; 0x79a <__fixunssfsi+0x5c>
 78c:	90 95       	com	r25
 78e:	80 95       	com	r24
 790:	70 95       	com	r23
 792:	61 95       	neg	r22
 794:	7f 4f       	sbci	r23, 0xFF	; 255
 796:	8f 4f       	sbci	r24, 0xFF	; 255
 798:	9f 4f       	sbci	r25, 0xFF	; 255
 79a:	08 95       	ret

0000079c <__floatunsisf>:
 79c:	e8 94       	clt
 79e:	09 c0       	rjmp	.+18     	; 0x7b2 <__floatsisf+0x12>

000007a0 <__floatsisf>:
 7a0:	97 fb       	bst	r25, 7
 7a2:	3e f4       	brtc	.+14     	; 0x7b2 <__floatsisf+0x12>
 7a4:	90 95       	com	r25
 7a6:	80 95       	com	r24
 7a8:	70 95       	com	r23
 7aa:	61 95       	neg	r22
 7ac:	7f 4f       	sbci	r23, 0xFF	; 255
 7ae:	8f 4f       	sbci	r24, 0xFF	; 255
 7b0:	9f 4f       	sbci	r25, 0xFF	; 255
 7b2:	99 23       	and	r25, r25
 7b4:	a9 f0       	breq	.+42     	; 0x7e0 <__floatsisf+0x40>
 7b6:	f9 2f       	mov	r31, r25
 7b8:	96 e9       	ldi	r25, 0x96	; 150
 7ba:	bb 27       	eor	r27, r27
 7bc:	93 95       	inc	r25
 7be:	f6 95       	lsr	r31
 7c0:	87 95       	ror	r24
 7c2:	77 95       	ror	r23
 7c4:	67 95       	ror	r22
 7c6:	b7 95       	ror	r27
 7c8:	f1 11       	cpse	r31, r1
 7ca:	f8 cf       	rjmp	.-16     	; 0x7bc <__floatsisf+0x1c>
 7cc:	fa f4       	brpl	.+62     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 7ce:	bb 0f       	add	r27, r27
 7d0:	11 f4       	brne	.+4      	; 0x7d6 <__floatsisf+0x36>
 7d2:	60 ff       	sbrs	r22, 0
 7d4:	1b c0       	rjmp	.+54     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 7d6:	6f 5f       	subi	r22, 0xFF	; 255
 7d8:	7f 4f       	sbci	r23, 0xFF	; 255
 7da:	8f 4f       	sbci	r24, 0xFF	; 255
 7dc:	9f 4f       	sbci	r25, 0xFF	; 255
 7de:	16 c0       	rjmp	.+44     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 7e0:	88 23       	and	r24, r24
 7e2:	11 f0       	breq	.+4      	; 0x7e8 <__floatsisf+0x48>
 7e4:	96 e9       	ldi	r25, 0x96	; 150
 7e6:	11 c0       	rjmp	.+34     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7e8:	77 23       	and	r23, r23
 7ea:	21 f0       	breq	.+8      	; 0x7f4 <__floatsisf+0x54>
 7ec:	9e e8       	ldi	r25, 0x8E	; 142
 7ee:	87 2f       	mov	r24, r23
 7f0:	76 2f       	mov	r23, r22
 7f2:	05 c0       	rjmp	.+10     	; 0x7fe <__floatsisf+0x5e>
 7f4:	66 23       	and	r22, r22
 7f6:	71 f0       	breq	.+28     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 7f8:	96 e8       	ldi	r25, 0x86	; 134
 7fa:	86 2f       	mov	r24, r22
 7fc:	70 e0       	ldi	r23, 0x00	; 0
 7fe:	60 e0       	ldi	r22, 0x00	; 0
 800:	2a f0       	brmi	.+10     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 802:	9a 95       	dec	r25
 804:	66 0f       	add	r22, r22
 806:	77 1f       	adc	r23, r23
 808:	88 1f       	adc	r24, r24
 80a:	da f7       	brpl	.-10     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 80c:	88 0f       	add	r24, r24
 80e:	96 95       	lsr	r25
 810:	87 95       	ror	r24
 812:	97 f9       	bld	r25, 7
 814:	08 95       	ret

00000816 <__fp_inf>:
 816:	97 f9       	bld	r25, 7
 818:	9f 67       	ori	r25, 0x7F	; 127
 81a:	80 e8       	ldi	r24, 0x80	; 128
 81c:	70 e0       	ldi	r23, 0x00	; 0
 81e:	60 e0       	ldi	r22, 0x00	; 0
 820:	08 95       	ret

00000822 <__fp_nan>:
 822:	9f ef       	ldi	r25, 0xFF	; 255
 824:	80 ec       	ldi	r24, 0xC0	; 192
 826:	08 95       	ret

00000828 <__fp_pscA>:
 828:	00 24       	eor	r0, r0
 82a:	0a 94       	dec	r0
 82c:	16 16       	cp	r1, r22
 82e:	17 06       	cpc	r1, r23
 830:	18 06       	cpc	r1, r24
 832:	09 06       	cpc	r0, r25
 834:	08 95       	ret

00000836 <__fp_pscB>:
 836:	00 24       	eor	r0, r0
 838:	0a 94       	dec	r0
 83a:	12 16       	cp	r1, r18
 83c:	13 06       	cpc	r1, r19
 83e:	14 06       	cpc	r1, r20
 840:	05 06       	cpc	r0, r21
 842:	08 95       	ret

00000844 <__fp_round>:
 844:	09 2e       	mov	r0, r25
 846:	03 94       	inc	r0
 848:	00 0c       	add	r0, r0
 84a:	11 f4       	brne	.+4      	; 0x850 <__fp_round+0xc>
 84c:	88 23       	and	r24, r24
 84e:	52 f0       	brmi	.+20     	; 0x864 <__fp_round+0x20>
 850:	bb 0f       	add	r27, r27
 852:	40 f4       	brcc	.+16     	; 0x864 <__fp_round+0x20>
 854:	bf 2b       	or	r27, r31
 856:	11 f4       	brne	.+4      	; 0x85c <__fp_round+0x18>
 858:	60 ff       	sbrs	r22, 0
 85a:	04 c0       	rjmp	.+8      	; 0x864 <__fp_round+0x20>
 85c:	6f 5f       	subi	r22, 0xFF	; 255
 85e:	7f 4f       	sbci	r23, 0xFF	; 255
 860:	8f 4f       	sbci	r24, 0xFF	; 255
 862:	9f 4f       	sbci	r25, 0xFF	; 255
 864:	08 95       	ret

00000866 <__fp_split3>:
 866:	57 fd       	sbrc	r21, 7
 868:	90 58       	subi	r25, 0x80	; 128
 86a:	44 0f       	add	r20, r20
 86c:	55 1f       	adc	r21, r21
 86e:	59 f0       	breq	.+22     	; 0x886 <__fp_splitA+0x10>
 870:	5f 3f       	cpi	r21, 0xFF	; 255
 872:	71 f0       	breq	.+28     	; 0x890 <__fp_splitA+0x1a>
 874:	47 95       	ror	r20

00000876 <__fp_splitA>:
 876:	88 0f       	add	r24, r24
 878:	97 fb       	bst	r25, 7
 87a:	99 1f       	adc	r25, r25
 87c:	61 f0       	breq	.+24     	; 0x896 <__fp_splitA+0x20>
 87e:	9f 3f       	cpi	r25, 0xFF	; 255
 880:	79 f0       	breq	.+30     	; 0x8a0 <__fp_splitA+0x2a>
 882:	87 95       	ror	r24
 884:	08 95       	ret
 886:	12 16       	cp	r1, r18
 888:	13 06       	cpc	r1, r19
 88a:	14 06       	cpc	r1, r20
 88c:	55 1f       	adc	r21, r21
 88e:	f2 cf       	rjmp	.-28     	; 0x874 <__fp_split3+0xe>
 890:	46 95       	lsr	r20
 892:	f1 df       	rcall	.-30     	; 0x876 <__fp_splitA>
 894:	08 c0       	rjmp	.+16     	; 0x8a6 <__fp_splitA+0x30>
 896:	16 16       	cp	r1, r22
 898:	17 06       	cpc	r1, r23
 89a:	18 06       	cpc	r1, r24
 89c:	99 1f       	adc	r25, r25
 89e:	f1 cf       	rjmp	.-30     	; 0x882 <__fp_splitA+0xc>
 8a0:	86 95       	lsr	r24
 8a2:	71 05       	cpc	r23, r1
 8a4:	61 05       	cpc	r22, r1
 8a6:	08 94       	sec
 8a8:	08 95       	ret

000008aa <__fp_zero>:
 8aa:	e8 94       	clt

000008ac <__fp_szero>:
 8ac:	bb 27       	eor	r27, r27
 8ae:	66 27       	eor	r22, r22
 8b0:	77 27       	eor	r23, r23
 8b2:	cb 01       	movw	r24, r22
 8b4:	97 f9       	bld	r25, 7
 8b6:	08 95       	ret

000008b8 <__mulsf3>:
 8b8:	0e 94 6f 04 	call	0x8de	; 0x8de <__mulsf3x>
 8bc:	0c 94 22 04 	jmp	0x844	; 0x844 <__fp_round>
 8c0:	0e 94 14 04 	call	0x828	; 0x828 <__fp_pscA>
 8c4:	38 f0       	brcs	.+14     	; 0x8d4 <__mulsf3+0x1c>
 8c6:	0e 94 1b 04 	call	0x836	; 0x836 <__fp_pscB>
 8ca:	20 f0       	brcs	.+8      	; 0x8d4 <__mulsf3+0x1c>
 8cc:	95 23       	and	r25, r21
 8ce:	11 f0       	breq	.+4      	; 0x8d4 <__mulsf3+0x1c>
 8d0:	0c 94 0b 04 	jmp	0x816	; 0x816 <__fp_inf>
 8d4:	0c 94 11 04 	jmp	0x822	; 0x822 <__fp_nan>
 8d8:	11 24       	eor	r1, r1
 8da:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__fp_szero>

000008de <__mulsf3x>:
 8de:	0e 94 33 04 	call	0x866	; 0x866 <__fp_split3>
 8e2:	70 f3       	brcs	.-36     	; 0x8c0 <__mulsf3+0x8>

000008e4 <__mulsf3_pse>:
 8e4:	95 9f       	mul	r25, r21
 8e6:	c1 f3       	breq	.-16     	; 0x8d8 <__mulsf3+0x20>
 8e8:	95 0f       	add	r25, r21
 8ea:	50 e0       	ldi	r21, 0x00	; 0
 8ec:	55 1f       	adc	r21, r21
 8ee:	62 9f       	mul	r22, r18
 8f0:	f0 01       	movw	r30, r0
 8f2:	72 9f       	mul	r23, r18
 8f4:	bb 27       	eor	r27, r27
 8f6:	f0 0d       	add	r31, r0
 8f8:	b1 1d       	adc	r27, r1
 8fa:	63 9f       	mul	r22, r19
 8fc:	aa 27       	eor	r26, r26
 8fe:	f0 0d       	add	r31, r0
 900:	b1 1d       	adc	r27, r1
 902:	aa 1f       	adc	r26, r26
 904:	64 9f       	mul	r22, r20
 906:	66 27       	eor	r22, r22
 908:	b0 0d       	add	r27, r0
 90a:	a1 1d       	adc	r26, r1
 90c:	66 1f       	adc	r22, r22
 90e:	82 9f       	mul	r24, r18
 910:	22 27       	eor	r18, r18
 912:	b0 0d       	add	r27, r0
 914:	a1 1d       	adc	r26, r1
 916:	62 1f       	adc	r22, r18
 918:	73 9f       	mul	r23, r19
 91a:	b0 0d       	add	r27, r0
 91c:	a1 1d       	adc	r26, r1
 91e:	62 1f       	adc	r22, r18
 920:	83 9f       	mul	r24, r19
 922:	a0 0d       	add	r26, r0
 924:	61 1d       	adc	r22, r1
 926:	22 1f       	adc	r18, r18
 928:	74 9f       	mul	r23, r20
 92a:	33 27       	eor	r19, r19
 92c:	a0 0d       	add	r26, r0
 92e:	61 1d       	adc	r22, r1
 930:	23 1f       	adc	r18, r19
 932:	84 9f       	mul	r24, r20
 934:	60 0d       	add	r22, r0
 936:	21 1d       	adc	r18, r1
 938:	82 2f       	mov	r24, r18
 93a:	76 2f       	mov	r23, r22
 93c:	6a 2f       	mov	r22, r26
 93e:	11 24       	eor	r1, r1
 940:	9f 57       	subi	r25, 0x7F	; 127
 942:	50 40       	sbci	r21, 0x00	; 0
 944:	9a f0       	brmi	.+38     	; 0x96c <__stack+0x6d>
 946:	f1 f0       	breq	.+60     	; 0x984 <__stack+0x85>
 948:	88 23       	and	r24, r24
 94a:	4a f0       	brmi	.+18     	; 0x95e <__stack+0x5f>
 94c:	ee 0f       	add	r30, r30
 94e:	ff 1f       	adc	r31, r31
 950:	bb 1f       	adc	r27, r27
 952:	66 1f       	adc	r22, r22
 954:	77 1f       	adc	r23, r23
 956:	88 1f       	adc	r24, r24
 958:	91 50       	subi	r25, 0x01	; 1
 95a:	50 40       	sbci	r21, 0x00	; 0
 95c:	a9 f7       	brne	.-22     	; 0x948 <__stack+0x49>
 95e:	9e 3f       	cpi	r25, 0xFE	; 254
 960:	51 05       	cpc	r21, r1
 962:	80 f0       	brcs	.+32     	; 0x984 <__stack+0x85>
 964:	0c 94 0b 04 	jmp	0x816	; 0x816 <__fp_inf>
 968:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__fp_szero>
 96c:	5f 3f       	cpi	r21, 0xFF	; 255
 96e:	e4 f3       	brlt	.-8      	; 0x968 <__stack+0x69>
 970:	98 3e       	cpi	r25, 0xE8	; 232
 972:	d4 f3       	brlt	.-12     	; 0x968 <__stack+0x69>
 974:	86 95       	lsr	r24
 976:	77 95       	ror	r23
 978:	67 95       	ror	r22
 97a:	b7 95       	ror	r27
 97c:	f7 95       	ror	r31
 97e:	e7 95       	ror	r30
 980:	9f 5f       	subi	r25, 0xFF	; 255
 982:	c1 f7       	brne	.-16     	; 0x974 <__stack+0x75>
 984:	fe 2b       	or	r31, r30
 986:	88 0f       	add	r24, r24
 988:	91 1d       	adc	r25, r1
 98a:	96 95       	lsr	r25
 98c:	87 95       	ror	r24
 98e:	97 f9       	bld	r25, 7
 990:	08 95       	ret

00000992 <round>:
 992:	0e 94 3b 04 	call	0x876	; 0x876 <__fp_splitA>
 996:	e8 f0       	brcs	.+58     	; 0x9d2 <round+0x40>
 998:	9e 37       	cpi	r25, 0x7E	; 126
 99a:	e8 f0       	brcs	.+58     	; 0x9d6 <round+0x44>
 99c:	96 39       	cpi	r25, 0x96	; 150
 99e:	b8 f4       	brcc	.+46     	; 0x9ce <round+0x3c>
 9a0:	9e 38       	cpi	r25, 0x8E	; 142
 9a2:	48 f4       	brcc	.+18     	; 0x9b6 <round+0x24>
 9a4:	67 2f       	mov	r22, r23
 9a6:	78 2f       	mov	r23, r24
 9a8:	88 27       	eor	r24, r24
 9aa:	98 5f       	subi	r25, 0xF8	; 248
 9ac:	f9 cf       	rjmp	.-14     	; 0x9a0 <round+0xe>
 9ae:	86 95       	lsr	r24
 9b0:	77 95       	ror	r23
 9b2:	67 95       	ror	r22
 9b4:	93 95       	inc	r25
 9b6:	95 39       	cpi	r25, 0x95	; 149
 9b8:	d0 f3       	brcs	.-12     	; 0x9ae <round+0x1c>
 9ba:	b6 2f       	mov	r27, r22
 9bc:	b1 70       	andi	r27, 0x01	; 1
 9be:	6b 0f       	add	r22, r27
 9c0:	71 1d       	adc	r23, r1
 9c2:	81 1d       	adc	r24, r1
 9c4:	20 f4       	brcc	.+8      	; 0x9ce <round+0x3c>
 9c6:	87 95       	ror	r24
 9c8:	77 95       	ror	r23
 9ca:	67 95       	ror	r22
 9cc:	93 95       	inc	r25
 9ce:	0c 94 ed 04 	jmp	0x9da	; 0x9da <__fp_mintl>
 9d2:	0c 94 08 05 	jmp	0xa10	; 0xa10 <__fp_mpack>
 9d6:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__fp_szero>

000009da <__fp_mintl>:
 9da:	88 23       	and	r24, r24
 9dc:	71 f4       	brne	.+28     	; 0x9fa <__fp_mintl+0x20>
 9de:	77 23       	and	r23, r23
 9e0:	21 f0       	breq	.+8      	; 0x9ea <__fp_mintl+0x10>
 9e2:	98 50       	subi	r25, 0x08	; 8
 9e4:	87 2b       	or	r24, r23
 9e6:	76 2f       	mov	r23, r22
 9e8:	07 c0       	rjmp	.+14     	; 0x9f8 <__fp_mintl+0x1e>
 9ea:	66 23       	and	r22, r22
 9ec:	11 f4       	brne	.+4      	; 0x9f2 <__fp_mintl+0x18>
 9ee:	99 27       	eor	r25, r25
 9f0:	0d c0       	rjmp	.+26     	; 0xa0c <__fp_mintl+0x32>
 9f2:	90 51       	subi	r25, 0x10	; 16
 9f4:	86 2b       	or	r24, r22
 9f6:	70 e0       	ldi	r23, 0x00	; 0
 9f8:	60 e0       	ldi	r22, 0x00	; 0
 9fa:	2a f0       	brmi	.+10     	; 0xa06 <__fp_mintl+0x2c>
 9fc:	9a 95       	dec	r25
 9fe:	66 0f       	add	r22, r22
 a00:	77 1f       	adc	r23, r23
 a02:	88 1f       	adc	r24, r24
 a04:	da f7       	brpl	.-10     	; 0x9fc <__fp_mintl+0x22>
 a06:	88 0f       	add	r24, r24
 a08:	96 95       	lsr	r25
 a0a:	87 95       	ror	r24
 a0c:	97 f9       	bld	r25, 7
 a0e:	08 95       	ret

00000a10 <__fp_mpack>:
 a10:	9f 3f       	cpi	r25, 0xFF	; 255
 a12:	31 f0       	breq	.+12     	; 0xa20 <__fp_mpack_finite+0xc>

00000a14 <__fp_mpack_finite>:
 a14:	91 50       	subi	r25, 0x01	; 1
 a16:	20 f4       	brcc	.+8      	; 0xa20 <__fp_mpack_finite+0xc>
 a18:	87 95       	ror	r24
 a1a:	77 95       	ror	r23
 a1c:	67 95       	ror	r22
 a1e:	b7 95       	ror	r27
 a20:	88 0f       	add	r24, r24
 a22:	91 1d       	adc	r25, r1
 a24:	96 95       	lsr	r25
 a26:	87 95       	ror	r24
 a28:	97 f9       	bld	r25, 7
 a2a:	08 95       	ret

00000a2c <_exit>:
 a2c:	f8 94       	cli

00000a2e <__stop_program>:
 a2e:	ff cf       	rjmp	.-2      	; 0xa2e <__stop_program>


TP4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000009f0  00000a84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000140  00800106  00800106  00000a8a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a8a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000abc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00000afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001415  00000000  00000000  00000ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b25  00000000  00000000  000020f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cb9  00000000  00000000  00002c1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a4  00000000  00000000  000038d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000074a  00000000  00000000  00003c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000584  00000000  00000000  000043c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  0000494a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 e3 02 	jmp	0x5c6	; 0x5c6 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ef       	ldi	r30, 0xF0	; 240
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 34       	cpi	r26, 0x46	; 70
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <main>
  9e:	0c 94 f6 04 	jmp	0x9ec	; 0x9ec <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LDR_config>:

uint16_t result = 0;
uint8_t is_converting = 0;

void LDR_config(){
	DIDR0= 0x01; //Digital Input Disable (opcional)
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
	ADCSRA |= (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //make ADC enable and select ck/128
  ac:	ea e7       	ldi	r30, 0x7A	; 122
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	87 68       	ori	r24, 0x87	; 135
  b4:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0) | (1<<MUX1) | (1<<MUX0);   // Vref=AVCC, right-justified, ADC3 pin
  b6:	ec e7       	ldi	r30, 0x7C	; 124
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	83 64       	ori	r24, 0x43	; 67
  be:	80 83       	st	Z, r24
  c0:	08 95       	ret

000000c2 <LDR_get_value>:
}

uint16_t LDR_get_value(){
	ADCSRA |= (1<<ADSC);//start conversion
  c2:	ea e7       	ldi	r30, 0x7A	; 122
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	80 64       	ori	r24, 0x40	; 64
  ca:	80 83       	st	Z, r24
	while((ADCSRA&(1<<ADIF))==0);//wait for conversion to finish
  cc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  d0:	84 ff       	sbrs	r24, 4
  d2:	fc cf       	rjmp	.-8      	; 0xcc <LDR_get_value+0xa>
	ADCSRA |= (1<<ADIF); //borrar flag
  d4:	ea e7       	ldi	r30, 0x7A	; 122
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	80 61       	ori	r24, 0x10	; 16
  dc:	80 83       	st	Z, r24
	result = (uint16_t) ADC;
  de:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  e2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  e6:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
  ea:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
	// para no polling comentar las 4 lineas de arriba
	return result;
  ee:	08 95       	ret

000000f0 <distributeValues>:
void LEDS_setFinalGreen(uint8_t value){
	final_green = value;
}

void LEDS_setFinalBlue(uint8_t value){
	final_blue = value;
  f0:	cf 93       	push	r28
  f2:	99 e2       	ldi	r25, 0x29	; 41
  f4:	89 9f       	mul	r24, r25
  f6:	a1 2d       	mov	r26, r1
  f8:	11 24       	eor	r1, r1
  fa:	a2 95       	swap	r26
  fc:	af 70       	andi	r26, 0x0F	; 15
  fe:	24 e6       	ldi	r18, 0x64	; 100
 100:	c8 2f       	mov	r28, r24
 102:	a2 9f       	mul	r26, r18
 104:	c0 19       	sub	r28, r0
 106:	11 24       	eor	r1, r1
 108:	69 9f       	mul	r22, r25
 10a:	71 2d       	mov	r23, r1
 10c:	11 24       	eor	r1, r1
 10e:	72 95       	swap	r23
 110:	7f 70       	andi	r23, 0x0F	; 15
 112:	b6 2f       	mov	r27, r22
 114:	72 9f       	mul	r23, r18
 116:	b0 19       	sub	r27, r0
 118:	11 24       	eor	r1, r1
 11a:	49 9f       	mul	r20, r25
 11c:	51 2d       	mov	r21, r1
 11e:	11 24       	eor	r1, r1
 120:	52 95       	swap	r21
 122:	5f 70       	andi	r21, 0x0F	; 15
 124:	64 2f       	mov	r22, r20
 126:	52 9f       	mul	r21, r18
 128:	60 19       	sub	r22, r0
 12a:	11 24       	eor	r1, r1
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	21 c0       	rjmp	.+66     	; 0x172 <distributeValues+0x82>
 130:	28 2f       	mov	r18, r24
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	8c 17       	cp	r24, r28
 136:	18 f4       	brcc	.+6      	; 0x13e <distributeValues+0x4e>
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	9a 0f       	add	r25, r26
 13c:	01 c0       	rjmp	.+2      	; 0x140 <distributeValues+0x50>
 13e:	9a 2f       	mov	r25, r26
 140:	f9 01       	movw	r30, r18
 142:	e0 53       	subi	r30, 0x30	; 48
 144:	fe 4f       	sbci	r31, 0xFE	; 254
 146:	90 83       	st	Z, r25
 148:	8b 17       	cp	r24, r27
 14a:	18 f4       	brcc	.+6      	; 0x152 <distributeValues+0x62>
 14c:	91 e0       	ldi	r25, 0x01	; 1
 14e:	97 0f       	add	r25, r23
 150:	01 c0       	rjmp	.+2      	; 0x154 <distributeValues+0x64>
 152:	97 2f       	mov	r25, r23
 154:	f9 01       	movw	r30, r18
 156:	e4 59       	subi	r30, 0x94	; 148
 158:	fe 4f       	sbci	r31, 0xFE	; 254
 15a:	90 83       	st	Z, r25
 15c:	86 17       	cp	r24, r22
 15e:	18 f4       	brcc	.+6      	; 0x166 <distributeValues+0x76>
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	95 0f       	add	r25, r21
 164:	01 c0       	rjmp	.+2      	; 0x168 <distributeValues+0x78>
 166:	95 2f       	mov	r25, r21
 168:	f9 01       	movw	r30, r18
 16a:	e8 5f       	subi	r30, 0xF8	; 248
 16c:	fe 4f       	sbci	r31, 0xFE	; 254
 16e:	90 83       	st	Z, r25
 170:	8f 5f       	subi	r24, 0xFF	; 255
 172:	84 36       	cpi	r24, 0x64	; 100
 174:	e8 f2       	brcs	.-70     	; 0x130 <distributeValues+0x40>
 176:	cf 91       	pop	r28
 178:	08 95       	ret

0000017a <LEDS_setRed>:
 17a:	cf 93       	push	r28
 17c:	c8 2f       	mov	r28, r24
 17e:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <PWM_set_comp_value>
 182:	c0 93 36 02 	sts	0x0236, r28	; 0x800236 <red>
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <LEDS_setGreen>:
 18a:	2f ef       	ldi	r18, 0xFF	; 255
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	28 1b       	sub	r18, r24
 190:	31 09       	sbc	r19, r1
 192:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 196:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 19a:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <green>
 19e:	08 95       	ret

000001a0 <LEDS_setBlue>:
 1a0:	2f ef       	ldi	r18, 0xFF	; 255
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	28 1b       	sub	r18, r24
 1a6:	31 09       	sbc	r19, r1
 1a8:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1ac:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 1b0:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <blue>
 1b4:	08 95       	ret

000001b6 <LEDS_init>:
 1b6:	84 b1       	in	r24, 0x04	; 4
 1b8:	86 62       	ori	r24, 0x26	; 38
 1ba:	84 b9       	out	0x04, r24	; 4
 1bc:	85 b1       	in	r24, 0x05	; 5
 1be:	80 62       	ori	r24, 0x20	; 32
 1c0:	85 b9       	out	0x05, r24	; 5
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	0e 94 bd 00 	call	0x17a	; 0x17a <LEDS_setRed>
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	0e 94 c5 00 	call	0x18a	; 0x18a <LEDS_setGreen>
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LEDS_setBlue>
 1d4:	20 e0       	ldi	r18, 0x00	; 0
 1d6:	0f c0       	rjmp	.+30     	; 0x1f6 <LEDS_init+0x40>
 1d8:	82 2f       	mov	r24, r18
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	fc 01       	movw	r30, r24
 1de:	e0 53       	subi	r30, 0x30	; 48
 1e0:	fe 4f       	sbci	r31, 0xFE	; 254
 1e2:	10 82       	st	Z, r1
 1e4:	fc 01       	movw	r30, r24
 1e6:	e4 59       	subi	r30, 0x94	; 148
 1e8:	fe 4f       	sbci	r31, 0xFE	; 254
 1ea:	10 82       	st	Z, r1
 1ec:	fc 01       	movw	r30, r24
 1ee:	e8 5f       	subi	r30, 0xF8	; 248
 1f0:	fe 4f       	sbci	r31, 0xFE	; 254
 1f2:	10 82       	st	Z, r1
 1f4:	2f 5f       	subi	r18, 0xFF	; 255
 1f6:	24 36       	cpi	r18, 0x64	; 100
 1f8:	78 f3       	brcs	.-34     	; 0x1d8 <LEDS_init+0x22>
 1fa:	08 95       	ret

000001fc <LEDS_getRed>:
 1fc:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <red>
 200:	08 95       	ret

00000202 <LEDS_getGreen>:
 202:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <green>
 206:	08 95       	ret

00000208 <LEDS_getBlue>:
 208:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <blue>
 20c:	08 95       	ret

0000020e <LEDS_getFinalRed>:
}

uint8_t LEDS_getFinalRed(){
	return final_red;
}
 20e:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <final_red>
 212:	08 95       	ret

00000214 <LEDS_getFinalGreen>:

uint8_t LEDS_getFinalGreen(){
	return final_green;
}
 214:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <final_green>
 218:	08 95       	ret

0000021a <LEDS_getFinalBlue>:

uint8_t LEDS_getFinalBlue(){
	return final_blue;
}
 21a:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <final_blue>
 21e:	08 95       	ret

00000220 <LEDS_setFinalRGB>:

void LEDS_setFinalRGB(uint8_t valueR, uint8_t valueG, uint8_t valueB){
	final_red = valueR;
 220:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <final_red>
	final_green = valueG;
 224:	60 93 38 02 	sts	0x0238, r22	; 0x800238 <final_green>
	final_blue = valueB;
 228:	40 93 37 02 	sts	0x0237, r20	; 0x800237 <final_blue>
	distributeValues(valueR, valueG, valueB);
 22c:	0e 94 78 00 	call	0xf0	; 0xf0 <distributeValues>
 230:	08 95       	ret

00000232 <LEDS_incrementRed>:
}

void LEDS_incrementRed(uint16_t value){
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	ec 01       	movw	r28, r24
	LEDS_setRed(LEDS_getRed() + red_increments[value]);
 238:	0e 94 fe 00 	call	0x1fc	; 0x1fc <LEDS_getRed>
 23c:	c0 53       	subi	r28, 0x30	; 48
 23e:	de 4f       	sbci	r29, 0xFE	; 254
 240:	98 81       	ld	r25, Y
 242:	89 0f       	add	r24, r25
 244:	0e 94 bd 00 	call	0x17a	; 0x17a <LEDS_setRed>
}
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <LEDS_incrementGreen>:

void LEDS_incrementGreen(uint16_t value){
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	ec 01       	movw	r28, r24
	LEDS_setGreen(LEDS_getGreen() + green_increments[value]);
 254:	0e 94 01 01 	call	0x202	; 0x202 <LEDS_getGreen>
 258:	c4 59       	subi	r28, 0x94	; 148
 25a:	de 4f       	sbci	r29, 0xFE	; 254
 25c:	98 81       	ld	r25, Y
 25e:	89 0f       	add	r24, r25
 260:	0e 94 c5 00 	call	0x18a	; 0x18a <LEDS_setGreen>
	
}
 264:	df 91       	pop	r29
 266:	cf 91       	pop	r28
 268:	08 95       	ret

0000026a <LEDS_incrementBlue>:

void LEDS_incrementBlue(uint16_t value){
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	ec 01       	movw	r28, r24
	LEDS_setBlue(LEDS_getBlue() + blue_increments[value]);
 270:	0e 94 04 01 	call	0x208	; 0x208 <LEDS_getBlue>
 274:	c8 5f       	subi	r28, 0xF8	; 248
 276:	de 4f       	sbci	r29, 0xFE	; 254
 278:	98 81       	ld	r25, Y
 27a:	89 0f       	add	r24, r25
 27c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LEDS_setBlue>
}
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	08 95       	ret

00000286 <LEDS_decrementRed>:

void LEDS_decrementRed(uint16_t value){
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	ec 01       	movw	r28, r24
	LEDS_setRed(LEDS_getRed() - red_increments[STEPS - 1 - value]);
 28c:	0e 94 fe 00 	call	0x1fc	; 0x1fc <LEDS_getRed>
 290:	e3 e6       	ldi	r30, 0x63	; 99
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	ec 1b       	sub	r30, r28
 296:	fd 0b       	sbc	r31, r29
 298:	e0 53       	subi	r30, 0x30	; 48
 29a:	fe 4f       	sbci	r31, 0xFE	; 254
 29c:	90 81       	ld	r25, Z
 29e:	89 1b       	sub	r24, r25
 2a0:	0e 94 bd 00 	call	0x17a	; 0x17a <LEDS_setRed>
}
 2a4:	df 91       	pop	r29
 2a6:	cf 91       	pop	r28
 2a8:	08 95       	ret

000002aa <LEDS_decrementGreen>:

void LEDS_decrementGreen(uint16_t value){
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	ec 01       	movw	r28, r24
	LEDS_setGreen(LEDS_getGreen() - green_increments[STEPS - 1 - value]);
 2b0:	0e 94 01 01 	call	0x202	; 0x202 <LEDS_getGreen>
 2b4:	e3 e6       	ldi	r30, 0x63	; 99
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
 2b8:	ec 1b       	sub	r30, r28
 2ba:	fd 0b       	sbc	r31, r29
 2bc:	e4 59       	subi	r30, 0x94	; 148
 2be:	fe 4f       	sbci	r31, 0xFE	; 254
 2c0:	90 81       	ld	r25, Z
 2c2:	89 1b       	sub	r24, r25
 2c4:	0e 94 c5 00 	call	0x18a	; 0x18a <LEDS_setGreen>
}
 2c8:	df 91       	pop	r29
 2ca:	cf 91       	pop	r28
 2cc:	08 95       	ret

000002ce <LEDS_decrementBlue>:

void LEDS_decrementBlue(uint16_t value){
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
 2d2:	ec 01       	movw	r28, r24
	LEDS_setBlue(LEDS_getBlue() - blue_increments[STEPS - 1- value]);
 2d4:	0e 94 04 01 	call	0x208	; 0x208 <LEDS_getBlue>
 2d8:	e3 e6       	ldi	r30, 0x63	; 99
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	ec 1b       	sub	r30, r28
 2de:	fd 0b       	sbc	r31, r29
 2e0:	e8 5f       	subi	r30, 0xF8	; 248
 2e2:	fe 4f       	sbci	r31, 0xFE	; 254
 2e4:	90 81       	ld	r25, Z
 2e6:	89 1b       	sub	r24, r25
 2e8:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LEDS_setBlue>
}
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	08 95       	ret

000002f2 <main>:
#include "SW_PWM/PWM.h"
#include "LDR/LDR.h"

int main(void)
{
	TIMERS_InitTimer0();
 2f2:	0e 94 d5 02 	call	0x5aa	; 0x5aa <TIMERS_InitTimer0>
	TIMERS_InitTimer1();
 2f6:	0e 94 07 03 	call	0x60e	; 0x60e <TIMERS_InitTimer1>
	
	LEDS_init();
 2fa:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LEDS_init>
	MEF_init();
 2fe:	0e 94 90 01 	call	0x320	; 0x320 <MEF_init>
	LEDS_setFinalRGB(200, 200, 128);
 302:	40 e8       	ldi	r20, 0x80	; 128
 304:	68 ec       	ldi	r22, 0xC8	; 200
 306:	88 ec       	ldi	r24, 0xC8	; 200
 308:	0e 94 10 01 	call	0x220	; 0x220 <LEDS_setFinalRGB>
	
	LDR_config();
 30c:	0e 94 53 00 	call	0xa6	; 0xa6 <LDR_config>
	
	PWM_soft_init();
 310:	0e 94 cb 02 	call	0x596	; 0x596 <PWM_soft_init>
	
	sei();
 314:	78 94       	sei
	
    while(1)
    {
		sEOS_Dispatch_Tasks();
 316:	0e 94 7e 02 	call	0x4fc	; 0x4fc <sEOS_Dispatch_Tasks>
		sEOS_Go_To_Sleep();
 31a:	0e 94 9d 02 	call	0x53a	; 0x53a <sEOS_Go_To_Sleep>
 31e:	fb cf       	rjmp	.-10     	; 0x316 <main+0x24>

00000320 <MEF_init>:
static uint16_t timeOff = 20;
static double pendiente;
static uint16_t desplazamiento;

void MEF_init(){
	state = OFF;
 320:	83 e0       	ldi	r24, 0x03	; 3
 322:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <state>
	stateCount = 0;
 326:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <stateCount+0x1>
 32a:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <stateCount>

	pendiente = (400-1000) / (MIN_SUP_LDR - MAX_INF_LDR);
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	a0 e7       	ldi	r26, 0x70	; 112
 334:	b1 ec       	ldi	r27, 0xC1	; 193
 336:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <pendiente>
 33a:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <pendiente+0x1>
 33e:	a0 93 3e 02 	sts	0x023E, r26	; 0x80023e <pendiente+0x2>
 342:	b0 93 3f 02 	sts	0x023F, r27	; 0x80023f <pendiente+0x3>
	desplazamiento = 1000 + round(pendiente * MAX_INF_LDR);
 346:	8a ef       	ldi	r24, 0xFA	; 250
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <desplazamiento+0x1>
 34e:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <desplazamiento>
 352:	08 95       	ret

00000354 <update_timeOff>:
}

void  update_timeOff(){
 354:	cf 92       	push	r12
 356:	df 92       	push	r13
 358:	ef 92       	push	r14
 35a:	ff 92       	push	r15
	uint16_t LDR_value = LDR_get_value();
 35c:	0e 94 61 00 	call	0xc2	; 0xc2 <LDR_get_value>
	
	// Caso en el que Tparpadeo = 5seg (minima luz o menos)
	if (LDR_value < MAX_INF_LDR){
 360:	82 33       	cpi	r24, 0x32	; 50
 362:	91 05       	cpc	r25, r1
 364:	38 f4       	brcc	.+14     	; 0x374 <update_timeOff+0x20>
		timeOff = 1000;
 366:	88 ee       	ldi	r24, 0xE8	; 232
 368:	93 e0       	ldi	r25, 0x03	; 3
 36a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 36e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 372:	2f c0       	rjmp	.+94     	; 0x3d2 <update_timeOff+0x7e>
	}
	// Caso en el que Tparepadeo = 2seg (luz ambiente o mas)
	else if (LDR_value > MIN_SUP_LDR){
 374:	8b 35       	cpi	r24, 0x5B	; 91
 376:	91 05       	cpc	r25, r1
 378:	38 f0       	brcs	.+14     	; 0x388 <update_timeOff+0x34>
		timeOff = 400;
 37a:	80 e9       	ldi	r24, 0x90	; 144
 37c:	91 e0       	ldi	r25, 0x01	; 1
 37e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 382:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 386:	25 c0       	rjmp	.+74     	; 0x3d2 <update_timeOff+0x7e>
	}
	else {
		timeOff = desplazamiento - round(pendiente*LDR_value); // Parte de la recta con pendiente m negativa
 388:	bc 01       	movw	r22, r24
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	0e 94 ae 03 	call	0x75c	; 0x75c <__floatunsisf>
 392:	20 91 3c 02 	lds	r18, 0x023C	; 0x80023c <pendiente>
 396:	30 91 3d 02 	lds	r19, 0x023D	; 0x80023d <pendiente+0x1>
 39a:	40 91 3e 02 	lds	r20, 0x023E	; 0x80023e <pendiente+0x2>
 39e:	50 91 3f 02 	lds	r21, 0x023F	; 0x80023f <pendiente+0x3>
 3a2:	0e 94 3c 04 	call	0x878	; 0x878 <__mulsf3>
 3a6:	0e 94 a9 04 	call	0x952	; 0x952 <round>
 3aa:	6b 01       	movw	r12, r22
 3ac:	7c 01       	movw	r14, r24
 3ae:	60 91 3a 02 	lds	r22, 0x023A	; 0x80023a <desplazamiento>
 3b2:	70 91 3b 02 	lds	r23, 0x023B	; 0x80023b <desplazamiento+0x1>
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	0e 94 ae 03 	call	0x75c	; 0x75c <__floatunsisf>
 3be:	a7 01       	movw	r20, r14
 3c0:	96 01       	movw	r18, r12
 3c2:	0e 94 12 03 	call	0x624	; 0x624 <__subsf3>
 3c6:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__fixunssfsi>
 3ca:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3ce:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
 3d2:	ff 90       	pop	r15
 3d4:	ef 90       	pop	r14
 3d6:	df 90       	pop	r13
 3d8:	cf 90       	pop	r12
 3da:	08 95       	ret

000003dc <MEF_Update>:

void MEF_Update(){
	stateCount++;
 3dc:	20 91 40 02 	lds	r18, 0x0240	; 0x800240 <stateCount>
 3e0:	30 91 41 02 	lds	r19, 0x0241	; 0x800241 <stateCount+0x1>
 3e4:	c9 01       	movw	r24, r18
 3e6:	01 96       	adiw	r24, 0x01	; 1
 3e8:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <stateCount+0x1>
 3ec:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <stateCount>
	
	switch (state){
 3f0:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <state>
 3f4:	91 30       	cpi	r25, 0x01	; 1
 3f6:	09 f4       	brne	.+2      	; 0x3fa <MEF_Update+0x1e>
 3f8:	46 c0       	rjmp	.+140    	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 3fa:	20 f1       	brcs	.+72     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 3fc:	92 30       	cpi	r25, 0x02	; 2
 3fe:	09 f4       	brne	.+2      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 400:	5d c0       	rjmp	.+186    	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
 402:	93 30       	cpi	r25, 0x03	; 3
 404:	09 f0       	breq	.+2      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 406:	79 c0       	rjmp	.+242    	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
		case OFF:
			
			LEDS_setRed(0);
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	0e 94 bd 00 	call	0x17a	; 0x17a <LEDS_setRed>
			LEDS_setGreen(0);
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	0e 94 c5 00 	call	0x18a	; 0x18a <LEDS_setGreen>
			LEDS_setBlue(0);
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LEDS_setBlue>
			
			update_timeOff();
 41a:	0e 94 aa 01 	call	0x354	; 0x354 <update_timeOff>
			if(stateCount >= timeOff){
 41e:	20 91 40 02 	lds	r18, 0x0240	; 0x800240 <stateCount>
 422:	30 91 41 02 	lds	r19, 0x0241	; 0x800241 <stateCount+0x1>
 426:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 42a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 42e:	28 17       	cp	r18, r24
 430:	39 07       	cpc	r19, r25
 432:	08 f4       	brcc	.+2      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 434:	62 c0       	rjmp	.+196    	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
				state = RAISING;
 436:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <state>
				stateCount = 0;
 43a:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <stateCount+0x1>
 43e:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <stateCount>
 442:	08 95       	ret
			}
			break;
			
		case RAISING:
			
			LEDS_incrementRed(stateCount - 1);
 444:	c9 01       	movw	r24, r18
 446:	0e 94 19 01 	call	0x232	; 0x232 <LEDS_incrementRed>
			LEDS_incrementGreen(stateCount - 1);
 44a:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <stateCount>
 44e:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <stateCount+0x1>
 452:	01 97       	sbiw	r24, 0x01	; 1
 454:	0e 94 27 01 	call	0x24e	; 0x24e <LEDS_incrementGreen>
			LEDS_incrementBlue(stateCount - 1);
 458:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <stateCount>
 45c:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <stateCount+0x1>
 460:	01 97       	sbiw	r24, 0x01	; 1
 462:	0e 94 35 01 	call	0x26a	; 0x26a <LEDS_incrementBlue>
			
			if(stateCount == 100){
 466:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <stateCount>
 46a:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <stateCount+0x1>
 46e:	84 36       	cpi	r24, 0x64	; 100
 470:	91 05       	cpc	r25, r1
 472:	09 f0       	breq	.+2      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 474:	42 c0       	rjmp	.+132    	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
				state = ON;
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <state>
				stateCount = 0;
 47c:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <stateCount+0x1>
 480:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <stateCount>
 484:	08 95       	ret
			break;
			
		case ON:

			
			LEDS_setRed(LEDS_getFinalRed());
 486:	0e 94 07 01 	call	0x20e	; 0x20e <LEDS_getFinalRed>
 48a:	0e 94 bd 00 	call	0x17a	; 0x17a <LEDS_setRed>
			LEDS_setGreen(LEDS_getFinalGreen());
 48e:	0e 94 0a 01 	call	0x214	; 0x214 <LEDS_getFinalGreen>
 492:	0e 94 c5 00 	call	0x18a	; 0x18a <LEDS_setGreen>
			LEDS_setBlue(LEDS_getFinalBlue());
 496:	0e 94 0d 01 	call	0x21a	; 0x21a <LEDS_getFinalBlue>
 49a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LEDS_setBlue>
			
			if(stateCount == 200){
 49e:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <stateCount>
 4a2:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <stateCount+0x1>
 4a6:	88 3c       	cpi	r24, 0xC8	; 200
 4a8:	91 05       	cpc	r25, r1
 4aa:	39 f5       	brne	.+78     	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
				state = FALLING;
 4ac:	82 e0       	ldi	r24, 0x02	; 2
 4ae:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <state>
				stateCount = 0;
 4b2:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <stateCount+0x1>
 4b6:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <stateCount>
 4ba:	08 95       	ret
			}
			break;
			
		case FALLING:
			
			LEDS_decrementRed(stateCount - 1);
 4bc:	c9 01       	movw	r24, r18
 4be:	0e 94 43 01 	call	0x286	; 0x286 <LEDS_decrementRed>
			LEDS_decrementGreen(stateCount - 1);
 4c2:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <stateCount>
 4c6:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <stateCount+0x1>
 4ca:	01 97       	sbiw	r24, 0x01	; 1
 4cc:	0e 94 55 01 	call	0x2aa	; 0x2aa <LEDS_decrementGreen>
			LEDS_decrementBlue(stateCount - 1);
 4d0:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <stateCount>
 4d4:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <stateCount+0x1>
 4d8:	01 97       	sbiw	r24, 0x01	; 1
 4da:	0e 94 67 01 	call	0x2ce	; 0x2ce <LEDS_decrementBlue>
			
			if(stateCount == 100){
 4de:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <stateCount>
 4e2:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <stateCount+0x1>
 4e6:	84 36       	cpi	r24, 0x64	; 100
 4e8:	91 05       	cpc	r25, r1
 4ea:	39 f4       	brne	.+14     	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
				state = OFF;
 4ec:	83 e0       	ldi	r24, 0x03	; 3
 4ee:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <state>
				stateCount = 0;
 4f2:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <stateCount+0x1>
 4f6:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <stateCount>
 4fa:	08 95       	ret

000004fc <sEOS_Dispatch_Tasks>:

static volatile uint16_t counter_MEF = 780;
static volatile uint8_t FLAG_MEF = 0;

void sEOS_Dispatch_Tasks(){
	if(FLAG_MEF){
 4fc:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <FLAG_MEF>
 500:	88 23       	and	r24, r24
 502:	21 f0       	breq	.+8      	; 0x50c <sEOS_Dispatch_Tasks+0x10>
		MEF_Update();
 504:	0e 94 ee 01 	call	0x3dc	; 0x3dc <MEF_Update>
		FLAG_MEF = 0;	
 508:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <FLAG_MEF>
 50c:	08 95       	ret

0000050e <sEOS_SCH_Tasks>:
	}
}

void sEOS_SCH_Tasks(){
	//Cada 5 ms pone el flag en 1
	if (++counter_MEF == 78) {
 50e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <counter_MEF>
 512:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <counter_MEF+0x1>
 516:	01 96       	adiw	r24, 0x01	; 1
 518:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <counter_MEF+0x1>
 51c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <counter_MEF>
 520:	8e 34       	cpi	r24, 0x4E	; 78
 522:	91 05       	cpc	r25, r1
 524:	39 f4       	brne	.+14     	; 0x534 <sEOS_SCH_Tasks+0x26>
		FLAG_MEF = 1;
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <FLAG_MEF>
		counter_MEF = 0;
 52c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <counter_MEF+0x1>
 530:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <counter_MEF>
	}
	PWM_soft_Update();
 534:	0e 94 a8 02 	call	0x550	; 0x550 <PWM_soft_Update>
 538:	08 95       	ret

0000053a <sEOS_Go_To_Sleep>:
//Pone en modo ahorro el micro
void sEOS_Go_To_Sleep(){
	
	// Setea el sleep mode a "idle". Este modo permite a la CPU dormir
	// dejando los perifericos (Como Timers y UART) corriendo
	set_sleep_mode(SLEEP_MODE_IDLE);
 53a:	83 b7       	in	r24, 0x33	; 51
 53c:	81 7f       	andi	r24, 0xF1	; 241
 53e:	83 bf       	out	0x33, r24	; 51

	// Habilita sleep mode
	sleep_enable();
 540:	83 b7       	in	r24, 0x33	; 51
 542:	81 60       	ori	r24, 0x01	; 1
 544:	83 bf       	out	0x33, r24	; 51

	// Duerme al cpu
	sleep_cpu();
 546:	88 95       	sleep

	// Deshabilita sleep mode
	sleep_disable();
 548:	83 b7       	in	r24, 0x33	; 51
 54a:	8e 7f       	andi	r24, 0xFE	; 254
 54c:	83 bf       	out	0x33, r24	; 51
 54e:	08 95       	ret

00000550 <PWM_soft_Update>:
	PWM_OFF;
}

uint8_t PWM_get_comp_value(){
	return PWM_DELTA;
}
 550:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <PWM_position>
 554:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <PWM_position+0x1>
 558:	01 96       	adiw	r24, 0x01	; 1
 55a:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <PWM_position+0x1>
 55e:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <PWM_position>
 562:	8f 3f       	cpi	r24, 0xFF	; 255
 564:	91 05       	cpc	r25, r1
 566:	49 f0       	breq	.+18     	; 0x57a <PWM_soft_Update+0x2a>
 568:	40 f0       	brcs	.+16     	; 0x57a <PWM_soft_Update+0x2a>
 56a:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <PWM_position+0x1>
 56e:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <PWM_position>
 572:	85 b1       	in	r24, 0x05	; 5
 574:	80 62       	ori	r24, 0x20	; 32
 576:	85 b9       	out	0x05, r24	; 5
 578:	08 95       	ret
 57a:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <PWM_DELTA>
 57e:	30 e0       	ldi	r19, 0x00	; 0
 580:	82 17       	cp	r24, r18
 582:	93 07       	cpc	r25, r19
 584:	20 f4       	brcc	.+8      	; 0x58e <PWM_soft_Update+0x3e>
 586:	85 b1       	in	r24, 0x05	; 5
 588:	8f 7d       	andi	r24, 0xDF	; 223
 58a:	85 b9       	out	0x05, r24	; 5
 58c:	08 95       	ret
 58e:	85 b1       	in	r24, 0x05	; 5
 590:	80 62       	ori	r24, 0x20	; 32
 592:	85 b9       	out	0x05, r24	; 5
 594:	08 95       	ret

00000596 <PWM_soft_init>:
 596:	84 b1       	in	r24, 0x04	; 4
 598:	80 62       	ori	r24, 0x20	; 32
 59a:	84 b9       	out	0x04, r24	; 4
 59c:	85 b1       	in	r24, 0x05	; 5
 59e:	8f 7d       	andi	r24, 0xDF	; 223
 5a0:	85 b9       	out	0x05, r24	; 5
 5a2:	08 95       	ret

000005a4 <PWM_set_comp_value>:

void PWM_set_comp_value(uint8_t value){
	PWM_DELTA = value;
 5a4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <PWM_DELTA>
 5a8:	08 95       	ret

000005aa <TIMERS_InitTimer0>:
#include "../sEOS/sEOS.h"

void TIMERS_InitTimer0(){
	// Interrupcion cada 64 us
	// Prescaler en 8
	TCCR0A |= (1 << WGM01); // Modo CTC
 5aa:	84 b5       	in	r24, 0x24	; 36
 5ac:	82 60       	ori	r24, 0x02	; 2
 5ae:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS01);
 5b0:	85 b5       	in	r24, 0x25	; 37
 5b2:	82 60       	ori	r24, 0x02	; 2
 5b4:	85 bd       	out	0x25, r24	; 37
	OCR0A = 127;
 5b6:	8f e7       	ldi	r24, 0x7F	; 127
 5b8:	87 bd       	out	0x27, r24	; 39
	
	TIMSK0 |= (1 << OCIE0A);
 5ba:	ee e6       	ldi	r30, 0x6E	; 110
 5bc:	f0 e0       	ldi	r31, 0x00	; 0
 5be:	80 81       	ld	r24, Z
 5c0:	82 60       	ori	r24, 0x02	; 2
 5c2:	80 83       	st	Z, r24
 5c4:	08 95       	ret

000005c6 <__vector_14>:
}

ISR(TIMER0_COMPA_vect){
 5c6:	1f 92       	push	r1
 5c8:	0f 92       	push	r0
 5ca:	0f b6       	in	r0, 0x3f	; 63
 5cc:	0f 92       	push	r0
 5ce:	11 24       	eor	r1, r1
 5d0:	2f 93       	push	r18
 5d2:	3f 93       	push	r19
 5d4:	4f 93       	push	r20
 5d6:	5f 93       	push	r21
 5d8:	6f 93       	push	r22
 5da:	7f 93       	push	r23
 5dc:	8f 93       	push	r24
 5de:	9f 93       	push	r25
 5e0:	af 93       	push	r26
 5e2:	bf 93       	push	r27
 5e4:	ef 93       	push	r30
 5e6:	ff 93       	push	r31
	sEOS_SCH_Tasks();
 5e8:	0e 94 87 02 	call	0x50e	; 0x50e <sEOS_SCH_Tasks>
 5ec:	ff 91       	pop	r31
 5ee:	ef 91       	pop	r30
 5f0:	bf 91       	pop	r27
 5f2:	af 91       	pop	r26
 5f4:	9f 91       	pop	r25
 5f6:	8f 91       	pop	r24
 5f8:	7f 91       	pop	r23
 5fa:	6f 91       	pop	r22
 5fc:	5f 91       	pop	r21
 5fe:	4f 91       	pop	r20
 600:	3f 91       	pop	r19
 602:	2f 91       	pop	r18
 604:	0f 90       	pop	r0
 606:	0f be       	out	0x3f, r0	; 63
 608:	0f 90       	pop	r0
 60a:	1f 90       	pop	r1
 60c:	18 95       	reti

0000060e <TIMERS_InitTimer1>:

void TIMERS_InitTimer1(){
	//Modo Fast PWM con top = 0x00FF (Modo 5)
	//Prescaler en 1024
	//Modo invertido (clear on count reset)
	TCCR1A |= (1 << WGM10) | (1<< COM1A1) | (1<< COM1B1);
 60e:	e0 e8       	ldi	r30, 0x80	; 128
 610:	f0 e0       	ldi	r31, 0x00	; 0
 612:	80 81       	ld	r24, Z
 614:	81 6a       	ori	r24, 0xA1	; 161
 616:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << CS12) | (1 << CS10);
 618:	e1 e8       	ldi	r30, 0x81	; 129
 61a:	f0 e0       	ldi	r31, 0x00	; 0
 61c:	80 81       	ld	r24, Z
 61e:	8d 60       	ori	r24, 0x0D	; 13
 620:	80 83       	st	Z, r24
 622:	08 95       	ret

00000624 <__subsf3>:
 624:	50 58       	subi	r21, 0x80	; 128

00000626 <__addsf3>:
 626:	bb 27       	eor	r27, r27
 628:	aa 27       	eor	r26, r26
 62a:	0e 94 2a 03 	call	0x654	; 0x654 <__addsf3x>
 62e:	0c 94 02 04 	jmp	0x804	; 0x804 <__fp_round>
 632:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <__fp_pscA>
 636:	38 f0       	brcs	.+14     	; 0x646 <__addsf3+0x20>
 638:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__fp_pscB>
 63c:	20 f0       	brcs	.+8      	; 0x646 <__addsf3+0x20>
 63e:	39 f4       	brne	.+14     	; 0x64e <__addsf3+0x28>
 640:	9f 3f       	cpi	r25, 0xFF	; 255
 642:	19 f4       	brne	.+6      	; 0x64a <__addsf3+0x24>
 644:	26 f4       	brtc	.+8      	; 0x64e <__addsf3+0x28>
 646:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__fp_nan>
 64a:	0e f4       	brtc	.+2      	; 0x64e <__addsf3+0x28>
 64c:	e0 95       	com	r30
 64e:	e7 fb       	bst	r30, 7
 650:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__fp_inf>

00000654 <__addsf3x>:
 654:	e9 2f       	mov	r30, r25
 656:	0e 94 13 04 	call	0x826	; 0x826 <__fp_split3>
 65a:	58 f3       	brcs	.-42     	; 0x632 <__addsf3+0xc>
 65c:	ba 17       	cp	r27, r26
 65e:	62 07       	cpc	r22, r18
 660:	73 07       	cpc	r23, r19
 662:	84 07       	cpc	r24, r20
 664:	95 07       	cpc	r25, r21
 666:	20 f0       	brcs	.+8      	; 0x670 <__addsf3x+0x1c>
 668:	79 f4       	brne	.+30     	; 0x688 <__addsf3x+0x34>
 66a:	a6 f5       	brtc	.+104    	; 0x6d4 <__addsf3x+0x80>
 66c:	0c 94 35 04 	jmp	0x86a	; 0x86a <__fp_zero>
 670:	0e f4       	brtc	.+2      	; 0x674 <__addsf3x+0x20>
 672:	e0 95       	com	r30
 674:	0b 2e       	mov	r0, r27
 676:	ba 2f       	mov	r27, r26
 678:	a0 2d       	mov	r26, r0
 67a:	0b 01       	movw	r0, r22
 67c:	b9 01       	movw	r22, r18
 67e:	90 01       	movw	r18, r0
 680:	0c 01       	movw	r0, r24
 682:	ca 01       	movw	r24, r20
 684:	a0 01       	movw	r20, r0
 686:	11 24       	eor	r1, r1
 688:	ff 27       	eor	r31, r31
 68a:	59 1b       	sub	r21, r25
 68c:	99 f0       	breq	.+38     	; 0x6b4 <__addsf3x+0x60>
 68e:	59 3f       	cpi	r21, 0xF9	; 249
 690:	50 f4       	brcc	.+20     	; 0x6a6 <__addsf3x+0x52>
 692:	50 3e       	cpi	r21, 0xE0	; 224
 694:	68 f1       	brcs	.+90     	; 0x6f0 <__addsf3x+0x9c>
 696:	1a 16       	cp	r1, r26
 698:	f0 40       	sbci	r31, 0x00	; 0
 69a:	a2 2f       	mov	r26, r18
 69c:	23 2f       	mov	r18, r19
 69e:	34 2f       	mov	r19, r20
 6a0:	44 27       	eor	r20, r20
 6a2:	58 5f       	subi	r21, 0xF8	; 248
 6a4:	f3 cf       	rjmp	.-26     	; 0x68c <__addsf3x+0x38>
 6a6:	46 95       	lsr	r20
 6a8:	37 95       	ror	r19
 6aa:	27 95       	ror	r18
 6ac:	a7 95       	ror	r26
 6ae:	f0 40       	sbci	r31, 0x00	; 0
 6b0:	53 95       	inc	r21
 6b2:	c9 f7       	brne	.-14     	; 0x6a6 <__addsf3x+0x52>
 6b4:	7e f4       	brtc	.+30     	; 0x6d4 <__addsf3x+0x80>
 6b6:	1f 16       	cp	r1, r31
 6b8:	ba 0b       	sbc	r27, r26
 6ba:	62 0b       	sbc	r22, r18
 6bc:	73 0b       	sbc	r23, r19
 6be:	84 0b       	sbc	r24, r20
 6c0:	ba f0       	brmi	.+46     	; 0x6f0 <__addsf3x+0x9c>
 6c2:	91 50       	subi	r25, 0x01	; 1
 6c4:	a1 f0       	breq	.+40     	; 0x6ee <__addsf3x+0x9a>
 6c6:	ff 0f       	add	r31, r31
 6c8:	bb 1f       	adc	r27, r27
 6ca:	66 1f       	adc	r22, r22
 6cc:	77 1f       	adc	r23, r23
 6ce:	88 1f       	adc	r24, r24
 6d0:	c2 f7       	brpl	.-16     	; 0x6c2 <__addsf3x+0x6e>
 6d2:	0e c0       	rjmp	.+28     	; 0x6f0 <__addsf3x+0x9c>
 6d4:	ba 0f       	add	r27, r26
 6d6:	62 1f       	adc	r22, r18
 6d8:	73 1f       	adc	r23, r19
 6da:	84 1f       	adc	r24, r20
 6dc:	48 f4       	brcc	.+18     	; 0x6f0 <__addsf3x+0x9c>
 6de:	87 95       	ror	r24
 6e0:	77 95       	ror	r23
 6e2:	67 95       	ror	r22
 6e4:	b7 95       	ror	r27
 6e6:	f7 95       	ror	r31
 6e8:	9e 3f       	cpi	r25, 0xFE	; 254
 6ea:	08 f0       	brcs	.+2      	; 0x6ee <__addsf3x+0x9a>
 6ec:	b0 cf       	rjmp	.-160    	; 0x64e <__addsf3+0x28>
 6ee:	93 95       	inc	r25
 6f0:	88 0f       	add	r24, r24
 6f2:	08 f0       	brcs	.+2      	; 0x6f6 <__addsf3x+0xa2>
 6f4:	99 27       	eor	r25, r25
 6f6:	ee 0f       	add	r30, r30
 6f8:	97 95       	ror	r25
 6fa:	87 95       	ror	r24
 6fc:	08 95       	ret

000006fe <__fixunssfsi>:
 6fe:	0e 94 1b 04 	call	0x836	; 0x836 <__fp_splitA>
 702:	88 f0       	brcs	.+34     	; 0x726 <__fixunssfsi+0x28>
 704:	9f 57       	subi	r25, 0x7F	; 127
 706:	98 f0       	brcs	.+38     	; 0x72e <__fixunssfsi+0x30>
 708:	b9 2f       	mov	r27, r25
 70a:	99 27       	eor	r25, r25
 70c:	b7 51       	subi	r27, 0x17	; 23
 70e:	b0 f0       	brcs	.+44     	; 0x73c <__fixunssfsi+0x3e>
 710:	e1 f0       	breq	.+56     	; 0x74a <__fixunssfsi+0x4c>
 712:	66 0f       	add	r22, r22
 714:	77 1f       	adc	r23, r23
 716:	88 1f       	adc	r24, r24
 718:	99 1f       	adc	r25, r25
 71a:	1a f0       	brmi	.+6      	; 0x722 <__fixunssfsi+0x24>
 71c:	ba 95       	dec	r27
 71e:	c9 f7       	brne	.-14     	; 0x712 <__fixunssfsi+0x14>
 720:	14 c0       	rjmp	.+40     	; 0x74a <__fixunssfsi+0x4c>
 722:	b1 30       	cpi	r27, 0x01	; 1
 724:	91 f0       	breq	.+36     	; 0x74a <__fixunssfsi+0x4c>
 726:	0e 94 35 04 	call	0x86a	; 0x86a <__fp_zero>
 72a:	b1 e0       	ldi	r27, 0x01	; 1
 72c:	08 95       	ret
 72e:	0c 94 35 04 	jmp	0x86a	; 0x86a <__fp_zero>
 732:	67 2f       	mov	r22, r23
 734:	78 2f       	mov	r23, r24
 736:	88 27       	eor	r24, r24
 738:	b8 5f       	subi	r27, 0xF8	; 248
 73a:	39 f0       	breq	.+14     	; 0x74a <__fixunssfsi+0x4c>
 73c:	b9 3f       	cpi	r27, 0xF9	; 249
 73e:	cc f3       	brlt	.-14     	; 0x732 <__fixunssfsi+0x34>
 740:	86 95       	lsr	r24
 742:	77 95       	ror	r23
 744:	67 95       	ror	r22
 746:	b3 95       	inc	r27
 748:	d9 f7       	brne	.-10     	; 0x740 <__fixunssfsi+0x42>
 74a:	3e f4       	brtc	.+14     	; 0x75a <__fixunssfsi+0x5c>
 74c:	90 95       	com	r25
 74e:	80 95       	com	r24
 750:	70 95       	com	r23
 752:	61 95       	neg	r22
 754:	7f 4f       	sbci	r23, 0xFF	; 255
 756:	8f 4f       	sbci	r24, 0xFF	; 255
 758:	9f 4f       	sbci	r25, 0xFF	; 255
 75a:	08 95       	ret

0000075c <__floatunsisf>:
 75c:	e8 94       	clt
 75e:	09 c0       	rjmp	.+18     	; 0x772 <__floatsisf+0x12>

00000760 <__floatsisf>:
 760:	97 fb       	bst	r25, 7
 762:	3e f4       	brtc	.+14     	; 0x772 <__floatsisf+0x12>
 764:	90 95       	com	r25
 766:	80 95       	com	r24
 768:	70 95       	com	r23
 76a:	61 95       	neg	r22
 76c:	7f 4f       	sbci	r23, 0xFF	; 255
 76e:	8f 4f       	sbci	r24, 0xFF	; 255
 770:	9f 4f       	sbci	r25, 0xFF	; 255
 772:	99 23       	and	r25, r25
 774:	a9 f0       	breq	.+42     	; 0x7a0 <__floatsisf+0x40>
 776:	f9 2f       	mov	r31, r25
 778:	96 e9       	ldi	r25, 0x96	; 150
 77a:	bb 27       	eor	r27, r27
 77c:	93 95       	inc	r25
 77e:	f6 95       	lsr	r31
 780:	87 95       	ror	r24
 782:	77 95       	ror	r23
 784:	67 95       	ror	r22
 786:	b7 95       	ror	r27
 788:	f1 11       	cpse	r31, r1
 78a:	f8 cf       	rjmp	.-16     	; 0x77c <__floatsisf+0x1c>
 78c:	fa f4       	brpl	.+62     	; 0x7cc <__floatsisf+0x6c>
 78e:	bb 0f       	add	r27, r27
 790:	11 f4       	brne	.+4      	; 0x796 <__floatsisf+0x36>
 792:	60 ff       	sbrs	r22, 0
 794:	1b c0       	rjmp	.+54     	; 0x7cc <__floatsisf+0x6c>
 796:	6f 5f       	subi	r22, 0xFF	; 255
 798:	7f 4f       	sbci	r23, 0xFF	; 255
 79a:	8f 4f       	sbci	r24, 0xFF	; 255
 79c:	9f 4f       	sbci	r25, 0xFF	; 255
 79e:	16 c0       	rjmp	.+44     	; 0x7cc <__floatsisf+0x6c>
 7a0:	88 23       	and	r24, r24
 7a2:	11 f0       	breq	.+4      	; 0x7a8 <__floatsisf+0x48>
 7a4:	96 e9       	ldi	r25, 0x96	; 150
 7a6:	11 c0       	rjmp	.+34     	; 0x7ca <__floatsisf+0x6a>
 7a8:	77 23       	and	r23, r23
 7aa:	21 f0       	breq	.+8      	; 0x7b4 <__floatsisf+0x54>
 7ac:	9e e8       	ldi	r25, 0x8E	; 142
 7ae:	87 2f       	mov	r24, r23
 7b0:	76 2f       	mov	r23, r22
 7b2:	05 c0       	rjmp	.+10     	; 0x7be <__floatsisf+0x5e>
 7b4:	66 23       	and	r22, r22
 7b6:	71 f0       	breq	.+28     	; 0x7d4 <__floatsisf+0x74>
 7b8:	96 e8       	ldi	r25, 0x86	; 134
 7ba:	86 2f       	mov	r24, r22
 7bc:	70 e0       	ldi	r23, 0x00	; 0
 7be:	60 e0       	ldi	r22, 0x00	; 0
 7c0:	2a f0       	brmi	.+10     	; 0x7cc <__floatsisf+0x6c>
 7c2:	9a 95       	dec	r25
 7c4:	66 0f       	add	r22, r22
 7c6:	77 1f       	adc	r23, r23
 7c8:	88 1f       	adc	r24, r24
 7ca:	da f7       	brpl	.-10     	; 0x7c2 <__floatsisf+0x62>
 7cc:	88 0f       	add	r24, r24
 7ce:	96 95       	lsr	r25
 7d0:	87 95       	ror	r24
 7d2:	97 f9       	bld	r25, 7
 7d4:	08 95       	ret

000007d6 <__fp_inf>:
 7d6:	97 f9       	bld	r25, 7
 7d8:	9f 67       	ori	r25, 0x7F	; 127
 7da:	80 e8       	ldi	r24, 0x80	; 128
 7dc:	70 e0       	ldi	r23, 0x00	; 0
 7de:	60 e0       	ldi	r22, 0x00	; 0
 7e0:	08 95       	ret

000007e2 <__fp_nan>:
 7e2:	9f ef       	ldi	r25, 0xFF	; 255
 7e4:	80 ec       	ldi	r24, 0xC0	; 192
 7e6:	08 95       	ret

000007e8 <__fp_pscA>:
 7e8:	00 24       	eor	r0, r0
 7ea:	0a 94       	dec	r0
 7ec:	16 16       	cp	r1, r22
 7ee:	17 06       	cpc	r1, r23
 7f0:	18 06       	cpc	r1, r24
 7f2:	09 06       	cpc	r0, r25
 7f4:	08 95       	ret

000007f6 <__fp_pscB>:
 7f6:	00 24       	eor	r0, r0
 7f8:	0a 94       	dec	r0
 7fa:	12 16       	cp	r1, r18
 7fc:	13 06       	cpc	r1, r19
 7fe:	14 06       	cpc	r1, r20
 800:	05 06       	cpc	r0, r21
 802:	08 95       	ret

00000804 <__fp_round>:
 804:	09 2e       	mov	r0, r25
 806:	03 94       	inc	r0
 808:	00 0c       	add	r0, r0
 80a:	11 f4       	brne	.+4      	; 0x810 <__fp_round+0xc>
 80c:	88 23       	and	r24, r24
 80e:	52 f0       	brmi	.+20     	; 0x824 <__fp_round+0x20>
 810:	bb 0f       	add	r27, r27
 812:	40 f4       	brcc	.+16     	; 0x824 <__fp_round+0x20>
 814:	bf 2b       	or	r27, r31
 816:	11 f4       	brne	.+4      	; 0x81c <__fp_round+0x18>
 818:	60 ff       	sbrs	r22, 0
 81a:	04 c0       	rjmp	.+8      	; 0x824 <__fp_round+0x20>
 81c:	6f 5f       	subi	r22, 0xFF	; 255
 81e:	7f 4f       	sbci	r23, 0xFF	; 255
 820:	8f 4f       	sbci	r24, 0xFF	; 255
 822:	9f 4f       	sbci	r25, 0xFF	; 255
 824:	08 95       	ret

00000826 <__fp_split3>:
 826:	57 fd       	sbrc	r21, 7
 828:	90 58       	subi	r25, 0x80	; 128
 82a:	44 0f       	add	r20, r20
 82c:	55 1f       	adc	r21, r21
 82e:	59 f0       	breq	.+22     	; 0x846 <__fp_splitA+0x10>
 830:	5f 3f       	cpi	r21, 0xFF	; 255
 832:	71 f0       	breq	.+28     	; 0x850 <__fp_splitA+0x1a>
 834:	47 95       	ror	r20

00000836 <__fp_splitA>:
 836:	88 0f       	add	r24, r24
 838:	97 fb       	bst	r25, 7
 83a:	99 1f       	adc	r25, r25
 83c:	61 f0       	breq	.+24     	; 0x856 <__fp_splitA+0x20>
 83e:	9f 3f       	cpi	r25, 0xFF	; 255
 840:	79 f0       	breq	.+30     	; 0x860 <__fp_splitA+0x2a>
 842:	87 95       	ror	r24
 844:	08 95       	ret
 846:	12 16       	cp	r1, r18
 848:	13 06       	cpc	r1, r19
 84a:	14 06       	cpc	r1, r20
 84c:	55 1f       	adc	r21, r21
 84e:	f2 cf       	rjmp	.-28     	; 0x834 <__fp_split3+0xe>
 850:	46 95       	lsr	r20
 852:	f1 df       	rcall	.-30     	; 0x836 <__fp_splitA>
 854:	08 c0       	rjmp	.+16     	; 0x866 <__fp_splitA+0x30>
 856:	16 16       	cp	r1, r22
 858:	17 06       	cpc	r1, r23
 85a:	18 06       	cpc	r1, r24
 85c:	99 1f       	adc	r25, r25
 85e:	f1 cf       	rjmp	.-30     	; 0x842 <__fp_splitA+0xc>
 860:	86 95       	lsr	r24
 862:	71 05       	cpc	r23, r1
 864:	61 05       	cpc	r22, r1
 866:	08 94       	sec
 868:	08 95       	ret

0000086a <__fp_zero>:
 86a:	e8 94       	clt

0000086c <__fp_szero>:
 86c:	bb 27       	eor	r27, r27
 86e:	66 27       	eor	r22, r22
 870:	77 27       	eor	r23, r23
 872:	cb 01       	movw	r24, r22
 874:	97 f9       	bld	r25, 7
 876:	08 95       	ret

00000878 <__mulsf3>:
 878:	0e 94 4f 04 	call	0x89e	; 0x89e <__mulsf3x>
 87c:	0c 94 02 04 	jmp	0x804	; 0x804 <__fp_round>
 880:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <__fp_pscA>
 884:	38 f0       	brcs	.+14     	; 0x894 <__mulsf3+0x1c>
 886:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__fp_pscB>
 88a:	20 f0       	brcs	.+8      	; 0x894 <__mulsf3+0x1c>
 88c:	95 23       	and	r25, r21
 88e:	11 f0       	breq	.+4      	; 0x894 <__mulsf3+0x1c>
 890:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__fp_inf>
 894:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__fp_nan>
 898:	11 24       	eor	r1, r1
 89a:	0c 94 36 04 	jmp	0x86c	; 0x86c <__fp_szero>

0000089e <__mulsf3x>:
 89e:	0e 94 13 04 	call	0x826	; 0x826 <__fp_split3>
 8a2:	70 f3       	brcs	.-36     	; 0x880 <__mulsf3+0x8>

000008a4 <__mulsf3_pse>:
 8a4:	95 9f       	mul	r25, r21
 8a6:	c1 f3       	breq	.-16     	; 0x898 <__mulsf3+0x20>
 8a8:	95 0f       	add	r25, r21
 8aa:	50 e0       	ldi	r21, 0x00	; 0
 8ac:	55 1f       	adc	r21, r21
 8ae:	62 9f       	mul	r22, r18
 8b0:	f0 01       	movw	r30, r0
 8b2:	72 9f       	mul	r23, r18
 8b4:	bb 27       	eor	r27, r27
 8b6:	f0 0d       	add	r31, r0
 8b8:	b1 1d       	adc	r27, r1
 8ba:	63 9f       	mul	r22, r19
 8bc:	aa 27       	eor	r26, r26
 8be:	f0 0d       	add	r31, r0
 8c0:	b1 1d       	adc	r27, r1
 8c2:	aa 1f       	adc	r26, r26
 8c4:	64 9f       	mul	r22, r20
 8c6:	66 27       	eor	r22, r22
 8c8:	b0 0d       	add	r27, r0
 8ca:	a1 1d       	adc	r26, r1
 8cc:	66 1f       	adc	r22, r22
 8ce:	82 9f       	mul	r24, r18
 8d0:	22 27       	eor	r18, r18
 8d2:	b0 0d       	add	r27, r0
 8d4:	a1 1d       	adc	r26, r1
 8d6:	62 1f       	adc	r22, r18
 8d8:	73 9f       	mul	r23, r19
 8da:	b0 0d       	add	r27, r0
 8dc:	a1 1d       	adc	r26, r1
 8de:	62 1f       	adc	r22, r18
 8e0:	83 9f       	mul	r24, r19
 8e2:	a0 0d       	add	r26, r0
 8e4:	61 1d       	adc	r22, r1
 8e6:	22 1f       	adc	r18, r18
 8e8:	74 9f       	mul	r23, r20
 8ea:	33 27       	eor	r19, r19
 8ec:	a0 0d       	add	r26, r0
 8ee:	61 1d       	adc	r22, r1
 8f0:	23 1f       	adc	r18, r19
 8f2:	84 9f       	mul	r24, r20
 8f4:	60 0d       	add	r22, r0
 8f6:	21 1d       	adc	r18, r1
 8f8:	82 2f       	mov	r24, r18
 8fa:	76 2f       	mov	r23, r22
 8fc:	6a 2f       	mov	r22, r26
 8fe:	11 24       	eor	r1, r1
 900:	9f 57       	subi	r25, 0x7F	; 127
 902:	50 40       	sbci	r21, 0x00	; 0
 904:	9a f0       	brmi	.+38     	; 0x92c <__stack+0x2d>
 906:	f1 f0       	breq	.+60     	; 0x944 <__stack+0x45>
 908:	88 23       	and	r24, r24
 90a:	4a f0       	brmi	.+18     	; 0x91e <__stack+0x1f>
 90c:	ee 0f       	add	r30, r30
 90e:	ff 1f       	adc	r31, r31
 910:	bb 1f       	adc	r27, r27
 912:	66 1f       	adc	r22, r22
 914:	77 1f       	adc	r23, r23
 916:	88 1f       	adc	r24, r24
 918:	91 50       	subi	r25, 0x01	; 1
 91a:	50 40       	sbci	r21, 0x00	; 0
 91c:	a9 f7       	brne	.-22     	; 0x908 <__stack+0x9>
 91e:	9e 3f       	cpi	r25, 0xFE	; 254
 920:	51 05       	cpc	r21, r1
 922:	80 f0       	brcs	.+32     	; 0x944 <__stack+0x45>
 924:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__fp_inf>
 928:	0c 94 36 04 	jmp	0x86c	; 0x86c <__fp_szero>
 92c:	5f 3f       	cpi	r21, 0xFF	; 255
 92e:	e4 f3       	brlt	.-8      	; 0x928 <__stack+0x29>
 930:	98 3e       	cpi	r25, 0xE8	; 232
 932:	d4 f3       	brlt	.-12     	; 0x928 <__stack+0x29>
 934:	86 95       	lsr	r24
 936:	77 95       	ror	r23
 938:	67 95       	ror	r22
 93a:	b7 95       	ror	r27
 93c:	f7 95       	ror	r31
 93e:	e7 95       	ror	r30
 940:	9f 5f       	subi	r25, 0xFF	; 255
 942:	c1 f7       	brne	.-16     	; 0x934 <__stack+0x35>
 944:	fe 2b       	or	r31, r30
 946:	88 0f       	add	r24, r24
 948:	91 1d       	adc	r25, r1
 94a:	96 95       	lsr	r25
 94c:	87 95       	ror	r24
 94e:	97 f9       	bld	r25, 7
 950:	08 95       	ret

00000952 <round>:
 952:	0e 94 1b 04 	call	0x836	; 0x836 <__fp_splitA>
 956:	e8 f0       	brcs	.+58     	; 0x992 <round+0x40>
 958:	9e 37       	cpi	r25, 0x7E	; 126
 95a:	e8 f0       	brcs	.+58     	; 0x996 <round+0x44>
 95c:	96 39       	cpi	r25, 0x96	; 150
 95e:	b8 f4       	brcc	.+46     	; 0x98e <round+0x3c>
 960:	9e 38       	cpi	r25, 0x8E	; 142
 962:	48 f4       	brcc	.+18     	; 0x976 <round+0x24>
 964:	67 2f       	mov	r22, r23
 966:	78 2f       	mov	r23, r24
 968:	88 27       	eor	r24, r24
 96a:	98 5f       	subi	r25, 0xF8	; 248
 96c:	f9 cf       	rjmp	.-14     	; 0x960 <round+0xe>
 96e:	86 95       	lsr	r24
 970:	77 95       	ror	r23
 972:	67 95       	ror	r22
 974:	93 95       	inc	r25
 976:	95 39       	cpi	r25, 0x95	; 149
 978:	d0 f3       	brcs	.-12     	; 0x96e <round+0x1c>
 97a:	b6 2f       	mov	r27, r22
 97c:	b1 70       	andi	r27, 0x01	; 1
 97e:	6b 0f       	add	r22, r27
 980:	71 1d       	adc	r23, r1
 982:	81 1d       	adc	r24, r1
 984:	20 f4       	brcc	.+8      	; 0x98e <round+0x3c>
 986:	87 95       	ror	r24
 988:	77 95       	ror	r23
 98a:	67 95       	ror	r22
 98c:	93 95       	inc	r25
 98e:	0c 94 cd 04 	jmp	0x99a	; 0x99a <__fp_mintl>
 992:	0c 94 e8 04 	jmp	0x9d0	; 0x9d0 <__fp_mpack>
 996:	0c 94 36 04 	jmp	0x86c	; 0x86c <__fp_szero>

0000099a <__fp_mintl>:
 99a:	88 23       	and	r24, r24
 99c:	71 f4       	brne	.+28     	; 0x9ba <__fp_mintl+0x20>
 99e:	77 23       	and	r23, r23
 9a0:	21 f0       	breq	.+8      	; 0x9aa <__fp_mintl+0x10>
 9a2:	98 50       	subi	r25, 0x08	; 8
 9a4:	87 2b       	or	r24, r23
 9a6:	76 2f       	mov	r23, r22
 9a8:	07 c0       	rjmp	.+14     	; 0x9b8 <__fp_mintl+0x1e>
 9aa:	66 23       	and	r22, r22
 9ac:	11 f4       	brne	.+4      	; 0x9b2 <__fp_mintl+0x18>
 9ae:	99 27       	eor	r25, r25
 9b0:	0d c0       	rjmp	.+26     	; 0x9cc <__fp_mintl+0x32>
 9b2:	90 51       	subi	r25, 0x10	; 16
 9b4:	86 2b       	or	r24, r22
 9b6:	70 e0       	ldi	r23, 0x00	; 0
 9b8:	60 e0       	ldi	r22, 0x00	; 0
 9ba:	2a f0       	brmi	.+10     	; 0x9c6 <__fp_mintl+0x2c>
 9bc:	9a 95       	dec	r25
 9be:	66 0f       	add	r22, r22
 9c0:	77 1f       	adc	r23, r23
 9c2:	88 1f       	adc	r24, r24
 9c4:	da f7       	brpl	.-10     	; 0x9bc <__fp_mintl+0x22>
 9c6:	88 0f       	add	r24, r24
 9c8:	96 95       	lsr	r25
 9ca:	87 95       	ror	r24
 9cc:	97 f9       	bld	r25, 7
 9ce:	08 95       	ret

000009d0 <__fp_mpack>:
 9d0:	9f 3f       	cpi	r25, 0xFF	; 255
 9d2:	31 f0       	breq	.+12     	; 0x9e0 <__fp_mpack_finite+0xc>

000009d4 <__fp_mpack_finite>:
 9d4:	91 50       	subi	r25, 0x01	; 1
 9d6:	20 f4       	brcc	.+8      	; 0x9e0 <__fp_mpack_finite+0xc>
 9d8:	87 95       	ror	r24
 9da:	77 95       	ror	r23
 9dc:	67 95       	ror	r22
 9de:	b7 95       	ror	r27
 9e0:	88 0f       	add	r24, r24
 9e2:	91 1d       	adc	r25, r1
 9e4:	96 95       	lsr	r25
 9e6:	87 95       	ror	r24
 9e8:	97 f9       	bld	r25, 7
 9ea:	08 95       	ret

000009ec <_exit>:
 9ec:	f8 94       	cli

000009ee <__stop_program>:
 9ee:	ff cf       	rjmp	.-2      	; 0x9ee <__stop_program>


TP4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000a6a  00000afe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a6a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000036  00800106  00800106  00000b04  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b04  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  00000b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001462  00000000  00000000  00000d64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b32  00000000  00000000  000021c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000da0  00000000  00000000  00002cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b4  00000000  00000000  00003a98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000076e  00000000  00000000  00003e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000058a  00000000  00000000  000045ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00004b44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 20 03 	jmp	0x640	; 0x640 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e6       	ldi	r30, 0x6A	; 106
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 33       	cpi	r26, 0x3C	; 60
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 94 01 	call	0x328	; 0x328 <main>
  9e:	0c 94 33 05 	jmp	0xa66	; 0xa66 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LDR_config>:

uint16_t result = 0;
uint8_t is_converting = 0;

void LDR_config(){
	DIDR0= 0x01; //Digital Input Disable (opcional)
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
	ADCSRA= 0x87;//make ADC enable and select ck/128
  ac:	87 e8       	ldi	r24, 0x87	; 135
  ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	ADMUX= 0x00;// Vref=AVCC, right-justified, ADC0 pin
  b2:	ec e7       	ldi	r30, 0x7C	; 124
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	10 82       	st	Z, r1
	ADMUX |= (1<<REFS0);
  b8:	80 81       	ld	r24, Z
  ba:	80 64       	ori	r24, 0x40	; 64
  bc:	80 83       	st	Z, r24
  be:	08 95       	ret

000000c0 <LDR_Update>:
		result = ADC;
	}
}*/

void LDR_Update(){
	if (!is_converting){
  c0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
  c4:	81 11       	cpse	r24, r1
  c6:	08 c0       	rjmp	.+16     	; 0xd8 <LDR_Update+0x18>
		ADCSRA |= (1<<ADSC);//start conversion
  c8:	ea e7       	ldi	r30, 0x7A	; 122
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	80 64       	ori	r24, 0x40	; 64
  d0:	80 83       	st	Z, r24
		is_converting = 1;
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
	}
	if ((ADCSRA&(1<<ADIF))==0) {//wait for conversion to finish
  d8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  dc:	84 fd       	sbrc	r24, 4
  de:	0f c0       	rjmp	.+30     	; 0xfe <LDR_Update+0x3e>
		ADCSRA |= (1<<ADIF); //borrar flag
  e0:	ea e7       	ldi	r30, 0x7A	; 122
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	80 61       	ori	r24, 0x10	; 16
  e8:	80 83       	st	Z, r24
		result = (uint16_t) ADC;
  ea:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  ee:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  f2:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <result+0x1>
  f6:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <result>
		is_converting = 0;
  fa:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
  fe:	08 95       	ret

00000100 <LDR_get_value>:
	}
}

uint16_t LDR_get_value(){
	return result;
 100:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <result>
 104:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <result+0x1>
 108:	08 95       	ret

0000010a <distributeValues>:
void LEDS_setFinalGreen(uint8_t value){
	final_green = value;
}

void LEDS_setFinalBlue(uint8_t value){
	final_blue = value;
 10a:	cf 93       	push	r28
 10c:	5d ec       	ldi	r21, 0xCD	; 205
 10e:	85 9f       	mul	r24, r21
 110:	a1 2d       	mov	r26, r1
 112:	11 24       	eor	r1, r1
 114:	a6 95       	lsr	r26
 116:	a6 95       	lsr	r26
 118:	a6 95       	lsr	r26
 11a:	2a 2f       	mov	r18, r26
 11c:	22 0f       	add	r18, r18
 11e:	92 2f       	mov	r25, r18
 120:	99 0f       	add	r25, r25
 122:	99 0f       	add	r25, r25
 124:	92 0f       	add	r25, r18
 126:	c8 2f       	mov	r28, r24
 128:	c9 1b       	sub	r28, r25
 12a:	65 9f       	mul	r22, r21
 12c:	71 2d       	mov	r23, r1
 12e:	11 24       	eor	r1, r1
 130:	76 95       	lsr	r23
 132:	76 95       	lsr	r23
 134:	76 95       	lsr	r23
 136:	97 2f       	mov	r25, r23
 138:	99 0f       	add	r25, r25
 13a:	89 2f       	mov	r24, r25
 13c:	88 0f       	add	r24, r24
 13e:	88 0f       	add	r24, r24
 140:	89 0f       	add	r24, r25
 142:	b6 2f       	mov	r27, r22
 144:	b8 1b       	sub	r27, r24
 146:	45 9f       	mul	r20, r21
 148:	51 2d       	mov	r21, r1
 14a:	11 24       	eor	r1, r1
 14c:	56 95       	lsr	r21
 14e:	56 95       	lsr	r21
 150:	56 95       	lsr	r21
 152:	95 2f       	mov	r25, r21
 154:	99 0f       	add	r25, r25
 156:	89 2f       	mov	r24, r25
 158:	88 0f       	add	r24, r24
 15a:	88 0f       	add	r24, r24
 15c:	89 0f       	add	r24, r25
 15e:	64 2f       	mov	r22, r20
 160:	68 1b       	sub	r22, r24
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	21 c0       	rjmp	.+66     	; 0x1a8 <distributeValues+0x9e>
 166:	28 2f       	mov	r18, r24
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	8c 17       	cp	r24, r28
 16c:	18 f4       	brcc	.+6      	; 0x174 <distributeValues+0x6a>
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	9a 0f       	add	r25, r26
 172:	01 c0       	rjmp	.+2      	; 0x176 <distributeValues+0x6c>
 174:	9a 2f       	mov	r25, r26
 176:	f9 01       	movw	r30, r18
 178:	e3 5e       	subi	r30, 0xE3	; 227
 17a:	fe 4f       	sbci	r31, 0xFE	; 254
 17c:	90 83       	st	Z, r25
 17e:	8b 17       	cp	r24, r27
 180:	18 f4       	brcc	.+6      	; 0x188 <distributeValues+0x7e>
 182:	91 e0       	ldi	r25, 0x01	; 1
 184:	97 0f       	add	r25, r23
 186:	01 c0       	rjmp	.+2      	; 0x18a <distributeValues+0x80>
 188:	97 2f       	mov	r25, r23
 18a:	f9 01       	movw	r30, r18
 18c:	ed 5e       	subi	r30, 0xED	; 237
 18e:	fe 4f       	sbci	r31, 0xFE	; 254
 190:	90 83       	st	Z, r25
 192:	86 17       	cp	r24, r22
 194:	18 f4       	brcc	.+6      	; 0x19c <distributeValues+0x92>
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	95 0f       	add	r25, r21
 19a:	01 c0       	rjmp	.+2      	; 0x19e <distributeValues+0x94>
 19c:	95 2f       	mov	r25, r21
 19e:	f9 01       	movw	r30, r18
 1a0:	e7 5f       	subi	r30, 0xF7	; 247
 1a2:	fe 4f       	sbci	r31, 0xFE	; 254
 1a4:	90 83       	st	Z, r25
 1a6:	8f 5f       	subi	r24, 0xFF	; 255
 1a8:	8a 30       	cpi	r24, 0x0A	; 10
 1aa:	e8 f2       	brcs	.-70     	; 0x166 <distributeValues+0x5c>
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <LEDS_setRed>:
 1b0:	cf 93       	push	r28
 1b2:	c8 2f       	mov	r28, r24
 1b4:	0e 94 0f 03 	call	0x61e	; 0x61e <PWM_set_comp_value>
 1b8:	c0 93 29 01 	sts	0x0129, r28	; 0x800129 <red>
 1bc:	cf 91       	pop	r28
 1be:	08 95       	ret

000001c0 <LEDS_setGreen>:
 1c0:	2f ef       	ldi	r18, 0xFF	; 255
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	28 1b       	sub	r18, r24
 1c6:	31 09       	sbc	r19, r1
 1c8:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 1cc:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 1d0:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <green>
 1d4:	08 95       	ret

000001d6 <LEDS_setBlue>:
 1d6:	2f ef       	ldi	r18, 0xFF	; 255
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	28 1b       	sub	r18, r24
 1dc:	31 09       	sbc	r19, r1
 1de:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1e2:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 1e6:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <blue>
 1ea:	08 95       	ret

000001ec <LEDS_init>:
 1ec:	84 b1       	in	r24, 0x04	; 4
 1ee:	86 62       	ori	r24, 0x26	; 38
 1f0:	84 b9       	out	0x04, r24	; 4
 1f2:	85 b1       	in	r24, 0x05	; 5
 1f4:	80 62       	ori	r24, 0x20	; 32
 1f6:	85 b9       	out	0x05, r24	; 5
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LEDS_setRed>
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LEDS_setGreen>
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LEDS_setBlue>
 20a:	20 e0       	ldi	r18, 0x00	; 0
 20c:	0f c0       	rjmp	.+30     	; 0x22c <LEDS_init+0x40>
 20e:	82 2f       	mov	r24, r18
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	fc 01       	movw	r30, r24
 214:	e3 5e       	subi	r30, 0xE3	; 227
 216:	fe 4f       	sbci	r31, 0xFE	; 254
 218:	10 82       	st	Z, r1
 21a:	fc 01       	movw	r30, r24
 21c:	ed 5e       	subi	r30, 0xED	; 237
 21e:	fe 4f       	sbci	r31, 0xFE	; 254
 220:	10 82       	st	Z, r1
 222:	fc 01       	movw	r30, r24
 224:	e7 5f       	subi	r30, 0xF7	; 247
 226:	fe 4f       	sbci	r31, 0xFE	; 254
 228:	10 82       	st	Z, r1
 22a:	2f 5f       	subi	r18, 0xFF	; 255
 22c:	2a 30       	cpi	r18, 0x0A	; 10
 22e:	78 f3       	brcs	.-34     	; 0x20e <LEDS_init+0x22>
 230:	08 95       	ret

00000232 <LEDS_getRed>:
 232:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <red>
 236:	08 95       	ret

00000238 <LEDS_getGreen>:
 238:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <green>
 23c:	08 95       	ret

0000023e <LEDS_getBlue>:
 23e:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <blue>
 242:	08 95       	ret

00000244 <LEDS_getFinalRed>:
}

uint8_t LEDS_getFinalRed(){
	return final_red;
}
 244:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <final_red>
 248:	08 95       	ret

0000024a <LEDS_getFinalGreen>:

uint8_t LEDS_getFinalGreen(){
	return final_green;
}
 24a:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <final_green>
 24e:	08 95       	ret

00000250 <LEDS_getFinalBlue>:

uint8_t LEDS_getFinalBlue(){
	return final_blue;
}
 250:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <final_blue>
 254:	08 95       	ret

00000256 <LEDS_setFinalRGB>:

void LEDS_setFinalRGB(uint8_t valueR, uint8_t valueG, uint8_t valueB){
	final_red = valueR;
 256:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <final_red>
	final_green = valueG;
 25a:	60 93 2b 01 	sts	0x012B, r22	; 0x80012b <final_green>
	final_blue = valueB;
 25e:	40 93 2a 01 	sts	0x012A, r20	; 0x80012a <final_blue>
	distributeValues(valueR, valueG, valueB);
 262:	0e 94 85 00 	call	0x10a	; 0x10a <distributeValues>
 266:	08 95       	ret

00000268 <LEDS_incrementRed>:
}

void LEDS_incrementRed(uint16_t value){
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	ec 01       	movw	r28, r24
	LEDS_setRed(LEDS_getRed() + red_increments[value]);
 26e:	0e 94 19 01 	call	0x232	; 0x232 <LEDS_getRed>
 272:	c3 5e       	subi	r28, 0xE3	; 227
 274:	de 4f       	sbci	r29, 0xFE	; 254
 276:	98 81       	ld	r25, Y
 278:	89 0f       	add	r24, r25
 27a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LEDS_setRed>
}
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	08 95       	ret

00000284 <LEDS_incrementGreen>:

void LEDS_incrementGreen(uint16_t value){
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
 288:	ec 01       	movw	r28, r24
	LEDS_setGreen(LEDS_getGreen() + green_increments[value]);
 28a:	0e 94 1c 01 	call	0x238	; 0x238 <LEDS_getGreen>
 28e:	cd 5e       	subi	r28, 0xED	; 237
 290:	de 4f       	sbci	r29, 0xFE	; 254
 292:	98 81       	ld	r25, Y
 294:	89 0f       	add	r24, r25
 296:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LEDS_setGreen>
	
}
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	08 95       	ret

000002a0 <LEDS_incrementBlue>:

void LEDS_incrementBlue(uint16_t value){
 2a0:	cf 93       	push	r28
 2a2:	df 93       	push	r29
 2a4:	ec 01       	movw	r28, r24
	LEDS_setBlue(LEDS_getBlue() + blue_increments[value]);
 2a6:	0e 94 1f 01 	call	0x23e	; 0x23e <LEDS_getBlue>
 2aa:	c7 5f       	subi	r28, 0xF7	; 247
 2ac:	de 4f       	sbci	r29, 0xFE	; 254
 2ae:	98 81       	ld	r25, Y
 2b0:	89 0f       	add	r24, r25
 2b2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LEDS_setBlue>
}
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	08 95       	ret

000002bc <LEDS_decrementRed>:

void LEDS_decrementRed(uint16_t value){
 2bc:	cf 93       	push	r28
 2be:	df 93       	push	r29
 2c0:	ec 01       	movw	r28, r24
	LEDS_setRed(LEDS_getRed() - red_increments[9 - value]);
 2c2:	0e 94 19 01 	call	0x232	; 0x232 <LEDS_getRed>
 2c6:	e9 e0       	ldi	r30, 0x09	; 9
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	ec 1b       	sub	r30, r28
 2cc:	fd 0b       	sbc	r31, r29
 2ce:	e3 5e       	subi	r30, 0xE3	; 227
 2d0:	fe 4f       	sbci	r31, 0xFE	; 254
 2d2:	90 81       	ld	r25, Z
 2d4:	89 1b       	sub	r24, r25
 2d6:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LEDS_setRed>
}
 2da:	df 91       	pop	r29
 2dc:	cf 91       	pop	r28
 2de:	08 95       	ret

000002e0 <LEDS_decrementGreen>:

void LEDS_decrementGreen(uint16_t value){
 2e0:	cf 93       	push	r28
 2e2:	df 93       	push	r29
 2e4:	ec 01       	movw	r28, r24
	LEDS_setGreen(LEDS_getGreen() - green_increments[9 - value]);
 2e6:	0e 94 1c 01 	call	0x238	; 0x238 <LEDS_getGreen>
 2ea:	e9 e0       	ldi	r30, 0x09	; 9
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	ec 1b       	sub	r30, r28
 2f0:	fd 0b       	sbc	r31, r29
 2f2:	ed 5e       	subi	r30, 0xED	; 237
 2f4:	fe 4f       	sbci	r31, 0xFE	; 254
 2f6:	90 81       	ld	r25, Z
 2f8:	89 1b       	sub	r24, r25
 2fa:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LEDS_setGreen>
}
 2fe:	df 91       	pop	r29
 300:	cf 91       	pop	r28
 302:	08 95       	ret

00000304 <LEDS_decrementBlue>:

void LEDS_decrementBlue(uint16_t value){
 304:	cf 93       	push	r28
 306:	df 93       	push	r29
 308:	ec 01       	movw	r28, r24
	LEDS_setBlue(LEDS_getBlue() - blue_increments[9 - value]);
 30a:	0e 94 1f 01 	call	0x23e	; 0x23e <LEDS_getBlue>
 30e:	e9 e0       	ldi	r30, 0x09	; 9
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	ec 1b       	sub	r30, r28
 314:	fd 0b       	sbc	r31, r29
 316:	e7 5f       	subi	r30, 0xF7	; 247
 318:	fe 4f       	sbci	r31, 0xFE	; 254
 31a:	90 81       	ld	r25, Z
 31c:	89 1b       	sub	r24, r25
 31e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LEDS_setBlue>
}
 322:	df 91       	pop	r29
 324:	cf 91       	pop	r28
 326:	08 95       	ret

00000328 <main>:


int main(void)
{
	
	TIMERS_InitTimer0();
 328:	0e 94 12 03 	call	0x624	; 0x624 <TIMERS_InitTimer0>
	TIMERS_InitTimer1();
 32c:	0e 94 44 03 	call	0x688	; 0x688 <TIMERS_InitTimer1>
	
	LEDS_init();
 330:	0e 94 f6 00 	call	0x1ec	; 0x1ec <LEDS_init>
	MEF_init();
 334:	0e 94 af 01 	call	0x35e	; 0x35e <MEF_init>
	LEDS_setFinalRGB(204, 255, 229);
 338:	45 ee       	ldi	r20, 0xE5	; 229
 33a:	6f ef       	ldi	r22, 0xFF	; 255
 33c:	8c ec       	ldi	r24, 0xCC	; 204
 33e:	0e 94 2b 01 	call	0x256	; 0x256 <LEDS_setFinalRGB>
	
	LDR_config();
 342:	0e 94 53 00 	call	0xa6	; 0xa6 <LDR_config>
	
	PWM_soft_init();
 346:	0e 94 08 03 	call	0x610	; 0x610 <PWM_soft_init>
	
	//Test PB4 como salida y un 1 en la misma
	DDRB |= (1 << PORTB4);
 34a:	84 b1       	in	r24, 0x04	; 4
 34c:	80 61       	ori	r24, 0x10	; 16
 34e:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1 << PORTB4);
 350:	85 b1       	in	r24, 0x05	; 5
 352:	8f 7e       	andi	r24, 0xEF	; 239
 354:	85 b9       	out	0x05, r24	; 5
	
	sei();
 356:	78 94       	sei
	
    while(1)
    {
		sEOS_Dispatch_Tasks();
 358:	0e 94 ab 02 	call	0x556	; 0x556 <sEOS_Dispatch_Tasks>
 35c:	fd cf       	rjmp	.-6      	; 0x358 <main+0x30>

0000035e <MEF_init>:
static uint16_t timeOff = 20;
static double pendiente;
static uint16_t desplazamiento;

void MEF_init(){
	state = OFF;
 35e:	83 e0       	ldi	r24, 0x03	; 3
 360:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <state>
	stateCount = 0;
 364:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <stateCount+0x1>
 368:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <stateCount>

	pendiente = (40-100) / (MIN_SUP_LDR - MAX_INF_LDR);
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	a0 e8       	ldi	r26, 0x80	; 128
 372:	bf eb       	ldi	r27, 0xBF	; 191
 374:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <pendiente>
 378:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <pendiente+0x1>
 37c:	a0 93 31 01 	sts	0x0131, r26	; 0x800131 <pendiente+0x2>
 380:	b0 93 32 01 	sts	0x0132, r27	; 0x800132 <pendiente+0x3>
	desplazamiento = 100 + round(pendiente * MAX_INF_LDR);
 384:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <desplazamiento+0x1>
 388:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <desplazamiento>
 38c:	08 95       	ret

0000038e <update_timeOff>:
}

void  update_timeOff(){
 38e:	cf 92       	push	r12
 390:	df 92       	push	r13
 392:	ef 92       	push	r14
 394:	ff 92       	push	r15
	uint16_t LDR_value = LDR_get_value();
 396:	0e 94 80 00 	call	0x100	; 0x100 <LDR_get_value>
	
	// Caso en el que Tparpadeo = 5seg (minima luz o menos)
	if (LDR_value < MAX_INF_LDR){
 39a:	84 36       	cpi	r24, 0x64	; 100
 39c:	91 05       	cpc	r25, r1
 39e:	38 f4       	brcc	.+14     	; 0x3ae <update_timeOff+0x20>
		timeOff = 100;
 3a0:	84 e6       	ldi	r24, 0x64	; 100
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3a8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 3ac:	2f c0       	rjmp	.+94     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
	}
	// Caso en el que Tparepadeo = 2seg (luz ambiente o mas)
	else if (LDR_value > MIN_SUP_LDR){
 3ae:	87 39       	cpi	r24, 0x97	; 151
 3b0:	91 05       	cpc	r25, r1
 3b2:	38 f0       	brcs	.+14     	; 0x3c2 <update_timeOff+0x34>
		timeOff = 40;
 3b4:	88 e2       	ldi	r24, 0x28	; 40
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3bc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 3c0:	25 c0       	rjmp	.+74     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
	}
	else {
		timeOff = desplazamiento - round(pendiente*LDR_value); // Parte de la recta con pendiente m negativa
 3c2:	bc 01       	movw	r22, r24
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__floatunsisf>
 3cc:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <pendiente>
 3d0:	30 91 30 01 	lds	r19, 0x0130	; 0x800130 <pendiente+0x1>
 3d4:	40 91 31 01 	lds	r20, 0x0131	; 0x800131 <pendiente+0x2>
 3d8:	50 91 32 01 	lds	r21, 0x0132	; 0x800132 <pendiente+0x3>
 3dc:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__mulsf3>
 3e0:	0e 94 e6 04 	call	0x9cc	; 0x9cc <round>
 3e4:	6b 01       	movw	r12, r22
 3e6:	7c 01       	movw	r14, r24
 3e8:	60 91 2d 01 	lds	r22, 0x012D	; 0x80012d <desplazamiento>
 3ec:	70 91 2e 01 	lds	r23, 0x012E	; 0x80012e <desplazamiento+0x1>
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__floatunsisf>
 3f8:	a7 01       	movw	r20, r14
 3fa:	96 01       	movw	r18, r12
 3fc:	0e 94 4f 03 	call	0x69e	; 0x69e <__subsf3>
 400:	0e 94 bc 03 	call	0x778	; 0x778 <__fixunssfsi>
 404:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 408:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
 40c:	ff 90       	pop	r15
 40e:	ef 90       	pop	r14
 410:	df 90       	pop	r13
 412:	cf 90       	pop	r12
 414:	08 95       	ret

00000416 <MEF_Update>:

void MEF_Update(){
	stateCount++;
 416:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <stateCount>
 41a:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <stateCount+0x1>
 41e:	01 96       	adiw	r24, 0x01	; 1
 420:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <stateCount+0x1>
 424:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <stateCount>
	
	switch (state){
 428:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <state>
 42c:	81 30       	cpi	r24, 0x01	; 1
 42e:	09 f4       	brne	.+2      	; 0x432 <MEF_Update+0x1c>
 430:	4f c0       	rjmp	.+158    	; 0x4d0 <MEF_Update+0xba>
 432:	38 f1       	brcs	.+78     	; 0x482 <MEF_Update+0x6c>
 434:	82 30       	cpi	r24, 0x02	; 2
 436:	09 f4       	brne	.+2      	; 0x43a <MEF_Update+0x24>
 438:	68 c0       	rjmp	.+208    	; 0x50a <MEF_Update+0xf4>
 43a:	83 30       	cpi	r24, 0x03	; 3
 43c:	09 f0       	breq	.+2      	; 0x440 <MEF_Update+0x2a>
 43e:	8a c0       	rjmp	.+276    	; 0x554 <MEF_Update+0x13e>
		case OFF:
			PORTB |= (1<<PORTB4);
 440:	85 b1       	in	r24, 0x05	; 5
 442:	80 61       	ori	r24, 0x10	; 16
 444:	85 b9       	out	0x05, r24	; 5
			
			LEDS_setRed(0);
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LEDS_setRed>
			LEDS_setGreen(0);
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LEDS_setGreen>
			LEDS_setBlue(0);
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LEDS_setBlue>
			
			update_timeOff();
 458:	0e 94 c7 01 	call	0x38e	; 0x38e <update_timeOff>
			if(stateCount >= timeOff){
 45c:	20 91 33 01 	lds	r18, 0x0133	; 0x800133 <stateCount>
 460:	30 91 34 01 	lds	r19, 0x0134	; 0x800134 <stateCount+0x1>
 464:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 468:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 46c:	28 17       	cp	r18, r24
 46e:	39 07       	cpc	r19, r25
 470:	08 f4       	brcc	.+2      	; 0x474 <MEF_Update+0x5e>
 472:	70 c0       	rjmp	.+224    	; 0x554 <MEF_Update+0x13e>
				state = RAISING;
 474:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <state>
				stateCount = 0;
 478:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <stateCount+0x1>
 47c:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <stateCount>
 480:	08 95       	ret
			}
			break;
			
		case RAISING:
			PORTB |= (1<<PORTB4);
 482:	85 b1       	in	r24, 0x05	; 5
 484:	80 61       	ori	r24, 0x10	; 16
 486:	85 b9       	out	0x05, r24	; 5
			
			LEDS_incrementRed(stateCount - 1);
 488:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <stateCount>
 48c:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <stateCount+0x1>
 490:	01 97       	sbiw	r24, 0x01	; 1
 492:	0e 94 34 01 	call	0x268	; 0x268 <LEDS_incrementRed>
			LEDS_incrementGreen(stateCount - 1);
 496:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <stateCount>
 49a:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <stateCount+0x1>
 49e:	01 97       	sbiw	r24, 0x01	; 1
 4a0:	0e 94 42 01 	call	0x284	; 0x284 <LEDS_incrementGreen>
			LEDS_incrementBlue(stateCount - 1);
 4a4:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <stateCount>
 4a8:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <stateCount+0x1>
 4ac:	01 97       	sbiw	r24, 0x01	; 1
 4ae:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LEDS_incrementBlue>
			
			if(stateCount == 10){
 4b2:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <stateCount>
 4b6:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <stateCount+0x1>
 4ba:	0a 97       	sbiw	r24, 0x0a	; 10
 4bc:	09 f0       	breq	.+2      	; 0x4c0 <MEF_Update+0xaa>
 4be:	4a c0       	rjmp	.+148    	; 0x554 <MEF_Update+0x13e>
				state = ON;
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <state>
				stateCount = 0;
 4c6:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <stateCount+0x1>
 4ca:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <stateCount>
 4ce:	08 95       	ret
			}
			break;
			
		case ON:
			PORTB &= ~(1<<PORTB4);
 4d0:	85 b1       	in	r24, 0x05	; 5
 4d2:	8f 7e       	andi	r24, 0xEF	; 239
 4d4:	85 b9       	out	0x05, r24	; 5

			
			LEDS_setRed(LEDS_getFinalRed());
 4d6:	0e 94 22 01 	call	0x244	; 0x244 <LEDS_getFinalRed>
 4da:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LEDS_setRed>
			LEDS_setGreen(LEDS_getFinalGreen());
 4de:	0e 94 25 01 	call	0x24a	; 0x24a <LEDS_getFinalGreen>
 4e2:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LEDS_setGreen>
			LEDS_setBlue(LEDS_getFinalBlue());
 4e6:	0e 94 28 01 	call	0x250	; 0x250 <LEDS_getFinalBlue>
 4ea:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LEDS_setBlue>
			
			if(stateCount == 20){
 4ee:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <stateCount>
 4f2:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <stateCount+0x1>
 4f6:	44 97       	sbiw	r24, 0x14	; 20
 4f8:	69 f5       	brne	.+90     	; 0x554 <MEF_Update+0x13e>
				state = FALLING;
 4fa:	82 e0       	ldi	r24, 0x02	; 2
 4fc:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <state>
				stateCount = 0;
 500:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <stateCount+0x1>
 504:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <stateCount>
 508:	08 95       	ret
			}
			break;
			
		case FALLING:
			PORTB |= (1<<PORTB4);
 50a:	85 b1       	in	r24, 0x05	; 5
 50c:	80 61       	ori	r24, 0x10	; 16
 50e:	85 b9       	out	0x05, r24	; 5
			
			LEDS_decrementRed(stateCount - 1);
 510:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <stateCount>
 514:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <stateCount+0x1>
 518:	01 97       	sbiw	r24, 0x01	; 1
 51a:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LEDS_decrementRed>
			LEDS_decrementGreen(stateCount - 1);
 51e:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <stateCount>
 522:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <stateCount+0x1>
 526:	01 97       	sbiw	r24, 0x01	; 1
 528:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LEDS_decrementGreen>
			LEDS_decrementBlue(stateCount - 1);
 52c:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <stateCount>
 530:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <stateCount+0x1>
 534:	01 97       	sbiw	r24, 0x01	; 1
 536:	0e 94 82 01 	call	0x304	; 0x304 <LEDS_decrementBlue>
			
			if(stateCount == 10){
 53a:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <stateCount>
 53e:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <stateCount+0x1>
 542:	0a 97       	sbiw	r24, 0x0a	; 10
 544:	39 f4       	brne	.+14     	; 0x554 <MEF_Update+0x13e>
				state = OFF;
 546:	83 e0       	ldi	r24, 0x03	; 3
 548:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <state>
				stateCount = 0;
 54c:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <stateCount+0x1>
 550:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <stateCount>
 554:	08 95       	ret

00000556 <sEOS_Dispatch_Tasks>:
static volatile uint16_t counter_LDR = 0;
static volatile uint8_t FLAG_LDR = 0;


void sEOS_Dispatch_Tasks(){
	if(FLAG_MEF){
 556:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <FLAG_MEF>
 55a:	88 23       	and	r24, r24
 55c:	29 f0       	breq	.+10     	; 0x568 <sEOS_Dispatch_Tasks+0x12>
		MEF_Update();
 55e:	0e 94 0b 02 	call	0x416	; 0x416 <MEF_Update>
		FLAG_MEF = 0;	
 562:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <FLAG_MEF>
 566:	08 95       	ret
	}
	else if (FLAG_LDR){
 568:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <FLAG_LDR>
 56c:	88 23       	and	r24, r24
 56e:	21 f0       	breq	.+8      	; 0x578 <sEOS_Dispatch_Tasks+0x22>
		LDR_Update();
 570:	0e 94 60 00 	call	0xc0	; 0xc0 <LDR_Update>
		FLAG_LDR = 0;
 574:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <FLAG_LDR>
 578:	08 95       	ret

0000057a <sEOS_SCH_Tasks>:
	}
}

void sEOS_SCH_Tasks(){
	//Cada 50 ms pone el flag en 1
	if (++counter_MEF == 781) {
 57a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <counter_MEF>
 57e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <counter_MEF+0x1>
 582:	01 96       	adiw	r24, 0x01	; 1
 584:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <counter_MEF+0x1>
 588:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <counter_MEF>
 58c:	8d 30       	cpi	r24, 0x0D	; 13
 58e:	93 40       	sbci	r25, 0x03	; 3
 590:	39 f4       	brne	.+14     	; 0x5a0 <sEOS_SCH_Tasks+0x26>
		FLAG_MEF = 1;
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <FLAG_MEF>
		counter_MEF = 0;
 598:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <counter_MEF+0x1>
 59c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <counter_MEF>
	}
	if (++counter_LDR == 2) {
 5a0:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <counter_LDR>
 5a4:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <counter_LDR+0x1>
 5a8:	01 96       	adiw	r24, 0x01	; 1
 5aa:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <counter_LDR+0x1>
 5ae:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <counter_LDR>
 5b2:	02 97       	sbiw	r24, 0x02	; 2
 5b4:	39 f4       	brne	.+14     	; 0x5c4 <sEOS_SCH_Tasks+0x4a>
		FLAG_LDR = 1;
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <FLAG_LDR>
		counter_LDR = 0;
 5bc:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <counter_LDR+0x1>
 5c0:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <counter_LDR>
	}
	PWM_soft_Update();
 5c4:	0e 94 e5 02 	call	0x5ca	; 0x5ca <PWM_soft_Update>
 5c8:	08 95       	ret

000005ca <PWM_soft_Update>:
	PWM_OFF;
}

uint8_t PWM_get_comp_value(){
	return PWM_DELTA;
}
 5ca:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <PWM_position>
 5ce:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <PWM_position+0x1>
 5d2:	01 96       	adiw	r24, 0x01	; 1
 5d4:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <PWM_position+0x1>
 5d8:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <PWM_position>
 5dc:	8f 3f       	cpi	r24, 0xFF	; 255
 5de:	91 05       	cpc	r25, r1
 5e0:	49 f0       	breq	.+18     	; 0x5f4 <PWM_soft_Update+0x2a>
 5e2:	40 f0       	brcs	.+16     	; 0x5f4 <PWM_soft_Update+0x2a>
 5e4:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <PWM_position+0x1>
 5e8:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <PWM_position>
 5ec:	85 b1       	in	r24, 0x05	; 5
 5ee:	80 62       	ori	r24, 0x20	; 32
 5f0:	85 b9       	out	0x05, r24	; 5
 5f2:	08 95       	ret
 5f4:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <PWM_DELTA>
 5f8:	30 e0       	ldi	r19, 0x00	; 0
 5fa:	82 17       	cp	r24, r18
 5fc:	93 07       	cpc	r25, r19
 5fe:	20 f4       	brcc	.+8      	; 0x608 <PWM_soft_Update+0x3e>
 600:	85 b1       	in	r24, 0x05	; 5
 602:	8f 7d       	andi	r24, 0xDF	; 223
 604:	85 b9       	out	0x05, r24	; 5
 606:	08 95       	ret
 608:	85 b1       	in	r24, 0x05	; 5
 60a:	80 62       	ori	r24, 0x20	; 32
 60c:	85 b9       	out	0x05, r24	; 5
 60e:	08 95       	ret

00000610 <PWM_soft_init>:
 610:	84 b1       	in	r24, 0x04	; 4
 612:	80 62       	ori	r24, 0x20	; 32
 614:	84 b9       	out	0x04, r24	; 4
 616:	85 b1       	in	r24, 0x05	; 5
 618:	8f 7d       	andi	r24, 0xDF	; 223
 61a:	85 b9       	out	0x05, r24	; 5
 61c:	08 95       	ret

0000061e <PWM_set_comp_value>:

void PWM_set_comp_value(uint8_t value){
	PWM_DELTA = value;
 61e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <PWM_DELTA>
 622:	08 95       	ret

00000624 <TIMERS_InitTimer0>:
	OCR0A = 249;
	*/
	
	// Interrupcion cada 64 us
	// Prescaler en 8
	TCCR0A |= (1 << WGM01); // Modo CTC
 624:	84 b5       	in	r24, 0x24	; 36
 626:	82 60       	ori	r24, 0x02	; 2
 628:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS01);
 62a:	85 b5       	in	r24, 0x25	; 37
 62c:	82 60       	ori	r24, 0x02	; 2
 62e:	85 bd       	out	0x25, r24	; 37
	OCR0A = 127;
 630:	8f e7       	ldi	r24, 0x7F	; 127
 632:	87 bd       	out	0x27, r24	; 39
	
	TIMSK0 |= (1 << OCIE0A);
 634:	ee e6       	ldi	r30, 0x6E	; 110
 636:	f0 e0       	ldi	r31, 0x00	; 0
 638:	80 81       	ld	r24, Z
 63a:	82 60       	ori	r24, 0x02	; 2
 63c:	80 83       	st	Z, r24
 63e:	08 95       	ret

00000640 <__vector_14>:
	
}

ISR(TIMER0_COMPA_vect){
 640:	1f 92       	push	r1
 642:	0f 92       	push	r0
 644:	0f b6       	in	r0, 0x3f	; 63
 646:	0f 92       	push	r0
 648:	11 24       	eor	r1, r1
 64a:	2f 93       	push	r18
 64c:	3f 93       	push	r19
 64e:	4f 93       	push	r20
 650:	5f 93       	push	r21
 652:	6f 93       	push	r22
 654:	7f 93       	push	r23
 656:	8f 93       	push	r24
 658:	9f 93       	push	r25
 65a:	af 93       	push	r26
 65c:	bf 93       	push	r27
 65e:	ef 93       	push	r30
 660:	ff 93       	push	r31
	sEOS_SCH_Tasks();
 662:	0e 94 bd 02 	call	0x57a	; 0x57a <sEOS_SCH_Tasks>
 666:	ff 91       	pop	r31
 668:	ef 91       	pop	r30
 66a:	bf 91       	pop	r27
 66c:	af 91       	pop	r26
 66e:	9f 91       	pop	r25
 670:	8f 91       	pop	r24
 672:	7f 91       	pop	r23
 674:	6f 91       	pop	r22
 676:	5f 91       	pop	r21
 678:	4f 91       	pop	r20
 67a:	3f 91       	pop	r19
 67c:	2f 91       	pop	r18
 67e:	0f 90       	pop	r0
 680:	0f be       	out	0x3f, r0	; 63
 682:	0f 90       	pop	r0
 684:	1f 90       	pop	r1
 686:	18 95       	reti

00000688 <TIMERS_InitTimer1>:
// Init timer
void TIMERS_InitTimer1(){
	//Modo Fast PWM con top = 0x00FF (Modo 5)
	//Prescaler en 1024
	//Modo invertido (clear on count reset)
	TCCR1A |= (1 << WGM10) | (1<< COM1A1) | (1<< COM1B1);
 688:	e0 e8       	ldi	r30, 0x80	; 128
 68a:	f0 e0       	ldi	r31, 0x00	; 0
 68c:	80 81       	ld	r24, Z
 68e:	81 6a       	ori	r24, 0xA1	; 161
 690:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << CS12) | (1 << CS10);// | (1 << CS10) ;
 692:	e1 e8       	ldi	r30, 0x81	; 129
 694:	f0 e0       	ldi	r31, 0x00	; 0
 696:	80 81       	ld	r24, Z
 698:	8d 60       	ori	r24, 0x0D	; 13
 69a:	80 83       	st	Z, r24
 69c:	08 95       	ret

0000069e <__subsf3>:
 69e:	50 58       	subi	r21, 0x80	; 128

000006a0 <__addsf3>:
 6a0:	bb 27       	eor	r27, r27
 6a2:	aa 27       	eor	r26, r26
 6a4:	0e 94 67 03 	call	0x6ce	; 0x6ce <__addsf3x>
 6a8:	0c 94 3f 04 	jmp	0x87e	; 0x87e <__fp_round>
 6ac:	0e 94 31 04 	call	0x862	; 0x862 <__fp_pscA>
 6b0:	38 f0       	brcs	.+14     	; 0x6c0 <__addsf3+0x20>
 6b2:	0e 94 38 04 	call	0x870	; 0x870 <__fp_pscB>
 6b6:	20 f0       	brcs	.+8      	; 0x6c0 <__addsf3+0x20>
 6b8:	39 f4       	brne	.+14     	; 0x6c8 <__addsf3+0x28>
 6ba:	9f 3f       	cpi	r25, 0xFF	; 255
 6bc:	19 f4       	brne	.+6      	; 0x6c4 <__addsf3+0x24>
 6be:	26 f4       	brtc	.+8      	; 0x6c8 <__addsf3+0x28>
 6c0:	0c 94 2e 04 	jmp	0x85c	; 0x85c <__fp_nan>
 6c4:	0e f4       	brtc	.+2      	; 0x6c8 <__addsf3+0x28>
 6c6:	e0 95       	com	r30
 6c8:	e7 fb       	bst	r30, 7
 6ca:	0c 94 28 04 	jmp	0x850	; 0x850 <__fp_inf>

000006ce <__addsf3x>:
 6ce:	e9 2f       	mov	r30, r25
 6d0:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__fp_split3>
 6d4:	58 f3       	brcs	.-42     	; 0x6ac <__addsf3+0xc>
 6d6:	ba 17       	cp	r27, r26
 6d8:	62 07       	cpc	r22, r18
 6da:	73 07       	cpc	r23, r19
 6dc:	84 07       	cpc	r24, r20
 6de:	95 07       	cpc	r25, r21
 6e0:	20 f0       	brcs	.+8      	; 0x6ea <__addsf3x+0x1c>
 6e2:	79 f4       	brne	.+30     	; 0x702 <__addsf3x+0x34>
 6e4:	a6 f5       	brtc	.+104    	; 0x74e <__addsf3x+0x80>
 6e6:	0c 94 72 04 	jmp	0x8e4	; 0x8e4 <__fp_zero>
 6ea:	0e f4       	brtc	.+2      	; 0x6ee <__addsf3x+0x20>
 6ec:	e0 95       	com	r30
 6ee:	0b 2e       	mov	r0, r27
 6f0:	ba 2f       	mov	r27, r26
 6f2:	a0 2d       	mov	r26, r0
 6f4:	0b 01       	movw	r0, r22
 6f6:	b9 01       	movw	r22, r18
 6f8:	90 01       	movw	r18, r0
 6fa:	0c 01       	movw	r0, r24
 6fc:	ca 01       	movw	r24, r20
 6fe:	a0 01       	movw	r20, r0
 700:	11 24       	eor	r1, r1
 702:	ff 27       	eor	r31, r31
 704:	59 1b       	sub	r21, r25
 706:	99 f0       	breq	.+38     	; 0x72e <__addsf3x+0x60>
 708:	59 3f       	cpi	r21, 0xF9	; 249
 70a:	50 f4       	brcc	.+20     	; 0x720 <__addsf3x+0x52>
 70c:	50 3e       	cpi	r21, 0xE0	; 224
 70e:	68 f1       	brcs	.+90     	; 0x76a <__addsf3x+0x9c>
 710:	1a 16       	cp	r1, r26
 712:	f0 40       	sbci	r31, 0x00	; 0
 714:	a2 2f       	mov	r26, r18
 716:	23 2f       	mov	r18, r19
 718:	34 2f       	mov	r19, r20
 71a:	44 27       	eor	r20, r20
 71c:	58 5f       	subi	r21, 0xF8	; 248
 71e:	f3 cf       	rjmp	.-26     	; 0x706 <__addsf3x+0x38>
 720:	46 95       	lsr	r20
 722:	37 95       	ror	r19
 724:	27 95       	ror	r18
 726:	a7 95       	ror	r26
 728:	f0 40       	sbci	r31, 0x00	; 0
 72a:	53 95       	inc	r21
 72c:	c9 f7       	brne	.-14     	; 0x720 <__addsf3x+0x52>
 72e:	7e f4       	brtc	.+30     	; 0x74e <__addsf3x+0x80>
 730:	1f 16       	cp	r1, r31
 732:	ba 0b       	sbc	r27, r26
 734:	62 0b       	sbc	r22, r18
 736:	73 0b       	sbc	r23, r19
 738:	84 0b       	sbc	r24, r20
 73a:	ba f0       	brmi	.+46     	; 0x76a <__addsf3x+0x9c>
 73c:	91 50       	subi	r25, 0x01	; 1
 73e:	a1 f0       	breq	.+40     	; 0x768 <__addsf3x+0x9a>
 740:	ff 0f       	add	r31, r31
 742:	bb 1f       	adc	r27, r27
 744:	66 1f       	adc	r22, r22
 746:	77 1f       	adc	r23, r23
 748:	88 1f       	adc	r24, r24
 74a:	c2 f7       	brpl	.-16     	; 0x73c <__addsf3x+0x6e>
 74c:	0e c0       	rjmp	.+28     	; 0x76a <__addsf3x+0x9c>
 74e:	ba 0f       	add	r27, r26
 750:	62 1f       	adc	r22, r18
 752:	73 1f       	adc	r23, r19
 754:	84 1f       	adc	r24, r20
 756:	48 f4       	brcc	.+18     	; 0x76a <__addsf3x+0x9c>
 758:	87 95       	ror	r24
 75a:	77 95       	ror	r23
 75c:	67 95       	ror	r22
 75e:	b7 95       	ror	r27
 760:	f7 95       	ror	r31
 762:	9e 3f       	cpi	r25, 0xFE	; 254
 764:	08 f0       	brcs	.+2      	; 0x768 <__addsf3x+0x9a>
 766:	b0 cf       	rjmp	.-160    	; 0x6c8 <__addsf3+0x28>
 768:	93 95       	inc	r25
 76a:	88 0f       	add	r24, r24
 76c:	08 f0       	brcs	.+2      	; 0x770 <__addsf3x+0xa2>
 76e:	99 27       	eor	r25, r25
 770:	ee 0f       	add	r30, r30
 772:	97 95       	ror	r25
 774:	87 95       	ror	r24
 776:	08 95       	ret

00000778 <__fixunssfsi>:
 778:	0e 94 58 04 	call	0x8b0	; 0x8b0 <__fp_splitA>
 77c:	88 f0       	brcs	.+34     	; 0x7a0 <__fixunssfsi+0x28>
 77e:	9f 57       	subi	r25, 0x7F	; 127
 780:	98 f0       	brcs	.+38     	; 0x7a8 <__fixunssfsi+0x30>
 782:	b9 2f       	mov	r27, r25
 784:	99 27       	eor	r25, r25
 786:	b7 51       	subi	r27, 0x17	; 23
 788:	b0 f0       	brcs	.+44     	; 0x7b6 <__fixunssfsi+0x3e>
 78a:	e1 f0       	breq	.+56     	; 0x7c4 <__fixunssfsi+0x4c>
 78c:	66 0f       	add	r22, r22
 78e:	77 1f       	adc	r23, r23
 790:	88 1f       	adc	r24, r24
 792:	99 1f       	adc	r25, r25
 794:	1a f0       	brmi	.+6      	; 0x79c <__fixunssfsi+0x24>
 796:	ba 95       	dec	r27
 798:	c9 f7       	brne	.-14     	; 0x78c <__fixunssfsi+0x14>
 79a:	14 c0       	rjmp	.+40     	; 0x7c4 <__fixunssfsi+0x4c>
 79c:	b1 30       	cpi	r27, 0x01	; 1
 79e:	91 f0       	breq	.+36     	; 0x7c4 <__fixunssfsi+0x4c>
 7a0:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__fp_zero>
 7a4:	b1 e0       	ldi	r27, 0x01	; 1
 7a6:	08 95       	ret
 7a8:	0c 94 72 04 	jmp	0x8e4	; 0x8e4 <__fp_zero>
 7ac:	67 2f       	mov	r22, r23
 7ae:	78 2f       	mov	r23, r24
 7b0:	88 27       	eor	r24, r24
 7b2:	b8 5f       	subi	r27, 0xF8	; 248
 7b4:	39 f0       	breq	.+14     	; 0x7c4 <__fixunssfsi+0x4c>
 7b6:	b9 3f       	cpi	r27, 0xF9	; 249
 7b8:	cc f3       	brlt	.-14     	; 0x7ac <__fixunssfsi+0x34>
 7ba:	86 95       	lsr	r24
 7bc:	77 95       	ror	r23
 7be:	67 95       	ror	r22
 7c0:	b3 95       	inc	r27
 7c2:	d9 f7       	brne	.-10     	; 0x7ba <__fixunssfsi+0x42>
 7c4:	3e f4       	brtc	.+14     	; 0x7d4 <__fixunssfsi+0x5c>
 7c6:	90 95       	com	r25
 7c8:	80 95       	com	r24
 7ca:	70 95       	com	r23
 7cc:	61 95       	neg	r22
 7ce:	7f 4f       	sbci	r23, 0xFF	; 255
 7d0:	8f 4f       	sbci	r24, 0xFF	; 255
 7d2:	9f 4f       	sbci	r25, 0xFF	; 255
 7d4:	08 95       	ret

000007d6 <__floatunsisf>:
 7d6:	e8 94       	clt
 7d8:	09 c0       	rjmp	.+18     	; 0x7ec <__floatsisf+0x12>

000007da <__floatsisf>:
 7da:	97 fb       	bst	r25, 7
 7dc:	3e f4       	brtc	.+14     	; 0x7ec <__floatsisf+0x12>
 7de:	90 95       	com	r25
 7e0:	80 95       	com	r24
 7e2:	70 95       	com	r23
 7e4:	61 95       	neg	r22
 7e6:	7f 4f       	sbci	r23, 0xFF	; 255
 7e8:	8f 4f       	sbci	r24, 0xFF	; 255
 7ea:	9f 4f       	sbci	r25, 0xFF	; 255
 7ec:	99 23       	and	r25, r25
 7ee:	a9 f0       	breq	.+42     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 7f0:	f9 2f       	mov	r31, r25
 7f2:	96 e9       	ldi	r25, 0x96	; 150
 7f4:	bb 27       	eor	r27, r27
 7f6:	93 95       	inc	r25
 7f8:	f6 95       	lsr	r31
 7fa:	87 95       	ror	r24
 7fc:	77 95       	ror	r23
 7fe:	67 95       	ror	r22
 800:	b7 95       	ror	r27
 802:	f1 11       	cpse	r31, r1
 804:	f8 cf       	rjmp	.-16     	; 0x7f6 <__floatsisf+0x1c>
 806:	fa f4       	brpl	.+62     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 808:	bb 0f       	add	r27, r27
 80a:	11 f4       	brne	.+4      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 80c:	60 ff       	sbrs	r22, 0
 80e:	1b c0       	rjmp	.+54     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 810:	6f 5f       	subi	r22, 0xFF	; 255
 812:	7f 4f       	sbci	r23, 0xFF	; 255
 814:	8f 4f       	sbci	r24, 0xFF	; 255
 816:	9f 4f       	sbci	r25, 0xFF	; 255
 818:	16 c0       	rjmp	.+44     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 81a:	88 23       	and	r24, r24
 81c:	11 f0       	breq	.+4      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 81e:	96 e9       	ldi	r25, 0x96	; 150
 820:	11 c0       	rjmp	.+34     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 822:	77 23       	and	r23, r23
 824:	21 f0       	breq	.+8      	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 826:	9e e8       	ldi	r25, 0x8E	; 142
 828:	87 2f       	mov	r24, r23
 82a:	76 2f       	mov	r23, r22
 82c:	05 c0       	rjmp	.+10     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 82e:	66 23       	and	r22, r22
 830:	71 f0       	breq	.+28     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 832:	96 e8       	ldi	r25, 0x86	; 134
 834:	86 2f       	mov	r24, r22
 836:	70 e0       	ldi	r23, 0x00	; 0
 838:	60 e0       	ldi	r22, 0x00	; 0
 83a:	2a f0       	brmi	.+10     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 83c:	9a 95       	dec	r25
 83e:	66 0f       	add	r22, r22
 840:	77 1f       	adc	r23, r23
 842:	88 1f       	adc	r24, r24
 844:	da f7       	brpl	.-10     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 846:	88 0f       	add	r24, r24
 848:	96 95       	lsr	r25
 84a:	87 95       	ror	r24
 84c:	97 f9       	bld	r25, 7
 84e:	08 95       	ret

00000850 <__fp_inf>:
 850:	97 f9       	bld	r25, 7
 852:	9f 67       	ori	r25, 0x7F	; 127
 854:	80 e8       	ldi	r24, 0x80	; 128
 856:	70 e0       	ldi	r23, 0x00	; 0
 858:	60 e0       	ldi	r22, 0x00	; 0
 85a:	08 95       	ret

0000085c <__fp_nan>:
 85c:	9f ef       	ldi	r25, 0xFF	; 255
 85e:	80 ec       	ldi	r24, 0xC0	; 192
 860:	08 95       	ret

00000862 <__fp_pscA>:
 862:	00 24       	eor	r0, r0
 864:	0a 94       	dec	r0
 866:	16 16       	cp	r1, r22
 868:	17 06       	cpc	r1, r23
 86a:	18 06       	cpc	r1, r24
 86c:	09 06       	cpc	r0, r25
 86e:	08 95       	ret

00000870 <__fp_pscB>:
 870:	00 24       	eor	r0, r0
 872:	0a 94       	dec	r0
 874:	12 16       	cp	r1, r18
 876:	13 06       	cpc	r1, r19
 878:	14 06       	cpc	r1, r20
 87a:	05 06       	cpc	r0, r21
 87c:	08 95       	ret

0000087e <__fp_round>:
 87e:	09 2e       	mov	r0, r25
 880:	03 94       	inc	r0
 882:	00 0c       	add	r0, r0
 884:	11 f4       	brne	.+4      	; 0x88a <__fp_round+0xc>
 886:	88 23       	and	r24, r24
 888:	52 f0       	brmi	.+20     	; 0x89e <__fp_round+0x20>
 88a:	bb 0f       	add	r27, r27
 88c:	40 f4       	brcc	.+16     	; 0x89e <__fp_round+0x20>
 88e:	bf 2b       	or	r27, r31
 890:	11 f4       	brne	.+4      	; 0x896 <__fp_round+0x18>
 892:	60 ff       	sbrs	r22, 0
 894:	04 c0       	rjmp	.+8      	; 0x89e <__fp_round+0x20>
 896:	6f 5f       	subi	r22, 0xFF	; 255
 898:	7f 4f       	sbci	r23, 0xFF	; 255
 89a:	8f 4f       	sbci	r24, 0xFF	; 255
 89c:	9f 4f       	sbci	r25, 0xFF	; 255
 89e:	08 95       	ret

000008a0 <__fp_split3>:
 8a0:	57 fd       	sbrc	r21, 7
 8a2:	90 58       	subi	r25, 0x80	; 128
 8a4:	44 0f       	add	r20, r20
 8a6:	55 1f       	adc	r21, r21
 8a8:	59 f0       	breq	.+22     	; 0x8c0 <__fp_splitA+0x10>
 8aa:	5f 3f       	cpi	r21, 0xFF	; 255
 8ac:	71 f0       	breq	.+28     	; 0x8ca <__fp_splitA+0x1a>
 8ae:	47 95       	ror	r20

000008b0 <__fp_splitA>:
 8b0:	88 0f       	add	r24, r24
 8b2:	97 fb       	bst	r25, 7
 8b4:	99 1f       	adc	r25, r25
 8b6:	61 f0       	breq	.+24     	; 0x8d0 <__fp_splitA+0x20>
 8b8:	9f 3f       	cpi	r25, 0xFF	; 255
 8ba:	79 f0       	breq	.+30     	; 0x8da <__fp_splitA+0x2a>
 8bc:	87 95       	ror	r24
 8be:	08 95       	ret
 8c0:	12 16       	cp	r1, r18
 8c2:	13 06       	cpc	r1, r19
 8c4:	14 06       	cpc	r1, r20
 8c6:	55 1f       	adc	r21, r21
 8c8:	f2 cf       	rjmp	.-28     	; 0x8ae <__fp_split3+0xe>
 8ca:	46 95       	lsr	r20
 8cc:	f1 df       	rcall	.-30     	; 0x8b0 <__fp_splitA>
 8ce:	08 c0       	rjmp	.+16     	; 0x8e0 <__fp_splitA+0x30>
 8d0:	16 16       	cp	r1, r22
 8d2:	17 06       	cpc	r1, r23
 8d4:	18 06       	cpc	r1, r24
 8d6:	99 1f       	adc	r25, r25
 8d8:	f1 cf       	rjmp	.-30     	; 0x8bc <__fp_splitA+0xc>
 8da:	86 95       	lsr	r24
 8dc:	71 05       	cpc	r23, r1
 8de:	61 05       	cpc	r22, r1
 8e0:	08 94       	sec
 8e2:	08 95       	ret

000008e4 <__fp_zero>:
 8e4:	e8 94       	clt

000008e6 <__fp_szero>:
 8e6:	bb 27       	eor	r27, r27
 8e8:	66 27       	eor	r22, r22
 8ea:	77 27       	eor	r23, r23
 8ec:	cb 01       	movw	r24, r22
 8ee:	97 f9       	bld	r25, 7
 8f0:	08 95       	ret

000008f2 <__mulsf3>:
 8f2:	0e 94 8c 04 	call	0x918	; 0x918 <__mulsf3x>
 8f6:	0c 94 3f 04 	jmp	0x87e	; 0x87e <__fp_round>
 8fa:	0e 94 31 04 	call	0x862	; 0x862 <__fp_pscA>
 8fe:	38 f0       	brcs	.+14     	; 0x90e <__stack+0xf>
 900:	0e 94 38 04 	call	0x870	; 0x870 <__fp_pscB>
 904:	20 f0       	brcs	.+8      	; 0x90e <__stack+0xf>
 906:	95 23       	and	r25, r21
 908:	11 f0       	breq	.+4      	; 0x90e <__stack+0xf>
 90a:	0c 94 28 04 	jmp	0x850	; 0x850 <__fp_inf>
 90e:	0c 94 2e 04 	jmp	0x85c	; 0x85c <__fp_nan>
 912:	11 24       	eor	r1, r1
 914:	0c 94 73 04 	jmp	0x8e6	; 0x8e6 <__fp_szero>

00000918 <__mulsf3x>:
 918:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__fp_split3>
 91c:	70 f3       	brcs	.-36     	; 0x8fa <__mulsf3+0x8>

0000091e <__mulsf3_pse>:
 91e:	95 9f       	mul	r25, r21
 920:	c1 f3       	breq	.-16     	; 0x912 <__stack+0x13>
 922:	95 0f       	add	r25, r21
 924:	50 e0       	ldi	r21, 0x00	; 0
 926:	55 1f       	adc	r21, r21
 928:	62 9f       	mul	r22, r18
 92a:	f0 01       	movw	r30, r0
 92c:	72 9f       	mul	r23, r18
 92e:	bb 27       	eor	r27, r27
 930:	f0 0d       	add	r31, r0
 932:	b1 1d       	adc	r27, r1
 934:	63 9f       	mul	r22, r19
 936:	aa 27       	eor	r26, r26
 938:	f0 0d       	add	r31, r0
 93a:	b1 1d       	adc	r27, r1
 93c:	aa 1f       	adc	r26, r26
 93e:	64 9f       	mul	r22, r20
 940:	66 27       	eor	r22, r22
 942:	b0 0d       	add	r27, r0
 944:	a1 1d       	adc	r26, r1
 946:	66 1f       	adc	r22, r22
 948:	82 9f       	mul	r24, r18
 94a:	22 27       	eor	r18, r18
 94c:	b0 0d       	add	r27, r0
 94e:	a1 1d       	adc	r26, r1
 950:	62 1f       	adc	r22, r18
 952:	73 9f       	mul	r23, r19
 954:	b0 0d       	add	r27, r0
 956:	a1 1d       	adc	r26, r1
 958:	62 1f       	adc	r22, r18
 95a:	83 9f       	mul	r24, r19
 95c:	a0 0d       	add	r26, r0
 95e:	61 1d       	adc	r22, r1
 960:	22 1f       	adc	r18, r18
 962:	74 9f       	mul	r23, r20
 964:	33 27       	eor	r19, r19
 966:	a0 0d       	add	r26, r0
 968:	61 1d       	adc	r22, r1
 96a:	23 1f       	adc	r18, r19
 96c:	84 9f       	mul	r24, r20
 96e:	60 0d       	add	r22, r0
 970:	21 1d       	adc	r18, r1
 972:	82 2f       	mov	r24, r18
 974:	76 2f       	mov	r23, r22
 976:	6a 2f       	mov	r22, r26
 978:	11 24       	eor	r1, r1
 97a:	9f 57       	subi	r25, 0x7F	; 127
 97c:	50 40       	sbci	r21, 0x00	; 0
 97e:	9a f0       	brmi	.+38     	; 0x9a6 <__mulsf3_pse+0x88>
 980:	f1 f0       	breq	.+60     	; 0x9be <__mulsf3_pse+0xa0>
 982:	88 23       	and	r24, r24
 984:	4a f0       	brmi	.+18     	; 0x998 <__mulsf3_pse+0x7a>
 986:	ee 0f       	add	r30, r30
 988:	ff 1f       	adc	r31, r31
 98a:	bb 1f       	adc	r27, r27
 98c:	66 1f       	adc	r22, r22
 98e:	77 1f       	adc	r23, r23
 990:	88 1f       	adc	r24, r24
 992:	91 50       	subi	r25, 0x01	; 1
 994:	50 40       	sbci	r21, 0x00	; 0
 996:	a9 f7       	brne	.-22     	; 0x982 <__mulsf3_pse+0x64>
 998:	9e 3f       	cpi	r25, 0xFE	; 254
 99a:	51 05       	cpc	r21, r1
 99c:	80 f0       	brcs	.+32     	; 0x9be <__mulsf3_pse+0xa0>
 99e:	0c 94 28 04 	jmp	0x850	; 0x850 <__fp_inf>
 9a2:	0c 94 73 04 	jmp	0x8e6	; 0x8e6 <__fp_szero>
 9a6:	5f 3f       	cpi	r21, 0xFF	; 255
 9a8:	e4 f3       	brlt	.-8      	; 0x9a2 <__mulsf3_pse+0x84>
 9aa:	98 3e       	cpi	r25, 0xE8	; 232
 9ac:	d4 f3       	brlt	.-12     	; 0x9a2 <__mulsf3_pse+0x84>
 9ae:	86 95       	lsr	r24
 9b0:	77 95       	ror	r23
 9b2:	67 95       	ror	r22
 9b4:	b7 95       	ror	r27
 9b6:	f7 95       	ror	r31
 9b8:	e7 95       	ror	r30
 9ba:	9f 5f       	subi	r25, 0xFF	; 255
 9bc:	c1 f7       	brne	.-16     	; 0x9ae <__mulsf3_pse+0x90>
 9be:	fe 2b       	or	r31, r30
 9c0:	88 0f       	add	r24, r24
 9c2:	91 1d       	adc	r25, r1
 9c4:	96 95       	lsr	r25
 9c6:	87 95       	ror	r24
 9c8:	97 f9       	bld	r25, 7
 9ca:	08 95       	ret

000009cc <round>:
 9cc:	0e 94 58 04 	call	0x8b0	; 0x8b0 <__fp_splitA>
 9d0:	e8 f0       	brcs	.+58     	; 0xa0c <round+0x40>
 9d2:	9e 37       	cpi	r25, 0x7E	; 126
 9d4:	e8 f0       	brcs	.+58     	; 0xa10 <round+0x44>
 9d6:	96 39       	cpi	r25, 0x96	; 150
 9d8:	b8 f4       	brcc	.+46     	; 0xa08 <round+0x3c>
 9da:	9e 38       	cpi	r25, 0x8E	; 142
 9dc:	48 f4       	brcc	.+18     	; 0x9f0 <round+0x24>
 9de:	67 2f       	mov	r22, r23
 9e0:	78 2f       	mov	r23, r24
 9e2:	88 27       	eor	r24, r24
 9e4:	98 5f       	subi	r25, 0xF8	; 248
 9e6:	f9 cf       	rjmp	.-14     	; 0x9da <round+0xe>
 9e8:	86 95       	lsr	r24
 9ea:	77 95       	ror	r23
 9ec:	67 95       	ror	r22
 9ee:	93 95       	inc	r25
 9f0:	95 39       	cpi	r25, 0x95	; 149
 9f2:	d0 f3       	brcs	.-12     	; 0x9e8 <round+0x1c>
 9f4:	b6 2f       	mov	r27, r22
 9f6:	b1 70       	andi	r27, 0x01	; 1
 9f8:	6b 0f       	add	r22, r27
 9fa:	71 1d       	adc	r23, r1
 9fc:	81 1d       	adc	r24, r1
 9fe:	20 f4       	brcc	.+8      	; 0xa08 <round+0x3c>
 a00:	87 95       	ror	r24
 a02:	77 95       	ror	r23
 a04:	67 95       	ror	r22
 a06:	93 95       	inc	r25
 a08:	0c 94 0a 05 	jmp	0xa14	; 0xa14 <__fp_mintl>
 a0c:	0c 94 25 05 	jmp	0xa4a	; 0xa4a <__fp_mpack>
 a10:	0c 94 73 04 	jmp	0x8e6	; 0x8e6 <__fp_szero>

00000a14 <__fp_mintl>:
 a14:	88 23       	and	r24, r24
 a16:	71 f4       	brne	.+28     	; 0xa34 <__fp_mintl+0x20>
 a18:	77 23       	and	r23, r23
 a1a:	21 f0       	breq	.+8      	; 0xa24 <__fp_mintl+0x10>
 a1c:	98 50       	subi	r25, 0x08	; 8
 a1e:	87 2b       	or	r24, r23
 a20:	76 2f       	mov	r23, r22
 a22:	07 c0       	rjmp	.+14     	; 0xa32 <__fp_mintl+0x1e>
 a24:	66 23       	and	r22, r22
 a26:	11 f4       	brne	.+4      	; 0xa2c <__fp_mintl+0x18>
 a28:	99 27       	eor	r25, r25
 a2a:	0d c0       	rjmp	.+26     	; 0xa46 <__fp_mintl+0x32>
 a2c:	90 51       	subi	r25, 0x10	; 16
 a2e:	86 2b       	or	r24, r22
 a30:	70 e0       	ldi	r23, 0x00	; 0
 a32:	60 e0       	ldi	r22, 0x00	; 0
 a34:	2a f0       	brmi	.+10     	; 0xa40 <__fp_mintl+0x2c>
 a36:	9a 95       	dec	r25
 a38:	66 0f       	add	r22, r22
 a3a:	77 1f       	adc	r23, r23
 a3c:	88 1f       	adc	r24, r24
 a3e:	da f7       	brpl	.-10     	; 0xa36 <__fp_mintl+0x22>
 a40:	88 0f       	add	r24, r24
 a42:	96 95       	lsr	r25
 a44:	87 95       	ror	r24
 a46:	97 f9       	bld	r25, 7
 a48:	08 95       	ret

00000a4a <__fp_mpack>:
 a4a:	9f 3f       	cpi	r25, 0xFF	; 255
 a4c:	31 f0       	breq	.+12     	; 0xa5a <__fp_mpack_finite+0xc>

00000a4e <__fp_mpack_finite>:
 a4e:	91 50       	subi	r25, 0x01	; 1
 a50:	20 f4       	brcc	.+8      	; 0xa5a <__fp_mpack_finite+0xc>
 a52:	87 95       	ror	r24
 a54:	77 95       	ror	r23
 a56:	67 95       	ror	r22
 a58:	b7 95       	ror	r27
 a5a:	88 0f       	add	r24, r24
 a5c:	91 1d       	adc	r25, r1
 a5e:	96 95       	lsr	r25
 a60:	87 95       	ror	r24
 a62:	97 f9       	bld	r25, 7
 a64:	08 95       	ret

00000a66 <_exit>:
 a66:	f8 94       	cli

00000a68 <__stop_program>:
 a68:	ff cf       	rjmp	.-2      	; 0xa68 <__stop_program>

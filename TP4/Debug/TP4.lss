
TP4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000a08  00000a9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a08  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000031  00800106  00800106  00000aa2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000aa2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ad4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00000b14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001310  00000000  00000000  00000ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a81  00000000  00000000  00001fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c0f  00000000  00000000  00002a5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000358  00000000  00000000  0000366c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000737  00000000  00000000  000039c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000053b  00000000  00000000  000040fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00004636  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 ef 02 	jmp	0x5de	; 0x5de <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e0       	ldi	r30, 0x08	; 8
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 33       	cpi	r26, 0x37	; 55
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 81 01 	call	0x302	; 0x302 <main>
  9e:	0c 94 02 05 	jmp	0xa04	; 0xa04 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LDR_config>:

void LDR_Update(){
	ADCSRA |= (1<<ADSC);//start conversion
	if((ADCSRA&(1<<ADIF))==0) {//wait for conversion to finish
		ADCSRA |= (1<<ADIF); //borrar flag
		result = ADC;
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
  ac:	87 e8       	ldi	r24, 0x87	; 135
  ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  b2:	ec e7       	ldi	r30, 0x7C	; 124
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	10 82       	st	Z, r1
  b8:	80 81       	ld	r24, Z
  ba:	80 64       	ori	r24, 0x40	; 64
  bc:	80 83       	st	Z, r24
  be:	08 95       	ret

000000c0 <LDR_get_value>:
	}
}

uint16_t LDR_get_value(){
	ADCSRA |= (1<<ADSC);//start conversion
  c0:	ea e7       	ldi	r30, 0x7A	; 122
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	80 64       	ori	r24, 0x40	; 64
  c8:	80 83       	st	Z, r24
	while((ADCSRA&(1<<ADIF))==0);//wait for conversion to finish
  ca:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  ce:	84 ff       	sbrs	r24, 4
  d0:	fc cf       	rjmp	.-8      	; 0xca <LDR_get_value+0xa>
	ADCSRA |= (1<<ADIF); //borrar flag
  d2:	ea e7       	ldi	r30, 0x7A	; 122
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	80 61       	ori	r24, 0x10	; 16
  da:	80 83       	st	Z, r24
	result = (uint16_t) ADC;
  dc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  e0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  e4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
  e8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
	return result;
  ec:	08 95       	ret

000000ee <distributeValues>:
  ee:	cf 93       	push	r28
  f0:	5d ec       	ldi	r21, 0xCD	; 205
  f2:	85 9f       	mul	r24, r21
  f4:	a1 2d       	mov	r26, r1
  f6:	11 24       	eor	r1, r1
  f8:	a6 95       	lsr	r26
  fa:	a6 95       	lsr	r26
  fc:	a6 95       	lsr	r26
  fe:	2a 2f       	mov	r18, r26
 100:	22 0f       	add	r18, r18
 102:	92 2f       	mov	r25, r18
 104:	99 0f       	add	r25, r25
 106:	99 0f       	add	r25, r25
 108:	92 0f       	add	r25, r18
 10a:	c8 2f       	mov	r28, r24
 10c:	c9 1b       	sub	r28, r25
 10e:	65 9f       	mul	r22, r21
 110:	71 2d       	mov	r23, r1
 112:	11 24       	eor	r1, r1
 114:	76 95       	lsr	r23
 116:	76 95       	lsr	r23
 118:	76 95       	lsr	r23
 11a:	97 2f       	mov	r25, r23
 11c:	99 0f       	add	r25, r25
 11e:	89 2f       	mov	r24, r25
 120:	88 0f       	add	r24, r24
 122:	88 0f       	add	r24, r24
 124:	89 0f       	add	r24, r25
 126:	b6 2f       	mov	r27, r22
 128:	b8 1b       	sub	r27, r24
 12a:	45 9f       	mul	r20, r21
 12c:	51 2d       	mov	r21, r1
 12e:	11 24       	eor	r1, r1
 130:	56 95       	lsr	r21
 132:	56 95       	lsr	r21
 134:	56 95       	lsr	r21
 136:	95 2f       	mov	r25, r21
 138:	99 0f       	add	r25, r25
 13a:	89 2f       	mov	r24, r25
 13c:	88 0f       	add	r24, r24
 13e:	88 0f       	add	r24, r24
 140:	89 0f       	add	r24, r25
 142:	64 2f       	mov	r22, r20
 144:	68 1b       	sub	r22, r24
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	21 c0       	rjmp	.+66     	; 0x18c <distributeValues+0x9e>
 14a:	28 2f       	mov	r18, r24
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	8c 17       	cp	r24, r28
 150:	18 f4       	brcc	.+6      	; 0x158 <distributeValues+0x6a>
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	9a 0f       	add	r25, r26
 156:	01 c0       	rjmp	.+2      	; 0x15a <distributeValues+0x6c>
 158:	9a 2f       	mov	r25, r26
 15a:	f9 01       	movw	r30, r18
 15c:	e4 5e       	subi	r30, 0xE4	; 228
 15e:	fe 4f       	sbci	r31, 0xFE	; 254
 160:	90 83       	st	Z, r25
 162:	8b 17       	cp	r24, r27
 164:	18 f4       	brcc	.+6      	; 0x16c <distributeValues+0x7e>
 166:	91 e0       	ldi	r25, 0x01	; 1
 168:	97 0f       	add	r25, r23
 16a:	01 c0       	rjmp	.+2      	; 0x16e <distributeValues+0x80>
 16c:	97 2f       	mov	r25, r23
 16e:	f9 01       	movw	r30, r18
 170:	ee 5e       	subi	r30, 0xEE	; 238
 172:	fe 4f       	sbci	r31, 0xFE	; 254
 174:	90 83       	st	Z, r25
 176:	86 17       	cp	r24, r22
 178:	18 f4       	brcc	.+6      	; 0x180 <distributeValues+0x92>
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	95 0f       	add	r25, r21
 17e:	01 c0       	rjmp	.+2      	; 0x182 <distributeValues+0x94>
 180:	95 2f       	mov	r25, r21
 182:	f9 01       	movw	r30, r18
 184:	e8 5f       	subi	r30, 0xF8	; 248
 186:	fe 4f       	sbci	r31, 0xFE	; 254
 188:	90 83       	st	Z, r25
 18a:	8f 5f       	subi	r24, 0xFF	; 255
 18c:	8a 30       	cpi	r24, 0x0A	; 10
 18e:	e8 f2       	brcs	.-70     	; 0x14a <distributeValues+0x5c>
 190:	cf 91       	pop	r28
 192:	08 95       	ret

00000194 <LEDS_setRed>:
 194:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <red>
 198:	08 95       	ret

0000019a <LEDS_setGreen>:
 19a:	2f ef       	ldi	r18, 0xFF	; 255
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	28 1b       	sub	r18, r24
 1a0:	31 09       	sbc	r19, r1
 1a2:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 1a6:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 1aa:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <green>
 1ae:	08 95       	ret

000001b0 <LEDS_setBlue>:
 1b0:	2f ef       	ldi	r18, 0xFF	; 255
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	28 1b       	sub	r18, r24
 1b6:	31 09       	sbc	r19, r1
 1b8:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1bc:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 1c0:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <blue>
 1c4:	08 95       	ret

000001c6 <LEDS_init>:
 1c6:	84 b1       	in	r24, 0x04	; 4
 1c8:	86 62       	ori	r24, 0x26	; 38
 1ca:	84 b9       	out	0x04, r24	; 4
 1cc:	85 b1       	in	r24, 0x05	; 5
 1ce:	80 62       	ori	r24, 0x20	; 32
 1d0:	85 b9       	out	0x05, r24	; 5
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	0e 94 ca 00 	call	0x194	; 0x194 <LEDS_setRed>
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	0e 94 cd 00 	call	0x19a	; 0x19a <LEDS_setGreen>
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LEDS_setBlue>
 1e4:	20 e0       	ldi	r18, 0x00	; 0
 1e6:	0f c0       	rjmp	.+30     	; 0x206 <LEDS_init+0x40>
 1e8:	82 2f       	mov	r24, r18
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	fc 01       	movw	r30, r24
 1ee:	e4 5e       	subi	r30, 0xE4	; 228
 1f0:	fe 4f       	sbci	r31, 0xFE	; 254
 1f2:	10 82       	st	Z, r1
 1f4:	fc 01       	movw	r30, r24
 1f6:	ee 5e       	subi	r30, 0xEE	; 238
 1f8:	fe 4f       	sbci	r31, 0xFE	; 254
 1fa:	10 82       	st	Z, r1
 1fc:	fc 01       	movw	r30, r24
 1fe:	e8 5f       	subi	r30, 0xF8	; 248
 200:	fe 4f       	sbci	r31, 0xFE	; 254
 202:	10 82       	st	Z, r1
 204:	2f 5f       	subi	r18, 0xFF	; 255
 206:	2a 30       	cpi	r18, 0x0A	; 10
 208:	78 f3       	brcs	.-34     	; 0x1e8 <LEDS_init+0x22>
 20a:	08 95       	ret

0000020c <LEDS_getRed>:
 20c:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <red>
 210:	08 95       	ret

00000212 <LEDS_getGreen>:
 212:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <green>
 216:	08 95       	ret

00000218 <LEDS_getBlue>:
 218:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <blue>
 21c:	08 95       	ret

0000021e <LEDS_getFinalRed>:
 21e:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <final_red>
 222:	08 95       	ret

00000224 <LEDS_getFinalGreen>:
 224:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <final_green>
 228:	08 95       	ret

0000022a <LEDS_getFinalBlue>:
 22a:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <final_blue>
 22e:	08 95       	ret

00000230 <LEDS_setFinalRGB>:
 230:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <final_red>
 234:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <final_green>
 238:	40 93 29 01 	sts	0x0129, r20	; 0x800129 <final_blue>
 23c:	0e 94 77 00 	call	0xee	; 0xee <distributeValues>
 240:	08 95       	ret

00000242 <LEDS_incrementRed>:
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	ec 01       	movw	r28, r24
 248:	0e 94 06 01 	call	0x20c	; 0x20c <LEDS_getRed>
 24c:	c4 5e       	subi	r28, 0xE4	; 228
 24e:	de 4f       	sbci	r29, 0xFE	; 254
 250:	98 81       	ld	r25, Y
 252:	89 0f       	add	r24, r25
 254:	0e 94 ca 00 	call	0x194	; 0x194 <LEDS_setRed>
 258:	df 91       	pop	r29
 25a:	cf 91       	pop	r28
 25c:	08 95       	ret

0000025e <LEDS_incrementGreen>:
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	ec 01       	movw	r28, r24
 264:	0e 94 09 01 	call	0x212	; 0x212 <LEDS_getGreen>
 268:	ce 5e       	subi	r28, 0xEE	; 238
 26a:	de 4f       	sbci	r29, 0xFE	; 254
 26c:	98 81       	ld	r25, Y
 26e:	89 0f       	add	r24, r25
 270:	0e 94 cd 00 	call	0x19a	; 0x19a <LEDS_setGreen>
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	08 95       	ret

0000027a <LEDS_incrementBlue>:
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
 27e:	ec 01       	movw	r28, r24
 280:	0e 94 0c 01 	call	0x218	; 0x218 <LEDS_getBlue>
 284:	c8 5f       	subi	r28, 0xF8	; 248
 286:	de 4f       	sbci	r29, 0xFE	; 254
 288:	98 81       	ld	r25, Y
 28a:	89 0f       	add	r24, r25
 28c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LEDS_setBlue>
 290:	df 91       	pop	r29
 292:	cf 91       	pop	r28
 294:	08 95       	ret

00000296 <LEDS_decrementRed>:
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	ec 01       	movw	r28, r24
 29c:	0e 94 06 01 	call	0x20c	; 0x20c <LEDS_getRed>
 2a0:	e9 e0       	ldi	r30, 0x09	; 9
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	ec 1b       	sub	r30, r28
 2a6:	fd 0b       	sbc	r31, r29
 2a8:	e4 5e       	subi	r30, 0xE4	; 228
 2aa:	fe 4f       	sbci	r31, 0xFE	; 254
 2ac:	90 81       	ld	r25, Z
 2ae:	89 1b       	sub	r24, r25
 2b0:	0e 94 ca 00 	call	0x194	; 0x194 <LEDS_setRed>
 2b4:	df 91       	pop	r29
 2b6:	cf 91       	pop	r28
 2b8:	08 95       	ret

000002ba <LEDS_decrementGreen>:
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29
 2be:	ec 01       	movw	r28, r24
 2c0:	0e 94 09 01 	call	0x212	; 0x212 <LEDS_getGreen>
 2c4:	e9 e0       	ldi	r30, 0x09	; 9
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	ec 1b       	sub	r30, r28
 2ca:	fd 0b       	sbc	r31, r29
 2cc:	ee 5e       	subi	r30, 0xEE	; 238
 2ce:	fe 4f       	sbci	r31, 0xFE	; 254
 2d0:	90 81       	ld	r25, Z
 2d2:	89 1b       	sub	r24, r25
 2d4:	0e 94 cd 00 	call	0x19a	; 0x19a <LEDS_setGreen>
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	08 95       	ret

000002de <LEDS_decrementBlue>:
 2de:	cf 93       	push	r28
 2e0:	df 93       	push	r29
 2e2:	ec 01       	movw	r28, r24
 2e4:	0e 94 0c 01 	call	0x218	; 0x218 <LEDS_getBlue>
 2e8:	e9 e0       	ldi	r30, 0x09	; 9
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	ec 1b       	sub	r30, r28
 2ee:	fd 0b       	sbc	r31, r29
 2f0:	e8 5f       	subi	r30, 0xF8	; 248
 2f2:	fe 4f       	sbci	r31, 0xFE	; 254
 2f4:	90 81       	ld	r25, Z
 2f6:	89 1b       	sub	r24, r25
 2f8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LEDS_setBlue>
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	08 95       	ret

00000302 <main>:


int main(void)
{
	
	TIMERS_InitTimer0();
 302:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <TIMERS_InitTimer0>
	TIMERS_InitTimer1();
 306:	0e 94 13 03 	call	0x626	; 0x626 <TIMERS_InitTimer1>
	
	LEDS_init();
 30a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LEDS_init>
	MEF_init();
 30e:	0e 94 9c 01 	call	0x338	; 0x338 <MEF_init>
	LEDS_setFinalRGB(0, 10, 20);
 312:	44 e1       	ldi	r20, 0x14	; 20
 314:	6a e0       	ldi	r22, 0x0A	; 10
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	0e 94 18 01 	call	0x230	; 0x230 <LEDS_setFinalRGB>
	
	LDR_config();
 31c:	0e 94 53 00 	call	0xa6	; 0xa6 <LDR_config>
	
	//Test PB4 como salida y un 1 en la misma
	DDRB |= (1 << PORTB4);
 320:	84 b1       	in	r24, 0x04	; 4
 322:	80 61       	ori	r24, 0x10	; 16
 324:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1 << PORTB4);
 326:	85 b1       	in	r24, 0x05	; 5
 328:	8f 7e       	andi	r24, 0xEF	; 239
 32a:	85 b9       	out	0x05, r24	; 5
	
	sei();
 32c:	78 94       	sei
	
    while(1)
    {
		sEOS_Dispatch_Tasks();
 32e:	0e 94 a2 02 	call	0x544	; 0x544 <sEOS_Dispatch_Tasks>
		sEOS_Go_To_Sleep();
 332:	0e 94 d6 02 	call	0x5ac	; 0x5ac <sEOS_Go_To_Sleep>
 336:	fb cf       	rjmp	.-10     	; 0x32e <main+0x2c>

00000338 <MEF_init>:
static uint16_t timeOff = 20;
static double pendiente;
static uint16_t desplazamiento;

void MEF_init(){
	state = OFF;
 338:	83 e0       	ldi	r24, 0x03	; 3
 33a:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <state>
	stateCount = 0;
 33e:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <stateCount+0x1>
 342:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <stateCount>

	pendiente = (40-100) / (MIN_SUP_LDR - MAX_INF_LDR);
 346:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <pendiente>
 34a:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <pendiente+0x1>
 34e:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <pendiente+0x2>
 352:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <pendiente+0x3>
	desplazamiento = 100 + round(pendiente * MAX_INF_LDR);
 356:	84 e6       	ldi	r24, 0x64	; 100
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <desplazamiento+0x1>
 35e:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <desplazamiento>
 362:	08 95       	ret

00000364 <update_timeOff>:
}

void  update_timeOff(){
 364:	cf 92       	push	r12
 366:	df 92       	push	r13
 368:	ef 92       	push	r14
 36a:	ff 92       	push	r15
	uint16_t LDR_value = LDR_get_value();
 36c:	0e 94 60 00 	call	0xc0	; 0xc0 <LDR_get_value>
	
	// Caso en el que Tparpadeo = 5seg (minima luz o menos)
	if (LDR_value < MAX_INF_LDR){
 370:	88 32       	cpi	r24, 0x28	; 40
 372:	91 05       	cpc	r25, r1
 374:	38 f4       	brcc	.+14     	; 0x384 <update_timeOff+0x20>
		timeOff = 100;
 376:	84 e6       	ldi	r24, 0x64	; 100
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 37e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 382:	2f c0       	rjmp	.+94     	; 0x3e2 <update_timeOff+0x7e>
	}
	// Caso en el que Tparepadeo = 2seg (luz ambiente o mas)
	else if (LDR_value > MIN_SUP_LDR){
 384:	89 3c       	cpi	r24, 0xC9	; 201
 386:	91 05       	cpc	r25, r1
 388:	38 f0       	brcs	.+14     	; 0x398 <update_timeOff+0x34>
		timeOff = 40;
 38a:	88 e2       	ldi	r24, 0x28	; 40
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 392:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 396:	25 c0       	rjmp	.+74     	; 0x3e2 <update_timeOff+0x7e>
	}
	else {
		timeOff = desplazamiento - round(pendiente*LDR_value); // Parte de la recta con pendiente m negativa
 398:	bc 01       	movw	r22, r24
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	0e 94 ba 03 	call	0x774	; 0x774 <__floatunsisf>
 3a2:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <pendiente>
 3a6:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <pendiente+0x1>
 3aa:	40 91 30 01 	lds	r20, 0x0130	; 0x800130 <pendiente+0x2>
 3ae:	50 91 31 01 	lds	r21, 0x0131	; 0x800131 <pendiente+0x3>
 3b2:	0e 94 48 04 	call	0x890	; 0x890 <__mulsf3>
 3b6:	0e 94 b5 04 	call	0x96a	; 0x96a <round>
 3ba:	6b 01       	movw	r12, r22
 3bc:	7c 01       	movw	r14, r24
 3be:	60 91 2c 01 	lds	r22, 0x012C	; 0x80012c <desplazamiento>
 3c2:	70 91 2d 01 	lds	r23, 0x012D	; 0x80012d <desplazamiento+0x1>
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	0e 94 ba 03 	call	0x774	; 0x774 <__floatunsisf>
 3ce:	a7 01       	movw	r20, r14
 3d0:	96 01       	movw	r18, r12
 3d2:	0e 94 1e 03 	call	0x63c	; 0x63c <__subsf3>
 3d6:	0e 94 8b 03 	call	0x716	; 0x716 <__fixunssfsi>
 3da:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3de:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
 3e2:	ff 90       	pop	r15
 3e4:	ef 90       	pop	r14
 3e6:	df 90       	pop	r13
 3e8:	cf 90       	pop	r12
 3ea:	08 95       	ret

000003ec <MEF_Update>:

void MEF_Update(){
	stateCount++;
 3ec:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <stateCount>
 3f0:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <stateCount+0x1>
 3f4:	01 96       	adiw	r24, 0x01	; 1
 3f6:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <stateCount+0x1>
 3fa:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <stateCount>
	
	switch (state){
 3fe:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <state>
 402:	81 30       	cpi	r24, 0x01	; 1
 404:	09 f4       	brne	.+2      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 406:	4f c0       	rjmp	.+158    	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
 408:	38 f1       	brcs	.+78     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 40a:	82 30       	cpi	r24, 0x02	; 2
 40c:	09 f4       	brne	.+2      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 40e:	68 c0       	rjmp	.+208    	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
 410:	83 30       	cpi	r24, 0x03	; 3
 412:	09 f0       	breq	.+2      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 414:	96 c0       	rjmp	.+300    	; 0x542 <__EEPROM_REGION_LENGTH__+0x142>
		case OFF:
			PORTB |= (1<<PORTB4);
 416:	85 b1       	in	r24, 0x05	; 5
 418:	80 61       	ori	r24, 0x10	; 16
 41a:	85 b9       	out	0x05, r24	; 5
			
			LEDS_setRed(0);
 41c:	80 e0       	ldi	r24, 0x00	; 0
 41e:	0e 94 ca 00 	call	0x194	; 0x194 <LEDS_setRed>
			LEDS_setGreen(0);
 422:	80 e0       	ldi	r24, 0x00	; 0
 424:	0e 94 cd 00 	call	0x19a	; 0x19a <LEDS_setGreen>
			LEDS_setBlue(0);
 428:	80 e0       	ldi	r24, 0x00	; 0
 42a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LEDS_setBlue>
			
			update_timeOff();
 42e:	0e 94 b2 01 	call	0x364	; 0x364 <update_timeOff>
			if(stateCount >= timeOff){
 432:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <stateCount>
 436:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <stateCount+0x1>
 43a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 43e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 442:	28 17       	cp	r18, r24
 444:	39 07       	cpc	r19, r25
 446:	08 f4       	brcc	.+2      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 448:	7c c0       	rjmp	.+248    	; 0x542 <__EEPROM_REGION_LENGTH__+0x142>
				state = RAISING;
 44a:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <state>
				stateCount = 0;
 44e:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <stateCount+0x1>
 452:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <stateCount>
 456:	08 95       	ret
			}
			break;
			
		case RAISING:
			PORTB |= (1<<PORTB4);
 458:	85 b1       	in	r24, 0x05	; 5
 45a:	80 61       	ori	r24, 0x10	; 16
 45c:	85 b9       	out	0x05, r24	; 5
			
			LEDS_incrementRed(stateCount - 1);
 45e:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <stateCount>
 462:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <stateCount+0x1>
 466:	01 97       	sbiw	r24, 0x01	; 1
 468:	0e 94 21 01 	call	0x242	; 0x242 <LEDS_incrementRed>
			LEDS_incrementGreen(stateCount - 1);
 46c:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <stateCount>
 470:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <stateCount+0x1>
 474:	01 97       	sbiw	r24, 0x01	; 1
 476:	0e 94 2f 01 	call	0x25e	; 0x25e <LEDS_incrementGreen>
			LEDS_incrementBlue(stateCount - 1);
 47a:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <stateCount>
 47e:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <stateCount+0x1>
 482:	01 97       	sbiw	r24, 0x01	; 1
 484:	0e 94 3d 01 	call	0x27a	; 0x27a <LEDS_incrementBlue>
			
			if(stateCount == 10){
 488:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <stateCount>
 48c:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <stateCount+0x1>
 490:	0a 97       	sbiw	r24, 0x0a	; 10
 492:	09 f0       	breq	.+2      	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
 494:	56 c0       	rjmp	.+172    	; 0x542 <__EEPROM_REGION_LENGTH__+0x142>
				state = ON;
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <state>
				stateCount = 0;
 49c:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <stateCount+0x1>
 4a0:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <stateCount>
 4a4:	08 95       	ret
			}
			break;
			
		case ON:
			PORTB &= ~(1<<PORTB4);
 4a6:	85 b1       	in	r24, 0x05	; 5
 4a8:	8f 7e       	andi	r24, 0xEF	; 239
 4aa:	85 b9       	out	0x05, r24	; 5

			
			LEDS_setRed(LEDS_getFinalRed());
 4ac:	0e 94 0f 01 	call	0x21e	; 0x21e <LEDS_getFinalRed>
 4b0:	0e 94 ca 00 	call	0x194	; 0x194 <LEDS_setRed>
			LEDS_setGreen(LEDS_getFinalGreen());
 4b4:	0e 94 12 01 	call	0x224	; 0x224 <LEDS_getFinalGreen>
 4b8:	0e 94 cd 00 	call	0x19a	; 0x19a <LEDS_setGreen>
			LEDS_setBlue(LEDS_getFinalBlue());
 4bc:	0e 94 15 01 	call	0x22a	; 0x22a <LEDS_getFinalBlue>
 4c0:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LEDS_setBlue>
			
			if(stateCount == 20){
 4c4:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <stateCount>
 4c8:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <stateCount+0x1>
 4cc:	44 97       	sbiw	r24, 0x14	; 20
 4ce:	c9 f5       	brne	.+114    	; 0x542 <__EEPROM_REGION_LENGTH__+0x142>
				state = FALLING;
 4d0:	82 e0       	ldi	r24, 0x02	; 2
 4d2:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <state>
				stateCount = 0;
 4d6:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <stateCount+0x1>
 4da:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <stateCount>
 4de:	08 95       	ret
			}
			break;
			
		case FALLING:
			PORTB |= (1<<PORTB4);
 4e0:	85 b1       	in	r24, 0x05	; 5
 4e2:	80 61       	ori	r24, 0x10	; 16
 4e4:	85 b9       	out	0x05, r24	; 5
			
			if (LEDS_getFinalRed() != 0) LEDS_decrementRed(stateCount - 1);
 4e6:	0e 94 0f 01 	call	0x21e	; 0x21e <LEDS_getFinalRed>
 4ea:	88 23       	and	r24, r24
 4ec:	39 f0       	breq	.+14     	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
 4ee:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <stateCount>
 4f2:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <stateCount+0x1>
 4f6:	01 97       	sbiw	r24, 0x01	; 1
 4f8:	0e 94 4b 01 	call	0x296	; 0x296 <LEDS_decrementRed>
			if (LEDS_getFinalGreen() != 0) LEDS_decrementGreen(stateCount - 1);
 4fc:	0e 94 12 01 	call	0x224	; 0x224 <LEDS_getFinalGreen>
 500:	88 23       	and	r24, r24
 502:	39 f0       	breq	.+14     	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
 504:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <stateCount>
 508:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <stateCount+0x1>
 50c:	01 97       	sbiw	r24, 0x01	; 1
 50e:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LEDS_decrementGreen>
			if (LEDS_getFinalBlue() != 0) LEDS_decrementBlue(stateCount - 1);
 512:	0e 94 15 01 	call	0x22a	; 0x22a <LEDS_getFinalBlue>
 516:	88 23       	and	r24, r24
 518:	39 f0       	breq	.+14     	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
 51a:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <stateCount>
 51e:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <stateCount+0x1>
 522:	01 97       	sbiw	r24, 0x01	; 1
 524:	0e 94 6f 01 	call	0x2de	; 0x2de <LEDS_decrementBlue>
			
			if(stateCount == 10){
 528:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <stateCount>
 52c:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <stateCount+0x1>
 530:	0a 97       	sbiw	r24, 0x0a	; 10
 532:	39 f4       	brne	.+14     	; 0x542 <__EEPROM_REGION_LENGTH__+0x142>
				state = OFF;
 534:	83 e0       	ldi	r24, 0x03	; 3
 536:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <state>
				stateCount = 0;
 53a:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <stateCount+0x1>
 53e:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <stateCount>
 542:	08 95       	ret

00000544 <sEOS_Dispatch_Tasks>:
static volatile uint16_t counter_LDR = 8;
static volatile uint8_t FLAG_LDR = 0;


void sEOS_Dispatch_Tasks(){
	if(FLAG_MEF){
 544:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <FLAG_MEF>
 548:	88 23       	and	r24, r24
 54a:	29 f0       	breq	.+10     	; 0x556 <sEOS_Dispatch_Tasks+0x12>
		MEF_Update();
 54c:	0e 94 f6 01 	call	0x3ec	; 0x3ec <MEF_Update>
		FLAG_MEF = 0;	
 550:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <FLAG_MEF>
 554:	08 95       	ret
	}
	else if (FLAG_LDR){
 556:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <FLAG_LDR>
 55a:	81 11       	cpse	r24, r1
		FLAG_LDR = 0;
 55c:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <FLAG_LDR>
 560:	08 95       	ret

00000562 <sEOS_SCH_Tasks>:
		*/
}

void sEOS_SCH_Tasks(){
	//Cada 50 ms pone el flag en 1
	if (++counter_MEF == 50) {
 562:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <counter_MEF>
 566:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <counter_MEF+0x1>
 56a:	01 96       	adiw	r24, 0x01	; 1
 56c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <counter_MEF+0x1>
 570:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <counter_MEF>
 574:	c2 97       	sbiw	r24, 0x32	; 50
 576:	39 f4       	brne	.+14     	; 0x586 <sEOS_SCH_Tasks+0x24>
		FLAG_MEF = 1;
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <FLAG_MEF>
		counter_MEF = 0;
 57e:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <counter_MEF+0x1>
 582:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <counter_MEF>
	}
	if (++counter_LDR == 10) {
 586:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <counter_LDR>
 58a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <counter_LDR+0x1>
 58e:	01 96       	adiw	r24, 0x01	; 1
 590:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <counter_LDR+0x1>
 594:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <counter_LDR>
 598:	0a 97       	sbiw	r24, 0x0a	; 10
 59a:	39 f4       	brne	.+14     	; 0x5aa <sEOS_SCH_Tasks+0x48>
		FLAG_LDR = 1;
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <FLAG_LDR>
		counter_LDR = 0;
 5a2:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <counter_LDR+0x1>
 5a6:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <counter_LDR>
 5aa:	08 95       	ret

000005ac <sEOS_Go_To_Sleep>:
//Pone en modo ahorro el micro
void sEOS_Go_To_Sleep(){
	
	// Setea el sleep mode a "idle". Este modo permite a la CPU dormir
	// dejando los perifericos (Como Timers y UART) corriendo
	set_sleep_mode(SLEEP_MODE_IDLE);
 5ac:	83 b7       	in	r24, 0x33	; 51
 5ae:	81 7f       	andi	r24, 0xF1	; 241
 5b0:	83 bf       	out	0x33, r24	; 51

	// Habilita sleep mode
	sleep_enable();
 5b2:	83 b7       	in	r24, 0x33	; 51
 5b4:	81 60       	ori	r24, 0x01	; 1
 5b6:	83 bf       	out	0x33, r24	; 51

	// Duerme al cpu
	sleep_cpu();
 5b8:	88 95       	sleep

	// Deshabilita sleep mode
	sleep_disable();
 5ba:	83 b7       	in	r24, 0x33	; 51
 5bc:	8e 7f       	andi	r24, 0xFE	; 254
 5be:	83 bf       	out	0x33, r24	; 51
 5c0:	08 95       	ret

000005c2 <TIMERS_InitTimer0>:
#include "timers.h"
#include "../sEOS/sEOS.h"

void TIMERS_InitTimer0(){
	// Interrupcion cada 1ms
	TCCR0A |= (1 << WGM01);
 5c2:	84 b5       	in	r24, 0x24	; 36
 5c4:	82 60       	ori	r24, 0x02	; 2
 5c6:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS01) | (1 << CS00);  // prescaler 64
 5c8:	85 b5       	in	r24, 0x25	; 37
 5ca:	83 60       	ori	r24, 0x03	; 3
 5cc:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << OCIE0A);
 5ce:	ee e6       	ldi	r30, 0x6E	; 110
 5d0:	f0 e0       	ldi	r31, 0x00	; 0
 5d2:	80 81       	ld	r24, Z
 5d4:	82 60       	ori	r24, 0x02	; 2
 5d6:	80 83       	st	Z, r24
	
	OCR0A = 249;
 5d8:	89 ef       	ldi	r24, 0xF9	; 249
 5da:	87 bd       	out	0x27, r24	; 39
 5dc:	08 95       	ret

000005de <__vector_14>:
}

ISR(TIMER0_COMPA_vect){
 5de:	1f 92       	push	r1
 5e0:	0f 92       	push	r0
 5e2:	0f b6       	in	r0, 0x3f	; 63
 5e4:	0f 92       	push	r0
 5e6:	11 24       	eor	r1, r1
 5e8:	2f 93       	push	r18
 5ea:	3f 93       	push	r19
 5ec:	4f 93       	push	r20
 5ee:	5f 93       	push	r21
 5f0:	6f 93       	push	r22
 5f2:	7f 93       	push	r23
 5f4:	8f 93       	push	r24
 5f6:	9f 93       	push	r25
 5f8:	af 93       	push	r26
 5fa:	bf 93       	push	r27
 5fc:	ef 93       	push	r30
 5fe:	ff 93       	push	r31
	sEOS_SCH_Tasks();
 600:	0e 94 b1 02 	call	0x562	; 0x562 <sEOS_SCH_Tasks>
 604:	ff 91       	pop	r31
 606:	ef 91       	pop	r30
 608:	bf 91       	pop	r27
 60a:	af 91       	pop	r26
 60c:	9f 91       	pop	r25
 60e:	8f 91       	pop	r24
 610:	7f 91       	pop	r23
 612:	6f 91       	pop	r22
 614:	5f 91       	pop	r21
 616:	4f 91       	pop	r20
 618:	3f 91       	pop	r19
 61a:	2f 91       	pop	r18
 61c:	0f 90       	pop	r0
 61e:	0f be       	out	0x3f, r0	; 63
 620:	0f 90       	pop	r0
 622:	1f 90       	pop	r1
 624:	18 95       	reti

00000626 <TIMERS_InitTimer1>:
 626:	e0 e8       	ldi	r30, 0x80	; 128
 628:	f0 e0       	ldi	r31, 0x00	; 0
 62a:	80 81       	ld	r24, Z
 62c:	81 6a       	ori	r24, 0xA1	; 161
 62e:	80 83       	st	Z, r24
 630:	e1 e8       	ldi	r30, 0x81	; 129
 632:	f0 e0       	ldi	r31, 0x00	; 0
 634:	80 81       	ld	r24, Z
 636:	8c 60       	ori	r24, 0x0C	; 12
 638:	80 83       	st	Z, r24
 63a:	08 95       	ret

0000063c <__subsf3>:
 63c:	50 58       	subi	r21, 0x80	; 128

0000063e <__addsf3>:
 63e:	bb 27       	eor	r27, r27
 640:	aa 27       	eor	r26, r26
 642:	0e 94 36 03 	call	0x66c	; 0x66c <__addsf3x>
 646:	0c 94 0e 04 	jmp	0x81c	; 0x81c <__fp_round>
 64a:	0e 94 00 04 	call	0x800	; 0x800 <__fp_pscA>
 64e:	38 f0       	brcs	.+14     	; 0x65e <__addsf3+0x20>
 650:	0e 94 07 04 	call	0x80e	; 0x80e <__fp_pscB>
 654:	20 f0       	brcs	.+8      	; 0x65e <__addsf3+0x20>
 656:	39 f4       	brne	.+14     	; 0x666 <__addsf3+0x28>
 658:	9f 3f       	cpi	r25, 0xFF	; 255
 65a:	19 f4       	brne	.+6      	; 0x662 <__addsf3+0x24>
 65c:	26 f4       	brtc	.+8      	; 0x666 <__addsf3+0x28>
 65e:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <__fp_nan>
 662:	0e f4       	brtc	.+2      	; 0x666 <__addsf3+0x28>
 664:	e0 95       	com	r30
 666:	e7 fb       	bst	r30, 7
 668:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <__fp_inf>

0000066c <__addsf3x>:
 66c:	e9 2f       	mov	r30, r25
 66e:	0e 94 1f 04 	call	0x83e	; 0x83e <__fp_split3>
 672:	58 f3       	brcs	.-42     	; 0x64a <__addsf3+0xc>
 674:	ba 17       	cp	r27, r26
 676:	62 07       	cpc	r22, r18
 678:	73 07       	cpc	r23, r19
 67a:	84 07       	cpc	r24, r20
 67c:	95 07       	cpc	r25, r21
 67e:	20 f0       	brcs	.+8      	; 0x688 <__addsf3x+0x1c>
 680:	79 f4       	brne	.+30     	; 0x6a0 <__addsf3x+0x34>
 682:	a6 f5       	brtc	.+104    	; 0x6ec <__addsf3x+0x80>
 684:	0c 94 41 04 	jmp	0x882	; 0x882 <__fp_zero>
 688:	0e f4       	brtc	.+2      	; 0x68c <__addsf3x+0x20>
 68a:	e0 95       	com	r30
 68c:	0b 2e       	mov	r0, r27
 68e:	ba 2f       	mov	r27, r26
 690:	a0 2d       	mov	r26, r0
 692:	0b 01       	movw	r0, r22
 694:	b9 01       	movw	r22, r18
 696:	90 01       	movw	r18, r0
 698:	0c 01       	movw	r0, r24
 69a:	ca 01       	movw	r24, r20
 69c:	a0 01       	movw	r20, r0
 69e:	11 24       	eor	r1, r1
 6a0:	ff 27       	eor	r31, r31
 6a2:	59 1b       	sub	r21, r25
 6a4:	99 f0       	breq	.+38     	; 0x6cc <__addsf3x+0x60>
 6a6:	59 3f       	cpi	r21, 0xF9	; 249
 6a8:	50 f4       	brcc	.+20     	; 0x6be <__addsf3x+0x52>
 6aa:	50 3e       	cpi	r21, 0xE0	; 224
 6ac:	68 f1       	brcs	.+90     	; 0x708 <__addsf3x+0x9c>
 6ae:	1a 16       	cp	r1, r26
 6b0:	f0 40       	sbci	r31, 0x00	; 0
 6b2:	a2 2f       	mov	r26, r18
 6b4:	23 2f       	mov	r18, r19
 6b6:	34 2f       	mov	r19, r20
 6b8:	44 27       	eor	r20, r20
 6ba:	58 5f       	subi	r21, 0xF8	; 248
 6bc:	f3 cf       	rjmp	.-26     	; 0x6a4 <__addsf3x+0x38>
 6be:	46 95       	lsr	r20
 6c0:	37 95       	ror	r19
 6c2:	27 95       	ror	r18
 6c4:	a7 95       	ror	r26
 6c6:	f0 40       	sbci	r31, 0x00	; 0
 6c8:	53 95       	inc	r21
 6ca:	c9 f7       	brne	.-14     	; 0x6be <__addsf3x+0x52>
 6cc:	7e f4       	brtc	.+30     	; 0x6ec <__addsf3x+0x80>
 6ce:	1f 16       	cp	r1, r31
 6d0:	ba 0b       	sbc	r27, r26
 6d2:	62 0b       	sbc	r22, r18
 6d4:	73 0b       	sbc	r23, r19
 6d6:	84 0b       	sbc	r24, r20
 6d8:	ba f0       	brmi	.+46     	; 0x708 <__addsf3x+0x9c>
 6da:	91 50       	subi	r25, 0x01	; 1
 6dc:	a1 f0       	breq	.+40     	; 0x706 <__addsf3x+0x9a>
 6de:	ff 0f       	add	r31, r31
 6e0:	bb 1f       	adc	r27, r27
 6e2:	66 1f       	adc	r22, r22
 6e4:	77 1f       	adc	r23, r23
 6e6:	88 1f       	adc	r24, r24
 6e8:	c2 f7       	brpl	.-16     	; 0x6da <__addsf3x+0x6e>
 6ea:	0e c0       	rjmp	.+28     	; 0x708 <__addsf3x+0x9c>
 6ec:	ba 0f       	add	r27, r26
 6ee:	62 1f       	adc	r22, r18
 6f0:	73 1f       	adc	r23, r19
 6f2:	84 1f       	adc	r24, r20
 6f4:	48 f4       	brcc	.+18     	; 0x708 <__addsf3x+0x9c>
 6f6:	87 95       	ror	r24
 6f8:	77 95       	ror	r23
 6fa:	67 95       	ror	r22
 6fc:	b7 95       	ror	r27
 6fe:	f7 95       	ror	r31
 700:	9e 3f       	cpi	r25, 0xFE	; 254
 702:	08 f0       	brcs	.+2      	; 0x706 <__addsf3x+0x9a>
 704:	b0 cf       	rjmp	.-160    	; 0x666 <__addsf3+0x28>
 706:	93 95       	inc	r25
 708:	88 0f       	add	r24, r24
 70a:	08 f0       	brcs	.+2      	; 0x70e <__addsf3x+0xa2>
 70c:	99 27       	eor	r25, r25
 70e:	ee 0f       	add	r30, r30
 710:	97 95       	ror	r25
 712:	87 95       	ror	r24
 714:	08 95       	ret

00000716 <__fixunssfsi>:
 716:	0e 94 27 04 	call	0x84e	; 0x84e <__fp_splitA>
 71a:	88 f0       	brcs	.+34     	; 0x73e <__fixunssfsi+0x28>
 71c:	9f 57       	subi	r25, 0x7F	; 127
 71e:	98 f0       	brcs	.+38     	; 0x746 <__fixunssfsi+0x30>
 720:	b9 2f       	mov	r27, r25
 722:	99 27       	eor	r25, r25
 724:	b7 51       	subi	r27, 0x17	; 23
 726:	b0 f0       	brcs	.+44     	; 0x754 <__fixunssfsi+0x3e>
 728:	e1 f0       	breq	.+56     	; 0x762 <__fixunssfsi+0x4c>
 72a:	66 0f       	add	r22, r22
 72c:	77 1f       	adc	r23, r23
 72e:	88 1f       	adc	r24, r24
 730:	99 1f       	adc	r25, r25
 732:	1a f0       	brmi	.+6      	; 0x73a <__fixunssfsi+0x24>
 734:	ba 95       	dec	r27
 736:	c9 f7       	brne	.-14     	; 0x72a <__fixunssfsi+0x14>
 738:	14 c0       	rjmp	.+40     	; 0x762 <__fixunssfsi+0x4c>
 73a:	b1 30       	cpi	r27, 0x01	; 1
 73c:	91 f0       	breq	.+36     	; 0x762 <__fixunssfsi+0x4c>
 73e:	0e 94 41 04 	call	0x882	; 0x882 <__fp_zero>
 742:	b1 e0       	ldi	r27, 0x01	; 1
 744:	08 95       	ret
 746:	0c 94 41 04 	jmp	0x882	; 0x882 <__fp_zero>
 74a:	67 2f       	mov	r22, r23
 74c:	78 2f       	mov	r23, r24
 74e:	88 27       	eor	r24, r24
 750:	b8 5f       	subi	r27, 0xF8	; 248
 752:	39 f0       	breq	.+14     	; 0x762 <__fixunssfsi+0x4c>
 754:	b9 3f       	cpi	r27, 0xF9	; 249
 756:	cc f3       	brlt	.-14     	; 0x74a <__fixunssfsi+0x34>
 758:	86 95       	lsr	r24
 75a:	77 95       	ror	r23
 75c:	67 95       	ror	r22
 75e:	b3 95       	inc	r27
 760:	d9 f7       	brne	.-10     	; 0x758 <__fixunssfsi+0x42>
 762:	3e f4       	brtc	.+14     	; 0x772 <__fixunssfsi+0x5c>
 764:	90 95       	com	r25
 766:	80 95       	com	r24
 768:	70 95       	com	r23
 76a:	61 95       	neg	r22
 76c:	7f 4f       	sbci	r23, 0xFF	; 255
 76e:	8f 4f       	sbci	r24, 0xFF	; 255
 770:	9f 4f       	sbci	r25, 0xFF	; 255
 772:	08 95       	ret

00000774 <__floatunsisf>:
 774:	e8 94       	clt
 776:	09 c0       	rjmp	.+18     	; 0x78a <__floatsisf+0x12>

00000778 <__floatsisf>:
 778:	97 fb       	bst	r25, 7
 77a:	3e f4       	brtc	.+14     	; 0x78a <__floatsisf+0x12>
 77c:	90 95       	com	r25
 77e:	80 95       	com	r24
 780:	70 95       	com	r23
 782:	61 95       	neg	r22
 784:	7f 4f       	sbci	r23, 0xFF	; 255
 786:	8f 4f       	sbci	r24, 0xFF	; 255
 788:	9f 4f       	sbci	r25, 0xFF	; 255
 78a:	99 23       	and	r25, r25
 78c:	a9 f0       	breq	.+42     	; 0x7b8 <__floatsisf+0x40>
 78e:	f9 2f       	mov	r31, r25
 790:	96 e9       	ldi	r25, 0x96	; 150
 792:	bb 27       	eor	r27, r27
 794:	93 95       	inc	r25
 796:	f6 95       	lsr	r31
 798:	87 95       	ror	r24
 79a:	77 95       	ror	r23
 79c:	67 95       	ror	r22
 79e:	b7 95       	ror	r27
 7a0:	f1 11       	cpse	r31, r1
 7a2:	f8 cf       	rjmp	.-16     	; 0x794 <__floatsisf+0x1c>
 7a4:	fa f4       	brpl	.+62     	; 0x7e4 <__floatsisf+0x6c>
 7a6:	bb 0f       	add	r27, r27
 7a8:	11 f4       	brne	.+4      	; 0x7ae <__floatsisf+0x36>
 7aa:	60 ff       	sbrs	r22, 0
 7ac:	1b c0       	rjmp	.+54     	; 0x7e4 <__floatsisf+0x6c>
 7ae:	6f 5f       	subi	r22, 0xFF	; 255
 7b0:	7f 4f       	sbci	r23, 0xFF	; 255
 7b2:	8f 4f       	sbci	r24, 0xFF	; 255
 7b4:	9f 4f       	sbci	r25, 0xFF	; 255
 7b6:	16 c0       	rjmp	.+44     	; 0x7e4 <__floatsisf+0x6c>
 7b8:	88 23       	and	r24, r24
 7ba:	11 f0       	breq	.+4      	; 0x7c0 <__floatsisf+0x48>
 7bc:	96 e9       	ldi	r25, 0x96	; 150
 7be:	11 c0       	rjmp	.+34     	; 0x7e2 <__floatsisf+0x6a>
 7c0:	77 23       	and	r23, r23
 7c2:	21 f0       	breq	.+8      	; 0x7cc <__floatsisf+0x54>
 7c4:	9e e8       	ldi	r25, 0x8E	; 142
 7c6:	87 2f       	mov	r24, r23
 7c8:	76 2f       	mov	r23, r22
 7ca:	05 c0       	rjmp	.+10     	; 0x7d6 <__floatsisf+0x5e>
 7cc:	66 23       	and	r22, r22
 7ce:	71 f0       	breq	.+28     	; 0x7ec <__floatsisf+0x74>
 7d0:	96 e8       	ldi	r25, 0x86	; 134
 7d2:	86 2f       	mov	r24, r22
 7d4:	70 e0       	ldi	r23, 0x00	; 0
 7d6:	60 e0       	ldi	r22, 0x00	; 0
 7d8:	2a f0       	brmi	.+10     	; 0x7e4 <__floatsisf+0x6c>
 7da:	9a 95       	dec	r25
 7dc:	66 0f       	add	r22, r22
 7de:	77 1f       	adc	r23, r23
 7e0:	88 1f       	adc	r24, r24
 7e2:	da f7       	brpl	.-10     	; 0x7da <__floatsisf+0x62>
 7e4:	88 0f       	add	r24, r24
 7e6:	96 95       	lsr	r25
 7e8:	87 95       	ror	r24
 7ea:	97 f9       	bld	r25, 7
 7ec:	08 95       	ret

000007ee <__fp_inf>:
 7ee:	97 f9       	bld	r25, 7
 7f0:	9f 67       	ori	r25, 0x7F	; 127
 7f2:	80 e8       	ldi	r24, 0x80	; 128
 7f4:	70 e0       	ldi	r23, 0x00	; 0
 7f6:	60 e0       	ldi	r22, 0x00	; 0
 7f8:	08 95       	ret

000007fa <__fp_nan>:
 7fa:	9f ef       	ldi	r25, 0xFF	; 255
 7fc:	80 ec       	ldi	r24, 0xC0	; 192
 7fe:	08 95       	ret

00000800 <__fp_pscA>:
 800:	00 24       	eor	r0, r0
 802:	0a 94       	dec	r0
 804:	16 16       	cp	r1, r22
 806:	17 06       	cpc	r1, r23
 808:	18 06       	cpc	r1, r24
 80a:	09 06       	cpc	r0, r25
 80c:	08 95       	ret

0000080e <__fp_pscB>:
 80e:	00 24       	eor	r0, r0
 810:	0a 94       	dec	r0
 812:	12 16       	cp	r1, r18
 814:	13 06       	cpc	r1, r19
 816:	14 06       	cpc	r1, r20
 818:	05 06       	cpc	r0, r21
 81a:	08 95       	ret

0000081c <__fp_round>:
 81c:	09 2e       	mov	r0, r25
 81e:	03 94       	inc	r0
 820:	00 0c       	add	r0, r0
 822:	11 f4       	brne	.+4      	; 0x828 <__fp_round+0xc>
 824:	88 23       	and	r24, r24
 826:	52 f0       	brmi	.+20     	; 0x83c <__fp_round+0x20>
 828:	bb 0f       	add	r27, r27
 82a:	40 f4       	brcc	.+16     	; 0x83c <__fp_round+0x20>
 82c:	bf 2b       	or	r27, r31
 82e:	11 f4       	brne	.+4      	; 0x834 <__fp_round+0x18>
 830:	60 ff       	sbrs	r22, 0
 832:	04 c0       	rjmp	.+8      	; 0x83c <__fp_round+0x20>
 834:	6f 5f       	subi	r22, 0xFF	; 255
 836:	7f 4f       	sbci	r23, 0xFF	; 255
 838:	8f 4f       	sbci	r24, 0xFF	; 255
 83a:	9f 4f       	sbci	r25, 0xFF	; 255
 83c:	08 95       	ret

0000083e <__fp_split3>:
 83e:	57 fd       	sbrc	r21, 7
 840:	90 58       	subi	r25, 0x80	; 128
 842:	44 0f       	add	r20, r20
 844:	55 1f       	adc	r21, r21
 846:	59 f0       	breq	.+22     	; 0x85e <__fp_splitA+0x10>
 848:	5f 3f       	cpi	r21, 0xFF	; 255
 84a:	71 f0       	breq	.+28     	; 0x868 <__fp_splitA+0x1a>
 84c:	47 95       	ror	r20

0000084e <__fp_splitA>:
 84e:	88 0f       	add	r24, r24
 850:	97 fb       	bst	r25, 7
 852:	99 1f       	adc	r25, r25
 854:	61 f0       	breq	.+24     	; 0x86e <__fp_splitA+0x20>
 856:	9f 3f       	cpi	r25, 0xFF	; 255
 858:	79 f0       	breq	.+30     	; 0x878 <__fp_splitA+0x2a>
 85a:	87 95       	ror	r24
 85c:	08 95       	ret
 85e:	12 16       	cp	r1, r18
 860:	13 06       	cpc	r1, r19
 862:	14 06       	cpc	r1, r20
 864:	55 1f       	adc	r21, r21
 866:	f2 cf       	rjmp	.-28     	; 0x84c <__fp_split3+0xe>
 868:	46 95       	lsr	r20
 86a:	f1 df       	rcall	.-30     	; 0x84e <__fp_splitA>
 86c:	08 c0       	rjmp	.+16     	; 0x87e <__fp_splitA+0x30>
 86e:	16 16       	cp	r1, r22
 870:	17 06       	cpc	r1, r23
 872:	18 06       	cpc	r1, r24
 874:	99 1f       	adc	r25, r25
 876:	f1 cf       	rjmp	.-30     	; 0x85a <__fp_splitA+0xc>
 878:	86 95       	lsr	r24
 87a:	71 05       	cpc	r23, r1
 87c:	61 05       	cpc	r22, r1
 87e:	08 94       	sec
 880:	08 95       	ret

00000882 <__fp_zero>:
 882:	e8 94       	clt

00000884 <__fp_szero>:
 884:	bb 27       	eor	r27, r27
 886:	66 27       	eor	r22, r22
 888:	77 27       	eor	r23, r23
 88a:	cb 01       	movw	r24, r22
 88c:	97 f9       	bld	r25, 7
 88e:	08 95       	ret

00000890 <__mulsf3>:
 890:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__mulsf3x>
 894:	0c 94 0e 04 	jmp	0x81c	; 0x81c <__fp_round>
 898:	0e 94 00 04 	call	0x800	; 0x800 <__fp_pscA>
 89c:	38 f0       	brcs	.+14     	; 0x8ac <__mulsf3+0x1c>
 89e:	0e 94 07 04 	call	0x80e	; 0x80e <__fp_pscB>
 8a2:	20 f0       	brcs	.+8      	; 0x8ac <__mulsf3+0x1c>
 8a4:	95 23       	and	r25, r21
 8a6:	11 f0       	breq	.+4      	; 0x8ac <__mulsf3+0x1c>
 8a8:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <__fp_inf>
 8ac:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <__fp_nan>
 8b0:	11 24       	eor	r1, r1
 8b2:	0c 94 42 04 	jmp	0x884	; 0x884 <__fp_szero>

000008b6 <__mulsf3x>:
 8b6:	0e 94 1f 04 	call	0x83e	; 0x83e <__fp_split3>
 8ba:	70 f3       	brcs	.-36     	; 0x898 <__mulsf3+0x8>

000008bc <__mulsf3_pse>:
 8bc:	95 9f       	mul	r25, r21
 8be:	c1 f3       	breq	.-16     	; 0x8b0 <__mulsf3+0x20>
 8c0:	95 0f       	add	r25, r21
 8c2:	50 e0       	ldi	r21, 0x00	; 0
 8c4:	55 1f       	adc	r21, r21
 8c6:	62 9f       	mul	r22, r18
 8c8:	f0 01       	movw	r30, r0
 8ca:	72 9f       	mul	r23, r18
 8cc:	bb 27       	eor	r27, r27
 8ce:	f0 0d       	add	r31, r0
 8d0:	b1 1d       	adc	r27, r1
 8d2:	63 9f       	mul	r22, r19
 8d4:	aa 27       	eor	r26, r26
 8d6:	f0 0d       	add	r31, r0
 8d8:	b1 1d       	adc	r27, r1
 8da:	aa 1f       	adc	r26, r26
 8dc:	64 9f       	mul	r22, r20
 8de:	66 27       	eor	r22, r22
 8e0:	b0 0d       	add	r27, r0
 8e2:	a1 1d       	adc	r26, r1
 8e4:	66 1f       	adc	r22, r22
 8e6:	82 9f       	mul	r24, r18
 8e8:	22 27       	eor	r18, r18
 8ea:	b0 0d       	add	r27, r0
 8ec:	a1 1d       	adc	r26, r1
 8ee:	62 1f       	adc	r22, r18
 8f0:	73 9f       	mul	r23, r19
 8f2:	b0 0d       	add	r27, r0
 8f4:	a1 1d       	adc	r26, r1
 8f6:	62 1f       	adc	r22, r18
 8f8:	83 9f       	mul	r24, r19
 8fa:	a0 0d       	add	r26, r0
 8fc:	61 1d       	adc	r22, r1
 8fe:	22 1f       	adc	r18, r18
 900:	74 9f       	mul	r23, r20
 902:	33 27       	eor	r19, r19
 904:	a0 0d       	add	r26, r0
 906:	61 1d       	adc	r22, r1
 908:	23 1f       	adc	r18, r19
 90a:	84 9f       	mul	r24, r20
 90c:	60 0d       	add	r22, r0
 90e:	21 1d       	adc	r18, r1
 910:	82 2f       	mov	r24, r18
 912:	76 2f       	mov	r23, r22
 914:	6a 2f       	mov	r22, r26
 916:	11 24       	eor	r1, r1
 918:	9f 57       	subi	r25, 0x7F	; 127
 91a:	50 40       	sbci	r21, 0x00	; 0
 91c:	9a f0       	brmi	.+38     	; 0x944 <__stack+0x45>
 91e:	f1 f0       	breq	.+60     	; 0x95c <__stack+0x5d>
 920:	88 23       	and	r24, r24
 922:	4a f0       	brmi	.+18     	; 0x936 <__stack+0x37>
 924:	ee 0f       	add	r30, r30
 926:	ff 1f       	adc	r31, r31
 928:	bb 1f       	adc	r27, r27
 92a:	66 1f       	adc	r22, r22
 92c:	77 1f       	adc	r23, r23
 92e:	88 1f       	adc	r24, r24
 930:	91 50       	subi	r25, 0x01	; 1
 932:	50 40       	sbci	r21, 0x00	; 0
 934:	a9 f7       	brne	.-22     	; 0x920 <__stack+0x21>
 936:	9e 3f       	cpi	r25, 0xFE	; 254
 938:	51 05       	cpc	r21, r1
 93a:	80 f0       	brcs	.+32     	; 0x95c <__stack+0x5d>
 93c:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <__fp_inf>
 940:	0c 94 42 04 	jmp	0x884	; 0x884 <__fp_szero>
 944:	5f 3f       	cpi	r21, 0xFF	; 255
 946:	e4 f3       	brlt	.-8      	; 0x940 <__stack+0x41>
 948:	98 3e       	cpi	r25, 0xE8	; 232
 94a:	d4 f3       	brlt	.-12     	; 0x940 <__stack+0x41>
 94c:	86 95       	lsr	r24
 94e:	77 95       	ror	r23
 950:	67 95       	ror	r22
 952:	b7 95       	ror	r27
 954:	f7 95       	ror	r31
 956:	e7 95       	ror	r30
 958:	9f 5f       	subi	r25, 0xFF	; 255
 95a:	c1 f7       	brne	.-16     	; 0x94c <__stack+0x4d>
 95c:	fe 2b       	or	r31, r30
 95e:	88 0f       	add	r24, r24
 960:	91 1d       	adc	r25, r1
 962:	96 95       	lsr	r25
 964:	87 95       	ror	r24
 966:	97 f9       	bld	r25, 7
 968:	08 95       	ret

0000096a <round>:
 96a:	0e 94 27 04 	call	0x84e	; 0x84e <__fp_splitA>
 96e:	e8 f0       	brcs	.+58     	; 0x9aa <round+0x40>
 970:	9e 37       	cpi	r25, 0x7E	; 126
 972:	e8 f0       	brcs	.+58     	; 0x9ae <round+0x44>
 974:	96 39       	cpi	r25, 0x96	; 150
 976:	b8 f4       	brcc	.+46     	; 0x9a6 <round+0x3c>
 978:	9e 38       	cpi	r25, 0x8E	; 142
 97a:	48 f4       	brcc	.+18     	; 0x98e <round+0x24>
 97c:	67 2f       	mov	r22, r23
 97e:	78 2f       	mov	r23, r24
 980:	88 27       	eor	r24, r24
 982:	98 5f       	subi	r25, 0xF8	; 248
 984:	f9 cf       	rjmp	.-14     	; 0x978 <round+0xe>
 986:	86 95       	lsr	r24
 988:	77 95       	ror	r23
 98a:	67 95       	ror	r22
 98c:	93 95       	inc	r25
 98e:	95 39       	cpi	r25, 0x95	; 149
 990:	d0 f3       	brcs	.-12     	; 0x986 <round+0x1c>
 992:	b6 2f       	mov	r27, r22
 994:	b1 70       	andi	r27, 0x01	; 1
 996:	6b 0f       	add	r22, r27
 998:	71 1d       	adc	r23, r1
 99a:	81 1d       	adc	r24, r1
 99c:	20 f4       	brcc	.+8      	; 0x9a6 <round+0x3c>
 99e:	87 95       	ror	r24
 9a0:	77 95       	ror	r23
 9a2:	67 95       	ror	r22
 9a4:	93 95       	inc	r25
 9a6:	0c 94 d9 04 	jmp	0x9b2	; 0x9b2 <__fp_mintl>
 9aa:	0c 94 f4 04 	jmp	0x9e8	; 0x9e8 <__fp_mpack>
 9ae:	0c 94 42 04 	jmp	0x884	; 0x884 <__fp_szero>

000009b2 <__fp_mintl>:
 9b2:	88 23       	and	r24, r24
 9b4:	71 f4       	brne	.+28     	; 0x9d2 <__fp_mintl+0x20>
 9b6:	77 23       	and	r23, r23
 9b8:	21 f0       	breq	.+8      	; 0x9c2 <__fp_mintl+0x10>
 9ba:	98 50       	subi	r25, 0x08	; 8
 9bc:	87 2b       	or	r24, r23
 9be:	76 2f       	mov	r23, r22
 9c0:	07 c0       	rjmp	.+14     	; 0x9d0 <__fp_mintl+0x1e>
 9c2:	66 23       	and	r22, r22
 9c4:	11 f4       	brne	.+4      	; 0x9ca <__fp_mintl+0x18>
 9c6:	99 27       	eor	r25, r25
 9c8:	0d c0       	rjmp	.+26     	; 0x9e4 <__fp_mintl+0x32>
 9ca:	90 51       	subi	r25, 0x10	; 16
 9cc:	86 2b       	or	r24, r22
 9ce:	70 e0       	ldi	r23, 0x00	; 0
 9d0:	60 e0       	ldi	r22, 0x00	; 0
 9d2:	2a f0       	brmi	.+10     	; 0x9de <__fp_mintl+0x2c>
 9d4:	9a 95       	dec	r25
 9d6:	66 0f       	add	r22, r22
 9d8:	77 1f       	adc	r23, r23
 9da:	88 1f       	adc	r24, r24
 9dc:	da f7       	brpl	.-10     	; 0x9d4 <__fp_mintl+0x22>
 9de:	88 0f       	add	r24, r24
 9e0:	96 95       	lsr	r25
 9e2:	87 95       	ror	r24
 9e4:	97 f9       	bld	r25, 7
 9e6:	08 95       	ret

000009e8 <__fp_mpack>:
 9e8:	9f 3f       	cpi	r25, 0xFF	; 255
 9ea:	31 f0       	breq	.+12     	; 0x9f8 <__fp_mpack_finite+0xc>

000009ec <__fp_mpack_finite>:
 9ec:	91 50       	subi	r25, 0x01	; 1
 9ee:	20 f4       	brcc	.+8      	; 0x9f8 <__fp_mpack_finite+0xc>
 9f0:	87 95       	ror	r24
 9f2:	77 95       	ror	r23
 9f4:	67 95       	ror	r22
 9f6:	b7 95       	ror	r27
 9f8:	88 0f       	add	r24, r24
 9fa:	91 1d       	adc	r25, r1
 9fc:	96 95       	lsr	r25
 9fe:	87 95       	ror	r24
 a00:	97 f9       	bld	r25, 7
 a02:	08 95       	ret

00000a04 <_exit>:
 a04:	f8 94       	cli

00000a06 <__stop_program>:
 a06:	ff cf       	rjmp	.-2      	; 0xa06 <__stop_program>

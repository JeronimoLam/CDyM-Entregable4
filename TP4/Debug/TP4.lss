
TP4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000a68  00000afc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a68  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000036  00800106  00800106  00000b02  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b02  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  00000b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001462  00000000  00000000  00000d64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b32  00000000  00000000  000021c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000da0  00000000  00000000  00002cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b4  00000000  00000000  00003a98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000076e  00000000  00000000  00003e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000058a  00000000  00000000  000045ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00004b44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 1f 03 	jmp	0x63e	; 0x63e <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 33       	cpi	r26, 0x3C	; 60
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 94 01 	call	0x328	; 0x328 <main>
  9e:	0c 94 32 05 	jmp	0xa64	; 0xa64 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LDR_config>:

uint16_t result = 0;
uint8_t is_converting = 0;

void LDR_config(){
	DIDR0= 0x01; //Digital Input Disable (opcional)
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
	ADCSRA= 0x87;//make ADC enable and select ck/128
  ac:	87 e8       	ldi	r24, 0x87	; 135
  ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	ADMUX= 0x00;// Vref=AVCC, right-justified, ADC0 pin
  b2:	ec e7       	ldi	r30, 0x7C	; 124
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	10 82       	st	Z, r1
	ADMUX |= (1<<REFS0);
  b8:	80 81       	ld	r24, Z
  ba:	80 64       	ori	r24, 0x40	; 64
  bc:	80 83       	st	Z, r24
  be:	08 95       	ret

000000c0 <LDR_Update>:
		result = ADC;
	}
}*/

void LDR_Update(){
	if (!is_converting){
  c0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
  c4:	81 11       	cpse	r24, r1
  c6:	08 c0       	rjmp	.+16     	; 0xd8 <LDR_Update+0x18>
		ADCSRA |= (1<<ADSC);//start conversion
  c8:	ea e7       	ldi	r30, 0x7A	; 122
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	80 64       	ori	r24, 0x40	; 64
  d0:	80 83       	st	Z, r24
		is_converting = 1;
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
	}
	if ((ADCSRA&(1<<ADIF))==0) {//wait for conversion to finish
  d8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  dc:	84 fd       	sbrc	r24, 4
  de:	0f c0       	rjmp	.+30     	; 0xfe <LDR_Update+0x3e>
		ADCSRA |= (1<<ADIF); //borrar flag
  e0:	ea e7       	ldi	r30, 0x7A	; 122
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	80 61       	ori	r24, 0x10	; 16
  e8:	80 83       	st	Z, r24
		result = (uint16_t) ADC;
  ea:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  ee:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  f2:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <result+0x1>
  f6:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <result>
		is_converting = 0;
  fa:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
  fe:	08 95       	ret

00000100 <LDR_get_value>:
	}
}

uint16_t LDR_get_value(){
	return result;
 100:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <result>
 104:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <result+0x1>
 108:	08 95       	ret

0000010a <distributeValues>:
void LEDS_setFinalGreen(uint8_t value){
	final_green = value;
}

void LEDS_setFinalBlue(uint8_t value){
	final_blue = value;
 10a:	cf 93       	push	r28
 10c:	5d ec       	ldi	r21, 0xCD	; 205
 10e:	85 9f       	mul	r24, r21
 110:	a1 2d       	mov	r26, r1
 112:	11 24       	eor	r1, r1
 114:	a6 95       	lsr	r26
 116:	a6 95       	lsr	r26
 118:	a6 95       	lsr	r26
 11a:	2a 2f       	mov	r18, r26
 11c:	22 0f       	add	r18, r18
 11e:	92 2f       	mov	r25, r18
 120:	99 0f       	add	r25, r25
 122:	99 0f       	add	r25, r25
 124:	92 0f       	add	r25, r18
 126:	c8 2f       	mov	r28, r24
 128:	c9 1b       	sub	r28, r25
 12a:	65 9f       	mul	r22, r21
 12c:	71 2d       	mov	r23, r1
 12e:	11 24       	eor	r1, r1
 130:	76 95       	lsr	r23
 132:	76 95       	lsr	r23
 134:	76 95       	lsr	r23
 136:	97 2f       	mov	r25, r23
 138:	99 0f       	add	r25, r25
 13a:	89 2f       	mov	r24, r25
 13c:	88 0f       	add	r24, r24
 13e:	88 0f       	add	r24, r24
 140:	89 0f       	add	r24, r25
 142:	b6 2f       	mov	r27, r22
 144:	b8 1b       	sub	r27, r24
 146:	45 9f       	mul	r20, r21
 148:	51 2d       	mov	r21, r1
 14a:	11 24       	eor	r1, r1
 14c:	56 95       	lsr	r21
 14e:	56 95       	lsr	r21
 150:	56 95       	lsr	r21
 152:	95 2f       	mov	r25, r21
 154:	99 0f       	add	r25, r25
 156:	89 2f       	mov	r24, r25
 158:	88 0f       	add	r24, r24
 15a:	88 0f       	add	r24, r24
 15c:	89 0f       	add	r24, r25
 15e:	64 2f       	mov	r22, r20
 160:	68 1b       	sub	r22, r24
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	21 c0       	rjmp	.+66     	; 0x1a8 <distributeValues+0x9e>
 166:	28 2f       	mov	r18, r24
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	8c 17       	cp	r24, r28
 16c:	18 f4       	brcc	.+6      	; 0x174 <distributeValues+0x6a>
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	9a 0f       	add	r25, r26
 172:	01 c0       	rjmp	.+2      	; 0x176 <distributeValues+0x6c>
 174:	9a 2f       	mov	r25, r26
 176:	f9 01       	movw	r30, r18
 178:	e3 5e       	subi	r30, 0xE3	; 227
 17a:	fe 4f       	sbci	r31, 0xFE	; 254
 17c:	90 83       	st	Z, r25
 17e:	8b 17       	cp	r24, r27
 180:	18 f4       	brcc	.+6      	; 0x188 <distributeValues+0x7e>
 182:	91 e0       	ldi	r25, 0x01	; 1
 184:	97 0f       	add	r25, r23
 186:	01 c0       	rjmp	.+2      	; 0x18a <distributeValues+0x80>
 188:	97 2f       	mov	r25, r23
 18a:	f9 01       	movw	r30, r18
 18c:	ed 5e       	subi	r30, 0xED	; 237
 18e:	fe 4f       	sbci	r31, 0xFE	; 254
 190:	90 83       	st	Z, r25
 192:	86 17       	cp	r24, r22
 194:	18 f4       	brcc	.+6      	; 0x19c <distributeValues+0x92>
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	95 0f       	add	r25, r21
 19a:	01 c0       	rjmp	.+2      	; 0x19e <distributeValues+0x94>
 19c:	95 2f       	mov	r25, r21
 19e:	f9 01       	movw	r30, r18
 1a0:	e7 5f       	subi	r30, 0xF7	; 247
 1a2:	fe 4f       	sbci	r31, 0xFE	; 254
 1a4:	90 83       	st	Z, r25
 1a6:	8f 5f       	subi	r24, 0xFF	; 255
 1a8:	8a 30       	cpi	r24, 0x0A	; 10
 1aa:	e8 f2       	brcs	.-70     	; 0x166 <distributeValues+0x5c>
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <LEDS_setRed>:
 1b0:	cf 93       	push	r28
 1b2:	c8 2f       	mov	r28, r24
 1b4:	0e 94 0e 03 	call	0x61c	; 0x61c <PWM_set_comp_value>
 1b8:	c0 93 29 01 	sts	0x0129, r28	; 0x800129 <red>
 1bc:	cf 91       	pop	r28
 1be:	08 95       	ret

000001c0 <LEDS_setGreen>:
 1c0:	2f ef       	ldi	r18, 0xFF	; 255
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	28 1b       	sub	r18, r24
 1c6:	31 09       	sbc	r19, r1
 1c8:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 1cc:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 1d0:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <green>
 1d4:	08 95       	ret

000001d6 <LEDS_setBlue>:
 1d6:	2f ef       	ldi	r18, 0xFF	; 255
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	28 1b       	sub	r18, r24
 1dc:	31 09       	sbc	r19, r1
 1de:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1e2:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 1e6:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <blue>
 1ea:	08 95       	ret

000001ec <LEDS_init>:
 1ec:	84 b1       	in	r24, 0x04	; 4
 1ee:	86 62       	ori	r24, 0x26	; 38
 1f0:	84 b9       	out	0x04, r24	; 4
 1f2:	85 b1       	in	r24, 0x05	; 5
 1f4:	80 62       	ori	r24, 0x20	; 32
 1f6:	85 b9       	out	0x05, r24	; 5
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LEDS_setRed>
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LEDS_setGreen>
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LEDS_setBlue>
 20a:	20 e0       	ldi	r18, 0x00	; 0
 20c:	0f c0       	rjmp	.+30     	; 0x22c <LEDS_init+0x40>
 20e:	82 2f       	mov	r24, r18
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	fc 01       	movw	r30, r24
 214:	e3 5e       	subi	r30, 0xE3	; 227
 216:	fe 4f       	sbci	r31, 0xFE	; 254
 218:	10 82       	st	Z, r1
 21a:	fc 01       	movw	r30, r24
 21c:	ed 5e       	subi	r30, 0xED	; 237
 21e:	fe 4f       	sbci	r31, 0xFE	; 254
 220:	10 82       	st	Z, r1
 222:	fc 01       	movw	r30, r24
 224:	e7 5f       	subi	r30, 0xF7	; 247
 226:	fe 4f       	sbci	r31, 0xFE	; 254
 228:	10 82       	st	Z, r1
 22a:	2f 5f       	subi	r18, 0xFF	; 255
 22c:	2a 30       	cpi	r18, 0x0A	; 10
 22e:	78 f3       	brcs	.-34     	; 0x20e <LEDS_init+0x22>
 230:	08 95       	ret

00000232 <LEDS_getRed>:
 232:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <red>
 236:	08 95       	ret

00000238 <LEDS_getGreen>:
 238:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <green>
 23c:	08 95       	ret

0000023e <LEDS_getBlue>:
 23e:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <blue>
 242:	08 95       	ret

00000244 <LEDS_getFinalRed>:
}

uint8_t LEDS_getFinalRed(){
	return final_red;
}
 244:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <final_red>
 248:	08 95       	ret

0000024a <LEDS_getFinalGreen>:

uint8_t LEDS_getFinalGreen(){
	return final_green;
}
 24a:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <final_green>
 24e:	08 95       	ret

00000250 <LEDS_getFinalBlue>:

uint8_t LEDS_getFinalBlue(){
	return final_blue;
}
 250:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <final_blue>
 254:	08 95       	ret

00000256 <LEDS_setFinalRGB>:

void LEDS_setFinalRGB(uint8_t valueR, uint8_t valueG, uint8_t valueB){
	final_red = valueR;
 256:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <final_red>
	final_green = valueG;
 25a:	60 93 2b 01 	sts	0x012B, r22	; 0x80012b <final_green>
	final_blue = valueB;
 25e:	40 93 2a 01 	sts	0x012A, r20	; 0x80012a <final_blue>
	distributeValues(valueR, valueG, valueB);
 262:	0e 94 85 00 	call	0x10a	; 0x10a <distributeValues>
 266:	08 95       	ret

00000268 <LEDS_incrementRed>:
}

void LEDS_incrementRed(uint16_t value){
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	ec 01       	movw	r28, r24
	LEDS_setRed(LEDS_getRed() + red_increments[value]);
 26e:	0e 94 19 01 	call	0x232	; 0x232 <LEDS_getRed>
 272:	c3 5e       	subi	r28, 0xE3	; 227
 274:	de 4f       	sbci	r29, 0xFE	; 254
 276:	98 81       	ld	r25, Y
 278:	89 0f       	add	r24, r25
 27a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LEDS_setRed>
}
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	08 95       	ret

00000284 <LEDS_incrementGreen>:

void LEDS_incrementGreen(uint16_t value){
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
 288:	ec 01       	movw	r28, r24
	LEDS_setGreen(LEDS_getGreen() + green_increments[value]);
 28a:	0e 94 1c 01 	call	0x238	; 0x238 <LEDS_getGreen>
 28e:	cd 5e       	subi	r28, 0xED	; 237
 290:	de 4f       	sbci	r29, 0xFE	; 254
 292:	98 81       	ld	r25, Y
 294:	89 0f       	add	r24, r25
 296:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LEDS_setGreen>
	
}
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	08 95       	ret

000002a0 <LEDS_incrementBlue>:

void LEDS_incrementBlue(uint16_t value){
 2a0:	cf 93       	push	r28
 2a2:	df 93       	push	r29
 2a4:	ec 01       	movw	r28, r24
	LEDS_setBlue(LEDS_getBlue() + blue_increments[value]);
 2a6:	0e 94 1f 01 	call	0x23e	; 0x23e <LEDS_getBlue>
 2aa:	c7 5f       	subi	r28, 0xF7	; 247
 2ac:	de 4f       	sbci	r29, 0xFE	; 254
 2ae:	98 81       	ld	r25, Y
 2b0:	89 0f       	add	r24, r25
 2b2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LEDS_setBlue>
}
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	08 95       	ret

000002bc <LEDS_decrementRed>:

void LEDS_decrementRed(uint16_t value){
 2bc:	cf 93       	push	r28
 2be:	df 93       	push	r29
 2c0:	ec 01       	movw	r28, r24
	LEDS_setRed(LEDS_getRed() - red_increments[9 - value]);
 2c2:	0e 94 19 01 	call	0x232	; 0x232 <LEDS_getRed>
 2c6:	e9 e0       	ldi	r30, 0x09	; 9
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	ec 1b       	sub	r30, r28
 2cc:	fd 0b       	sbc	r31, r29
 2ce:	e3 5e       	subi	r30, 0xE3	; 227
 2d0:	fe 4f       	sbci	r31, 0xFE	; 254
 2d2:	90 81       	ld	r25, Z
 2d4:	89 1b       	sub	r24, r25
 2d6:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LEDS_setRed>
}
 2da:	df 91       	pop	r29
 2dc:	cf 91       	pop	r28
 2de:	08 95       	ret

000002e0 <LEDS_decrementGreen>:

void LEDS_decrementGreen(uint16_t value){
 2e0:	cf 93       	push	r28
 2e2:	df 93       	push	r29
 2e4:	ec 01       	movw	r28, r24
	LEDS_setGreen(LEDS_getGreen() - green_increments[9 - value]);
 2e6:	0e 94 1c 01 	call	0x238	; 0x238 <LEDS_getGreen>
 2ea:	e9 e0       	ldi	r30, 0x09	; 9
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	ec 1b       	sub	r30, r28
 2f0:	fd 0b       	sbc	r31, r29
 2f2:	ed 5e       	subi	r30, 0xED	; 237
 2f4:	fe 4f       	sbci	r31, 0xFE	; 254
 2f6:	90 81       	ld	r25, Z
 2f8:	89 1b       	sub	r24, r25
 2fa:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LEDS_setGreen>
}
 2fe:	df 91       	pop	r29
 300:	cf 91       	pop	r28
 302:	08 95       	ret

00000304 <LEDS_decrementBlue>:

void LEDS_decrementBlue(uint16_t value){
 304:	cf 93       	push	r28
 306:	df 93       	push	r29
 308:	ec 01       	movw	r28, r24
	LEDS_setBlue(LEDS_getBlue() - blue_increments[9 - value]);
 30a:	0e 94 1f 01 	call	0x23e	; 0x23e <LEDS_getBlue>
 30e:	e9 e0       	ldi	r30, 0x09	; 9
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	ec 1b       	sub	r30, r28
 314:	fd 0b       	sbc	r31, r29
 316:	e7 5f       	subi	r30, 0xF7	; 247
 318:	fe 4f       	sbci	r31, 0xFE	; 254
 31a:	90 81       	ld	r25, Z
 31c:	89 1b       	sub	r24, r25
 31e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LEDS_setBlue>
}
 322:	df 91       	pop	r29
 324:	cf 91       	pop	r28
 326:	08 95       	ret

00000328 <main>:


int main(void)
{
	
	TIMERS_InitTimer0();
 328:	0e 94 11 03 	call	0x622	; 0x622 <TIMERS_InitTimer0>
	TIMERS_InitTimer1();
 32c:	0e 94 43 03 	call	0x686	; 0x686 <TIMERS_InitTimer1>
	
	LEDS_init();
 330:	0e 94 f6 00 	call	0x1ec	; 0x1ec <LEDS_init>
	MEF_init();
 334:	0e 94 af 01 	call	0x35e	; 0x35e <MEF_init>
	LEDS_setFinalRGB(204, 255, 229);
 338:	45 ee       	ldi	r20, 0xE5	; 229
 33a:	6f ef       	ldi	r22, 0xFF	; 255
 33c:	8c ec       	ldi	r24, 0xCC	; 204
 33e:	0e 94 2b 01 	call	0x256	; 0x256 <LEDS_setFinalRGB>
	
	LDR_config();
 342:	0e 94 53 00 	call	0xa6	; 0xa6 <LDR_config>
	
	PWM_soft_init();
 346:	0e 94 07 03 	call	0x60e	; 0x60e <PWM_soft_init>
	
	//Test PB4 como salida y un 1 en la misma
	DDRB |= (1 << PORTB4);
 34a:	84 b1       	in	r24, 0x04	; 4
 34c:	80 61       	ori	r24, 0x10	; 16
 34e:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1 << PORTB4);
 350:	85 b1       	in	r24, 0x05	; 5
 352:	8f 7e       	andi	r24, 0xEF	; 239
 354:	85 b9       	out	0x05, r24	; 5
	
	sei();
 356:	78 94       	sei
	
    while(1)
    {
		sEOS_Dispatch_Tasks();
 358:	0e 94 aa 02 	call	0x554	; 0x554 <sEOS_Dispatch_Tasks>
 35c:	fd cf       	rjmp	.-6      	; 0x358 <main+0x30>

0000035e <MEF_init>:
static uint16_t timeOff = 20;
static double pendiente;
static uint16_t desplazamiento;

void MEF_init(){
	state = OFF;
 35e:	83 e0       	ldi	r24, 0x03	; 3
 360:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <state>
	stateCount = 0;
 364:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <stateCount+0x1>
 368:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <stateCount>

	pendiente = (10-100) / (MIN_SUP_LDR - MAX_INF_LDR);
 36c:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <pendiente>
 370:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <pendiente+0x1>
 374:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <pendiente+0x2>
 378:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <pendiente+0x3>
	desplazamiento = 100 + round(pendiente * MAX_INF_LDR);
 37c:	84 e6       	ldi	r24, 0x64	; 100
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <desplazamiento+0x1>
 384:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <desplazamiento>
 388:	08 95       	ret

0000038a <update_timeOff>:
}

void  update_timeOff(){
 38a:	cf 92       	push	r12
 38c:	df 92       	push	r13
 38e:	ef 92       	push	r14
 390:	ff 92       	push	r15
	uint16_t LDR_value = LDR_get_value();
 392:	0e 94 80 00 	call	0x100	; 0x100 <LDR_get_value>
	
	// Caso en el que Tparpadeo = 5seg (minima luz o menos)
	if (LDR_value < MAX_INF_LDR){
 396:	8e 36       	cpi	r24, 0x6E	; 110
 398:	91 05       	cpc	r25, r1
 39a:	38 f4       	brcc	.+14     	; 0x3aa <update_timeOff+0x20>
		timeOff = 100;
 39c:	84 e6       	ldi	r24, 0x64	; 100
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3a4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 3a8:	30 c0       	rjmp	.+96     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
	}
	// Caso en el que Tparepadeo = 2seg (luz ambiente o mas)
	else if (LDR_value > MIN_SUP_LDR){
 3aa:	8d 32       	cpi	r24, 0x2D	; 45
 3ac:	21 e0       	ldi	r18, 0x01	; 1
 3ae:	92 07       	cpc	r25, r18
 3b0:	38 f0       	brcs	.+14     	; 0x3c0 <update_timeOff+0x36>
		timeOff = 10;
 3b2:	8a e0       	ldi	r24, 0x0A	; 10
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3ba:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 3be:	25 c0       	rjmp	.+74     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
	}
	else {
		timeOff = desplazamiento - round(pendiente*LDR_value); // Parte de la recta con pendiente m negativa
 3c0:	bc 01       	movw	r22, r24
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <__floatunsisf>
 3ca:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <pendiente>
 3ce:	30 91 30 01 	lds	r19, 0x0130	; 0x800130 <pendiente+0x1>
 3d2:	40 91 31 01 	lds	r20, 0x0131	; 0x800131 <pendiente+0x2>
 3d6:	50 91 32 01 	lds	r21, 0x0132	; 0x800132 <pendiente+0x3>
 3da:	0e 94 78 04 	call	0x8f0	; 0x8f0 <__mulsf3>
 3de:	0e 94 e5 04 	call	0x9ca	; 0x9ca <round>
 3e2:	6b 01       	movw	r12, r22
 3e4:	7c 01       	movw	r14, r24
 3e6:	60 91 2d 01 	lds	r22, 0x012D	; 0x80012d <desplazamiento>
 3ea:	70 91 2e 01 	lds	r23, 0x012E	; 0x80012e <desplazamiento+0x1>
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <__floatunsisf>
 3f6:	a7 01       	movw	r20, r14
 3f8:	96 01       	movw	r18, r12
 3fa:	0e 94 4e 03 	call	0x69c	; 0x69c <__subsf3>
 3fe:	0e 94 bb 03 	call	0x776	; 0x776 <__fixunssfsi>
 402:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 406:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
 40a:	ff 90       	pop	r15
 40c:	ef 90       	pop	r14
 40e:	df 90       	pop	r13
 410:	cf 90       	pop	r12
 412:	08 95       	ret

00000414 <MEF_Update>:

void MEF_Update(){
	stateCount++;
 414:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <stateCount>
 418:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <stateCount+0x1>
 41c:	01 96       	adiw	r24, 0x01	; 1
 41e:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <stateCount+0x1>
 422:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <stateCount>
	
	switch (state){
 426:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <state>
 42a:	81 30       	cpi	r24, 0x01	; 1
 42c:	09 f4       	brne	.+2      	; 0x430 <MEF_Update+0x1c>
 42e:	4f c0       	rjmp	.+158    	; 0x4ce <MEF_Update+0xba>
 430:	38 f1       	brcs	.+78     	; 0x480 <MEF_Update+0x6c>
 432:	82 30       	cpi	r24, 0x02	; 2
 434:	09 f4       	brne	.+2      	; 0x438 <MEF_Update+0x24>
 436:	68 c0       	rjmp	.+208    	; 0x508 <MEF_Update+0xf4>
 438:	83 30       	cpi	r24, 0x03	; 3
 43a:	09 f0       	breq	.+2      	; 0x43e <MEF_Update+0x2a>
 43c:	8a c0       	rjmp	.+276    	; 0x552 <MEF_Update+0x13e>
		case OFF:
			PORTB |= (1<<PORTB4);
 43e:	85 b1       	in	r24, 0x05	; 5
 440:	80 61       	ori	r24, 0x10	; 16
 442:	85 b9       	out	0x05, r24	; 5
			
			LEDS_setRed(0);
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LEDS_setRed>
			LEDS_setGreen(0);
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LEDS_setGreen>
			LEDS_setBlue(0);
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LEDS_setBlue>
			
			update_timeOff();
 456:	0e 94 c5 01 	call	0x38a	; 0x38a <update_timeOff>
			if(stateCount >= timeOff){
 45a:	20 91 33 01 	lds	r18, 0x0133	; 0x800133 <stateCount>
 45e:	30 91 34 01 	lds	r19, 0x0134	; 0x800134 <stateCount+0x1>
 462:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 466:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 46a:	28 17       	cp	r18, r24
 46c:	39 07       	cpc	r19, r25
 46e:	08 f4       	brcc	.+2      	; 0x472 <MEF_Update+0x5e>
 470:	70 c0       	rjmp	.+224    	; 0x552 <MEF_Update+0x13e>
				state = RAISING;
 472:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <state>
				stateCount = 0;
 476:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <stateCount+0x1>
 47a:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <stateCount>
 47e:	08 95       	ret
			}
			break;
			
		case RAISING:
			PORTB |= (1<<PORTB4);
 480:	85 b1       	in	r24, 0x05	; 5
 482:	80 61       	ori	r24, 0x10	; 16
 484:	85 b9       	out	0x05, r24	; 5
			
			LEDS_incrementRed(stateCount - 1);
 486:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <stateCount>
 48a:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <stateCount+0x1>
 48e:	01 97       	sbiw	r24, 0x01	; 1
 490:	0e 94 34 01 	call	0x268	; 0x268 <LEDS_incrementRed>
			LEDS_incrementGreen(stateCount - 1);
 494:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <stateCount>
 498:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <stateCount+0x1>
 49c:	01 97       	sbiw	r24, 0x01	; 1
 49e:	0e 94 42 01 	call	0x284	; 0x284 <LEDS_incrementGreen>
			LEDS_incrementBlue(stateCount - 1);
 4a2:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <stateCount>
 4a6:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <stateCount+0x1>
 4aa:	01 97       	sbiw	r24, 0x01	; 1
 4ac:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LEDS_incrementBlue>
			
			if(stateCount == 10){
 4b0:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <stateCount>
 4b4:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <stateCount+0x1>
 4b8:	0a 97       	sbiw	r24, 0x0a	; 10
 4ba:	09 f0       	breq	.+2      	; 0x4be <MEF_Update+0xaa>
 4bc:	4a c0       	rjmp	.+148    	; 0x552 <MEF_Update+0x13e>
				state = ON;
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <state>
				stateCount = 0;
 4c4:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <stateCount+0x1>
 4c8:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <stateCount>
 4cc:	08 95       	ret
			}
			break;
			
		case ON:
			PORTB &= ~(1<<PORTB4);
 4ce:	85 b1       	in	r24, 0x05	; 5
 4d0:	8f 7e       	andi	r24, 0xEF	; 239
 4d2:	85 b9       	out	0x05, r24	; 5

			
			LEDS_setRed(LEDS_getFinalRed());
 4d4:	0e 94 22 01 	call	0x244	; 0x244 <LEDS_getFinalRed>
 4d8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LEDS_setRed>
			LEDS_setGreen(LEDS_getFinalGreen());
 4dc:	0e 94 25 01 	call	0x24a	; 0x24a <LEDS_getFinalGreen>
 4e0:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LEDS_setGreen>
			LEDS_setBlue(LEDS_getFinalBlue());
 4e4:	0e 94 28 01 	call	0x250	; 0x250 <LEDS_getFinalBlue>
 4e8:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LEDS_setBlue>
			
			if(stateCount == 20){
 4ec:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <stateCount>
 4f0:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <stateCount+0x1>
 4f4:	44 97       	sbiw	r24, 0x14	; 20
 4f6:	69 f5       	brne	.+90     	; 0x552 <MEF_Update+0x13e>
				state = FALLING;
 4f8:	82 e0       	ldi	r24, 0x02	; 2
 4fa:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <state>
				stateCount = 0;
 4fe:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <stateCount+0x1>
 502:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <stateCount>
 506:	08 95       	ret
			}
			break;
			
		case FALLING:
			PORTB |= (1<<PORTB4);
 508:	85 b1       	in	r24, 0x05	; 5
 50a:	80 61       	ori	r24, 0x10	; 16
 50c:	85 b9       	out	0x05, r24	; 5
			
			LEDS_decrementRed(stateCount - 1);
 50e:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <stateCount>
 512:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <stateCount+0x1>
 516:	01 97       	sbiw	r24, 0x01	; 1
 518:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LEDS_decrementRed>
			LEDS_decrementGreen(stateCount - 1);
 51c:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <stateCount>
 520:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <stateCount+0x1>
 524:	01 97       	sbiw	r24, 0x01	; 1
 526:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LEDS_decrementGreen>
			LEDS_decrementBlue(stateCount - 1);
 52a:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <stateCount>
 52e:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <stateCount+0x1>
 532:	01 97       	sbiw	r24, 0x01	; 1
 534:	0e 94 82 01 	call	0x304	; 0x304 <LEDS_decrementBlue>
			
			if(stateCount == 10){
 538:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <stateCount>
 53c:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <stateCount+0x1>
 540:	0a 97       	sbiw	r24, 0x0a	; 10
 542:	39 f4       	brne	.+14     	; 0x552 <MEF_Update+0x13e>
				state = OFF;
 544:	83 e0       	ldi	r24, 0x03	; 3
 546:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <state>
				stateCount = 0;
 54a:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <stateCount+0x1>
 54e:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <stateCount>
 552:	08 95       	ret

00000554 <sEOS_Dispatch_Tasks>:
static volatile uint16_t counter_LDR = 0;
static volatile uint8_t FLAG_LDR = 0;


void sEOS_Dispatch_Tasks(){
	if(FLAG_MEF){
 554:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <FLAG_MEF>
 558:	88 23       	and	r24, r24
 55a:	29 f0       	breq	.+10     	; 0x566 <sEOS_Dispatch_Tasks+0x12>
		MEF_Update();
 55c:	0e 94 0a 02 	call	0x414	; 0x414 <MEF_Update>
		FLAG_MEF = 0;	
 560:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <FLAG_MEF>
 564:	08 95       	ret
	}
	else if (FLAG_LDR){
 566:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <FLAG_LDR>
 56a:	88 23       	and	r24, r24
 56c:	21 f0       	breq	.+8      	; 0x576 <sEOS_Dispatch_Tasks+0x22>
		LDR_Update();
 56e:	0e 94 60 00 	call	0xc0	; 0xc0 <LDR_Update>
		FLAG_LDR = 0;
 572:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <FLAG_LDR>
 576:	08 95       	ret

00000578 <sEOS_SCH_Tasks>:
	}
}

void sEOS_SCH_Tasks(){
	//Cada 50 ms pone el flag en 1
	if (++counter_MEF == 781) {
 578:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <counter_MEF>
 57c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <counter_MEF+0x1>
 580:	01 96       	adiw	r24, 0x01	; 1
 582:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <counter_MEF+0x1>
 586:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <counter_MEF>
 58a:	8d 30       	cpi	r24, 0x0D	; 13
 58c:	93 40       	sbci	r25, 0x03	; 3
 58e:	39 f4       	brne	.+14     	; 0x59e <sEOS_SCH_Tasks+0x26>
		FLAG_MEF = 1;
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <FLAG_MEF>
		counter_MEF = 0;
 596:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <counter_MEF+0x1>
 59a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <counter_MEF>
	}
	if (++counter_LDR == 2) {
 59e:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <counter_LDR>
 5a2:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <counter_LDR+0x1>
 5a6:	01 96       	adiw	r24, 0x01	; 1
 5a8:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <counter_LDR+0x1>
 5ac:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <counter_LDR>
 5b0:	02 97       	sbiw	r24, 0x02	; 2
 5b2:	39 f4       	brne	.+14     	; 0x5c2 <sEOS_SCH_Tasks+0x4a>
		FLAG_LDR = 1;
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <FLAG_LDR>
		counter_LDR = 0;
 5ba:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <counter_LDR+0x1>
 5be:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <counter_LDR>
	}
	PWM_soft_Update();
 5c2:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <PWM_soft_Update>
 5c6:	08 95       	ret

000005c8 <PWM_soft_Update>:
	PWM_OFF;
}

uint8_t PWM_get_comp_value(){
	return PWM_DELTA;
}
 5c8:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <PWM_position>
 5cc:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <PWM_position+0x1>
 5d0:	01 96       	adiw	r24, 0x01	; 1
 5d2:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <PWM_position+0x1>
 5d6:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <PWM_position>
 5da:	8f 3f       	cpi	r24, 0xFF	; 255
 5dc:	91 05       	cpc	r25, r1
 5de:	49 f0       	breq	.+18     	; 0x5f2 <PWM_soft_Update+0x2a>
 5e0:	40 f0       	brcs	.+16     	; 0x5f2 <PWM_soft_Update+0x2a>
 5e2:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <PWM_position+0x1>
 5e6:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <PWM_position>
 5ea:	85 b1       	in	r24, 0x05	; 5
 5ec:	80 62       	ori	r24, 0x20	; 32
 5ee:	85 b9       	out	0x05, r24	; 5
 5f0:	08 95       	ret
 5f2:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <PWM_DELTA>
 5f6:	30 e0       	ldi	r19, 0x00	; 0
 5f8:	82 17       	cp	r24, r18
 5fa:	93 07       	cpc	r25, r19
 5fc:	20 f4       	brcc	.+8      	; 0x606 <PWM_soft_Update+0x3e>
 5fe:	85 b1       	in	r24, 0x05	; 5
 600:	8f 7d       	andi	r24, 0xDF	; 223
 602:	85 b9       	out	0x05, r24	; 5
 604:	08 95       	ret
 606:	85 b1       	in	r24, 0x05	; 5
 608:	80 62       	ori	r24, 0x20	; 32
 60a:	85 b9       	out	0x05, r24	; 5
 60c:	08 95       	ret

0000060e <PWM_soft_init>:
 60e:	84 b1       	in	r24, 0x04	; 4
 610:	80 62       	ori	r24, 0x20	; 32
 612:	84 b9       	out	0x04, r24	; 4
 614:	85 b1       	in	r24, 0x05	; 5
 616:	8f 7d       	andi	r24, 0xDF	; 223
 618:	85 b9       	out	0x05, r24	; 5
 61a:	08 95       	ret

0000061c <PWM_set_comp_value>:

void PWM_set_comp_value(uint8_t value){
	PWM_DELTA = value;
 61c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <PWM_DELTA>
 620:	08 95       	ret

00000622 <TIMERS_InitTimer0>:
	OCR0A = 249;
	*/
	
	// Interrupcion cada 64 us
	// Prescaler en 8
	TCCR0A |= (1 << WGM01); // Modo CTC
 622:	84 b5       	in	r24, 0x24	; 36
 624:	82 60       	ori	r24, 0x02	; 2
 626:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS01);
 628:	85 b5       	in	r24, 0x25	; 37
 62a:	82 60       	ori	r24, 0x02	; 2
 62c:	85 bd       	out	0x25, r24	; 37
	OCR0A = 127;
 62e:	8f e7       	ldi	r24, 0x7F	; 127
 630:	87 bd       	out	0x27, r24	; 39
	
	TIMSK0 |= (1 << OCIE0A);
 632:	ee e6       	ldi	r30, 0x6E	; 110
 634:	f0 e0       	ldi	r31, 0x00	; 0
 636:	80 81       	ld	r24, Z
 638:	82 60       	ori	r24, 0x02	; 2
 63a:	80 83       	st	Z, r24
 63c:	08 95       	ret

0000063e <__vector_14>:
	
}

ISR(TIMER0_COMPA_vect){
 63e:	1f 92       	push	r1
 640:	0f 92       	push	r0
 642:	0f b6       	in	r0, 0x3f	; 63
 644:	0f 92       	push	r0
 646:	11 24       	eor	r1, r1
 648:	2f 93       	push	r18
 64a:	3f 93       	push	r19
 64c:	4f 93       	push	r20
 64e:	5f 93       	push	r21
 650:	6f 93       	push	r22
 652:	7f 93       	push	r23
 654:	8f 93       	push	r24
 656:	9f 93       	push	r25
 658:	af 93       	push	r26
 65a:	bf 93       	push	r27
 65c:	ef 93       	push	r30
 65e:	ff 93       	push	r31
	sEOS_SCH_Tasks();
 660:	0e 94 bc 02 	call	0x578	; 0x578 <sEOS_SCH_Tasks>
 664:	ff 91       	pop	r31
 666:	ef 91       	pop	r30
 668:	bf 91       	pop	r27
 66a:	af 91       	pop	r26
 66c:	9f 91       	pop	r25
 66e:	8f 91       	pop	r24
 670:	7f 91       	pop	r23
 672:	6f 91       	pop	r22
 674:	5f 91       	pop	r21
 676:	4f 91       	pop	r20
 678:	3f 91       	pop	r19
 67a:	2f 91       	pop	r18
 67c:	0f 90       	pop	r0
 67e:	0f be       	out	0x3f, r0	; 63
 680:	0f 90       	pop	r0
 682:	1f 90       	pop	r1
 684:	18 95       	reti

00000686 <TIMERS_InitTimer1>:
// Init timer
void TIMERS_InitTimer1(){
	//Modo Fast PWM con top = 0x00FF (Modo 5)
	//Prescaler en 1024
	//Modo invertido (clear on count reset)
	TCCR1A |= (1 << WGM10) | (1<< COM1A1) | (1<< COM1B1);
 686:	e0 e8       	ldi	r30, 0x80	; 128
 688:	f0 e0       	ldi	r31, 0x00	; 0
 68a:	80 81       	ld	r24, Z
 68c:	81 6a       	ori	r24, 0xA1	; 161
 68e:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << CS12) | (1 << CS10);// | (1 << CS10) ;
 690:	e1 e8       	ldi	r30, 0x81	; 129
 692:	f0 e0       	ldi	r31, 0x00	; 0
 694:	80 81       	ld	r24, Z
 696:	8d 60       	ori	r24, 0x0D	; 13
 698:	80 83       	st	Z, r24
 69a:	08 95       	ret

0000069c <__subsf3>:
 69c:	50 58       	subi	r21, 0x80	; 128

0000069e <__addsf3>:
 69e:	bb 27       	eor	r27, r27
 6a0:	aa 27       	eor	r26, r26
 6a2:	0e 94 66 03 	call	0x6cc	; 0x6cc <__addsf3x>
 6a6:	0c 94 3e 04 	jmp	0x87c	; 0x87c <__fp_round>
 6aa:	0e 94 30 04 	call	0x860	; 0x860 <__fp_pscA>
 6ae:	38 f0       	brcs	.+14     	; 0x6be <__addsf3+0x20>
 6b0:	0e 94 37 04 	call	0x86e	; 0x86e <__fp_pscB>
 6b4:	20 f0       	brcs	.+8      	; 0x6be <__addsf3+0x20>
 6b6:	39 f4       	brne	.+14     	; 0x6c6 <__addsf3+0x28>
 6b8:	9f 3f       	cpi	r25, 0xFF	; 255
 6ba:	19 f4       	brne	.+6      	; 0x6c2 <__addsf3+0x24>
 6bc:	26 f4       	brtc	.+8      	; 0x6c6 <__addsf3+0x28>
 6be:	0c 94 2d 04 	jmp	0x85a	; 0x85a <__fp_nan>
 6c2:	0e f4       	brtc	.+2      	; 0x6c6 <__addsf3+0x28>
 6c4:	e0 95       	com	r30
 6c6:	e7 fb       	bst	r30, 7
 6c8:	0c 94 27 04 	jmp	0x84e	; 0x84e <__fp_inf>

000006cc <__addsf3x>:
 6cc:	e9 2f       	mov	r30, r25
 6ce:	0e 94 4f 04 	call	0x89e	; 0x89e <__fp_split3>
 6d2:	58 f3       	brcs	.-42     	; 0x6aa <__addsf3+0xc>
 6d4:	ba 17       	cp	r27, r26
 6d6:	62 07       	cpc	r22, r18
 6d8:	73 07       	cpc	r23, r19
 6da:	84 07       	cpc	r24, r20
 6dc:	95 07       	cpc	r25, r21
 6de:	20 f0       	brcs	.+8      	; 0x6e8 <__addsf3x+0x1c>
 6e0:	79 f4       	brne	.+30     	; 0x700 <__addsf3x+0x34>
 6e2:	a6 f5       	brtc	.+104    	; 0x74c <__addsf3x+0x80>
 6e4:	0c 94 71 04 	jmp	0x8e2	; 0x8e2 <__fp_zero>
 6e8:	0e f4       	brtc	.+2      	; 0x6ec <__addsf3x+0x20>
 6ea:	e0 95       	com	r30
 6ec:	0b 2e       	mov	r0, r27
 6ee:	ba 2f       	mov	r27, r26
 6f0:	a0 2d       	mov	r26, r0
 6f2:	0b 01       	movw	r0, r22
 6f4:	b9 01       	movw	r22, r18
 6f6:	90 01       	movw	r18, r0
 6f8:	0c 01       	movw	r0, r24
 6fa:	ca 01       	movw	r24, r20
 6fc:	a0 01       	movw	r20, r0
 6fe:	11 24       	eor	r1, r1
 700:	ff 27       	eor	r31, r31
 702:	59 1b       	sub	r21, r25
 704:	99 f0       	breq	.+38     	; 0x72c <__addsf3x+0x60>
 706:	59 3f       	cpi	r21, 0xF9	; 249
 708:	50 f4       	brcc	.+20     	; 0x71e <__addsf3x+0x52>
 70a:	50 3e       	cpi	r21, 0xE0	; 224
 70c:	68 f1       	brcs	.+90     	; 0x768 <__addsf3x+0x9c>
 70e:	1a 16       	cp	r1, r26
 710:	f0 40       	sbci	r31, 0x00	; 0
 712:	a2 2f       	mov	r26, r18
 714:	23 2f       	mov	r18, r19
 716:	34 2f       	mov	r19, r20
 718:	44 27       	eor	r20, r20
 71a:	58 5f       	subi	r21, 0xF8	; 248
 71c:	f3 cf       	rjmp	.-26     	; 0x704 <__addsf3x+0x38>
 71e:	46 95       	lsr	r20
 720:	37 95       	ror	r19
 722:	27 95       	ror	r18
 724:	a7 95       	ror	r26
 726:	f0 40       	sbci	r31, 0x00	; 0
 728:	53 95       	inc	r21
 72a:	c9 f7       	brne	.-14     	; 0x71e <__addsf3x+0x52>
 72c:	7e f4       	brtc	.+30     	; 0x74c <__addsf3x+0x80>
 72e:	1f 16       	cp	r1, r31
 730:	ba 0b       	sbc	r27, r26
 732:	62 0b       	sbc	r22, r18
 734:	73 0b       	sbc	r23, r19
 736:	84 0b       	sbc	r24, r20
 738:	ba f0       	brmi	.+46     	; 0x768 <__addsf3x+0x9c>
 73a:	91 50       	subi	r25, 0x01	; 1
 73c:	a1 f0       	breq	.+40     	; 0x766 <__addsf3x+0x9a>
 73e:	ff 0f       	add	r31, r31
 740:	bb 1f       	adc	r27, r27
 742:	66 1f       	adc	r22, r22
 744:	77 1f       	adc	r23, r23
 746:	88 1f       	adc	r24, r24
 748:	c2 f7       	brpl	.-16     	; 0x73a <__addsf3x+0x6e>
 74a:	0e c0       	rjmp	.+28     	; 0x768 <__addsf3x+0x9c>
 74c:	ba 0f       	add	r27, r26
 74e:	62 1f       	adc	r22, r18
 750:	73 1f       	adc	r23, r19
 752:	84 1f       	adc	r24, r20
 754:	48 f4       	brcc	.+18     	; 0x768 <__addsf3x+0x9c>
 756:	87 95       	ror	r24
 758:	77 95       	ror	r23
 75a:	67 95       	ror	r22
 75c:	b7 95       	ror	r27
 75e:	f7 95       	ror	r31
 760:	9e 3f       	cpi	r25, 0xFE	; 254
 762:	08 f0       	brcs	.+2      	; 0x766 <__addsf3x+0x9a>
 764:	b0 cf       	rjmp	.-160    	; 0x6c6 <__addsf3+0x28>
 766:	93 95       	inc	r25
 768:	88 0f       	add	r24, r24
 76a:	08 f0       	brcs	.+2      	; 0x76e <__addsf3x+0xa2>
 76c:	99 27       	eor	r25, r25
 76e:	ee 0f       	add	r30, r30
 770:	97 95       	ror	r25
 772:	87 95       	ror	r24
 774:	08 95       	ret

00000776 <__fixunssfsi>:
 776:	0e 94 57 04 	call	0x8ae	; 0x8ae <__fp_splitA>
 77a:	88 f0       	brcs	.+34     	; 0x79e <__fixunssfsi+0x28>
 77c:	9f 57       	subi	r25, 0x7F	; 127
 77e:	98 f0       	brcs	.+38     	; 0x7a6 <__fixunssfsi+0x30>
 780:	b9 2f       	mov	r27, r25
 782:	99 27       	eor	r25, r25
 784:	b7 51       	subi	r27, 0x17	; 23
 786:	b0 f0       	brcs	.+44     	; 0x7b4 <__fixunssfsi+0x3e>
 788:	e1 f0       	breq	.+56     	; 0x7c2 <__fixunssfsi+0x4c>
 78a:	66 0f       	add	r22, r22
 78c:	77 1f       	adc	r23, r23
 78e:	88 1f       	adc	r24, r24
 790:	99 1f       	adc	r25, r25
 792:	1a f0       	brmi	.+6      	; 0x79a <__fixunssfsi+0x24>
 794:	ba 95       	dec	r27
 796:	c9 f7       	brne	.-14     	; 0x78a <__fixunssfsi+0x14>
 798:	14 c0       	rjmp	.+40     	; 0x7c2 <__fixunssfsi+0x4c>
 79a:	b1 30       	cpi	r27, 0x01	; 1
 79c:	91 f0       	breq	.+36     	; 0x7c2 <__fixunssfsi+0x4c>
 79e:	0e 94 71 04 	call	0x8e2	; 0x8e2 <__fp_zero>
 7a2:	b1 e0       	ldi	r27, 0x01	; 1
 7a4:	08 95       	ret
 7a6:	0c 94 71 04 	jmp	0x8e2	; 0x8e2 <__fp_zero>
 7aa:	67 2f       	mov	r22, r23
 7ac:	78 2f       	mov	r23, r24
 7ae:	88 27       	eor	r24, r24
 7b0:	b8 5f       	subi	r27, 0xF8	; 248
 7b2:	39 f0       	breq	.+14     	; 0x7c2 <__fixunssfsi+0x4c>
 7b4:	b9 3f       	cpi	r27, 0xF9	; 249
 7b6:	cc f3       	brlt	.-14     	; 0x7aa <__fixunssfsi+0x34>
 7b8:	86 95       	lsr	r24
 7ba:	77 95       	ror	r23
 7bc:	67 95       	ror	r22
 7be:	b3 95       	inc	r27
 7c0:	d9 f7       	brne	.-10     	; 0x7b8 <__fixunssfsi+0x42>
 7c2:	3e f4       	brtc	.+14     	; 0x7d2 <__fixunssfsi+0x5c>
 7c4:	90 95       	com	r25
 7c6:	80 95       	com	r24
 7c8:	70 95       	com	r23
 7ca:	61 95       	neg	r22
 7cc:	7f 4f       	sbci	r23, 0xFF	; 255
 7ce:	8f 4f       	sbci	r24, 0xFF	; 255
 7d0:	9f 4f       	sbci	r25, 0xFF	; 255
 7d2:	08 95       	ret

000007d4 <__floatunsisf>:
 7d4:	e8 94       	clt
 7d6:	09 c0       	rjmp	.+18     	; 0x7ea <__floatsisf+0x12>

000007d8 <__floatsisf>:
 7d8:	97 fb       	bst	r25, 7
 7da:	3e f4       	brtc	.+14     	; 0x7ea <__floatsisf+0x12>
 7dc:	90 95       	com	r25
 7de:	80 95       	com	r24
 7e0:	70 95       	com	r23
 7e2:	61 95       	neg	r22
 7e4:	7f 4f       	sbci	r23, 0xFF	; 255
 7e6:	8f 4f       	sbci	r24, 0xFF	; 255
 7e8:	9f 4f       	sbci	r25, 0xFF	; 255
 7ea:	99 23       	and	r25, r25
 7ec:	a9 f0       	breq	.+42     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 7ee:	f9 2f       	mov	r31, r25
 7f0:	96 e9       	ldi	r25, 0x96	; 150
 7f2:	bb 27       	eor	r27, r27
 7f4:	93 95       	inc	r25
 7f6:	f6 95       	lsr	r31
 7f8:	87 95       	ror	r24
 7fa:	77 95       	ror	r23
 7fc:	67 95       	ror	r22
 7fe:	b7 95       	ror	r27
 800:	f1 11       	cpse	r31, r1
 802:	f8 cf       	rjmp	.-16     	; 0x7f4 <__floatsisf+0x1c>
 804:	fa f4       	brpl	.+62     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 806:	bb 0f       	add	r27, r27
 808:	11 f4       	brne	.+4      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 80a:	60 ff       	sbrs	r22, 0
 80c:	1b c0       	rjmp	.+54     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 80e:	6f 5f       	subi	r22, 0xFF	; 255
 810:	7f 4f       	sbci	r23, 0xFF	; 255
 812:	8f 4f       	sbci	r24, 0xFF	; 255
 814:	9f 4f       	sbci	r25, 0xFF	; 255
 816:	16 c0       	rjmp	.+44     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 818:	88 23       	and	r24, r24
 81a:	11 f0       	breq	.+4      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 81c:	96 e9       	ldi	r25, 0x96	; 150
 81e:	11 c0       	rjmp	.+34     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 820:	77 23       	and	r23, r23
 822:	21 f0       	breq	.+8      	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 824:	9e e8       	ldi	r25, 0x8E	; 142
 826:	87 2f       	mov	r24, r23
 828:	76 2f       	mov	r23, r22
 82a:	05 c0       	rjmp	.+10     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 82c:	66 23       	and	r22, r22
 82e:	71 f0       	breq	.+28     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 830:	96 e8       	ldi	r25, 0x86	; 134
 832:	86 2f       	mov	r24, r22
 834:	70 e0       	ldi	r23, 0x00	; 0
 836:	60 e0       	ldi	r22, 0x00	; 0
 838:	2a f0       	brmi	.+10     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 83a:	9a 95       	dec	r25
 83c:	66 0f       	add	r22, r22
 83e:	77 1f       	adc	r23, r23
 840:	88 1f       	adc	r24, r24
 842:	da f7       	brpl	.-10     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 844:	88 0f       	add	r24, r24
 846:	96 95       	lsr	r25
 848:	87 95       	ror	r24
 84a:	97 f9       	bld	r25, 7
 84c:	08 95       	ret

0000084e <__fp_inf>:
 84e:	97 f9       	bld	r25, 7
 850:	9f 67       	ori	r25, 0x7F	; 127
 852:	80 e8       	ldi	r24, 0x80	; 128
 854:	70 e0       	ldi	r23, 0x00	; 0
 856:	60 e0       	ldi	r22, 0x00	; 0
 858:	08 95       	ret

0000085a <__fp_nan>:
 85a:	9f ef       	ldi	r25, 0xFF	; 255
 85c:	80 ec       	ldi	r24, 0xC0	; 192
 85e:	08 95       	ret

00000860 <__fp_pscA>:
 860:	00 24       	eor	r0, r0
 862:	0a 94       	dec	r0
 864:	16 16       	cp	r1, r22
 866:	17 06       	cpc	r1, r23
 868:	18 06       	cpc	r1, r24
 86a:	09 06       	cpc	r0, r25
 86c:	08 95       	ret

0000086e <__fp_pscB>:
 86e:	00 24       	eor	r0, r0
 870:	0a 94       	dec	r0
 872:	12 16       	cp	r1, r18
 874:	13 06       	cpc	r1, r19
 876:	14 06       	cpc	r1, r20
 878:	05 06       	cpc	r0, r21
 87a:	08 95       	ret

0000087c <__fp_round>:
 87c:	09 2e       	mov	r0, r25
 87e:	03 94       	inc	r0
 880:	00 0c       	add	r0, r0
 882:	11 f4       	brne	.+4      	; 0x888 <__fp_round+0xc>
 884:	88 23       	and	r24, r24
 886:	52 f0       	brmi	.+20     	; 0x89c <__fp_round+0x20>
 888:	bb 0f       	add	r27, r27
 88a:	40 f4       	brcc	.+16     	; 0x89c <__fp_round+0x20>
 88c:	bf 2b       	or	r27, r31
 88e:	11 f4       	brne	.+4      	; 0x894 <__fp_round+0x18>
 890:	60 ff       	sbrs	r22, 0
 892:	04 c0       	rjmp	.+8      	; 0x89c <__fp_round+0x20>
 894:	6f 5f       	subi	r22, 0xFF	; 255
 896:	7f 4f       	sbci	r23, 0xFF	; 255
 898:	8f 4f       	sbci	r24, 0xFF	; 255
 89a:	9f 4f       	sbci	r25, 0xFF	; 255
 89c:	08 95       	ret

0000089e <__fp_split3>:
 89e:	57 fd       	sbrc	r21, 7
 8a0:	90 58       	subi	r25, 0x80	; 128
 8a2:	44 0f       	add	r20, r20
 8a4:	55 1f       	adc	r21, r21
 8a6:	59 f0       	breq	.+22     	; 0x8be <__fp_splitA+0x10>
 8a8:	5f 3f       	cpi	r21, 0xFF	; 255
 8aa:	71 f0       	breq	.+28     	; 0x8c8 <__fp_splitA+0x1a>
 8ac:	47 95       	ror	r20

000008ae <__fp_splitA>:
 8ae:	88 0f       	add	r24, r24
 8b0:	97 fb       	bst	r25, 7
 8b2:	99 1f       	adc	r25, r25
 8b4:	61 f0       	breq	.+24     	; 0x8ce <__fp_splitA+0x20>
 8b6:	9f 3f       	cpi	r25, 0xFF	; 255
 8b8:	79 f0       	breq	.+30     	; 0x8d8 <__fp_splitA+0x2a>
 8ba:	87 95       	ror	r24
 8bc:	08 95       	ret
 8be:	12 16       	cp	r1, r18
 8c0:	13 06       	cpc	r1, r19
 8c2:	14 06       	cpc	r1, r20
 8c4:	55 1f       	adc	r21, r21
 8c6:	f2 cf       	rjmp	.-28     	; 0x8ac <__fp_split3+0xe>
 8c8:	46 95       	lsr	r20
 8ca:	f1 df       	rcall	.-30     	; 0x8ae <__fp_splitA>
 8cc:	08 c0       	rjmp	.+16     	; 0x8de <__fp_splitA+0x30>
 8ce:	16 16       	cp	r1, r22
 8d0:	17 06       	cpc	r1, r23
 8d2:	18 06       	cpc	r1, r24
 8d4:	99 1f       	adc	r25, r25
 8d6:	f1 cf       	rjmp	.-30     	; 0x8ba <__fp_splitA+0xc>
 8d8:	86 95       	lsr	r24
 8da:	71 05       	cpc	r23, r1
 8dc:	61 05       	cpc	r22, r1
 8de:	08 94       	sec
 8e0:	08 95       	ret

000008e2 <__fp_zero>:
 8e2:	e8 94       	clt

000008e4 <__fp_szero>:
 8e4:	bb 27       	eor	r27, r27
 8e6:	66 27       	eor	r22, r22
 8e8:	77 27       	eor	r23, r23
 8ea:	cb 01       	movw	r24, r22
 8ec:	97 f9       	bld	r25, 7
 8ee:	08 95       	ret

000008f0 <__mulsf3>:
 8f0:	0e 94 8b 04 	call	0x916	; 0x916 <__mulsf3x>
 8f4:	0c 94 3e 04 	jmp	0x87c	; 0x87c <__fp_round>
 8f8:	0e 94 30 04 	call	0x860	; 0x860 <__fp_pscA>
 8fc:	38 f0       	brcs	.+14     	; 0x90c <__stack+0xd>
 8fe:	0e 94 37 04 	call	0x86e	; 0x86e <__fp_pscB>
 902:	20 f0       	brcs	.+8      	; 0x90c <__stack+0xd>
 904:	95 23       	and	r25, r21
 906:	11 f0       	breq	.+4      	; 0x90c <__stack+0xd>
 908:	0c 94 27 04 	jmp	0x84e	; 0x84e <__fp_inf>
 90c:	0c 94 2d 04 	jmp	0x85a	; 0x85a <__fp_nan>
 910:	11 24       	eor	r1, r1
 912:	0c 94 72 04 	jmp	0x8e4	; 0x8e4 <__fp_szero>

00000916 <__mulsf3x>:
 916:	0e 94 4f 04 	call	0x89e	; 0x89e <__fp_split3>
 91a:	70 f3       	brcs	.-36     	; 0x8f8 <__mulsf3+0x8>

0000091c <__mulsf3_pse>:
 91c:	95 9f       	mul	r25, r21
 91e:	c1 f3       	breq	.-16     	; 0x910 <__stack+0x11>
 920:	95 0f       	add	r25, r21
 922:	50 e0       	ldi	r21, 0x00	; 0
 924:	55 1f       	adc	r21, r21
 926:	62 9f       	mul	r22, r18
 928:	f0 01       	movw	r30, r0
 92a:	72 9f       	mul	r23, r18
 92c:	bb 27       	eor	r27, r27
 92e:	f0 0d       	add	r31, r0
 930:	b1 1d       	adc	r27, r1
 932:	63 9f       	mul	r22, r19
 934:	aa 27       	eor	r26, r26
 936:	f0 0d       	add	r31, r0
 938:	b1 1d       	adc	r27, r1
 93a:	aa 1f       	adc	r26, r26
 93c:	64 9f       	mul	r22, r20
 93e:	66 27       	eor	r22, r22
 940:	b0 0d       	add	r27, r0
 942:	a1 1d       	adc	r26, r1
 944:	66 1f       	adc	r22, r22
 946:	82 9f       	mul	r24, r18
 948:	22 27       	eor	r18, r18
 94a:	b0 0d       	add	r27, r0
 94c:	a1 1d       	adc	r26, r1
 94e:	62 1f       	adc	r22, r18
 950:	73 9f       	mul	r23, r19
 952:	b0 0d       	add	r27, r0
 954:	a1 1d       	adc	r26, r1
 956:	62 1f       	adc	r22, r18
 958:	83 9f       	mul	r24, r19
 95a:	a0 0d       	add	r26, r0
 95c:	61 1d       	adc	r22, r1
 95e:	22 1f       	adc	r18, r18
 960:	74 9f       	mul	r23, r20
 962:	33 27       	eor	r19, r19
 964:	a0 0d       	add	r26, r0
 966:	61 1d       	adc	r22, r1
 968:	23 1f       	adc	r18, r19
 96a:	84 9f       	mul	r24, r20
 96c:	60 0d       	add	r22, r0
 96e:	21 1d       	adc	r18, r1
 970:	82 2f       	mov	r24, r18
 972:	76 2f       	mov	r23, r22
 974:	6a 2f       	mov	r22, r26
 976:	11 24       	eor	r1, r1
 978:	9f 57       	subi	r25, 0x7F	; 127
 97a:	50 40       	sbci	r21, 0x00	; 0
 97c:	9a f0       	brmi	.+38     	; 0x9a4 <__mulsf3_pse+0x88>
 97e:	f1 f0       	breq	.+60     	; 0x9bc <__mulsf3_pse+0xa0>
 980:	88 23       	and	r24, r24
 982:	4a f0       	brmi	.+18     	; 0x996 <__mulsf3_pse+0x7a>
 984:	ee 0f       	add	r30, r30
 986:	ff 1f       	adc	r31, r31
 988:	bb 1f       	adc	r27, r27
 98a:	66 1f       	adc	r22, r22
 98c:	77 1f       	adc	r23, r23
 98e:	88 1f       	adc	r24, r24
 990:	91 50       	subi	r25, 0x01	; 1
 992:	50 40       	sbci	r21, 0x00	; 0
 994:	a9 f7       	brne	.-22     	; 0x980 <__mulsf3_pse+0x64>
 996:	9e 3f       	cpi	r25, 0xFE	; 254
 998:	51 05       	cpc	r21, r1
 99a:	80 f0       	brcs	.+32     	; 0x9bc <__mulsf3_pse+0xa0>
 99c:	0c 94 27 04 	jmp	0x84e	; 0x84e <__fp_inf>
 9a0:	0c 94 72 04 	jmp	0x8e4	; 0x8e4 <__fp_szero>
 9a4:	5f 3f       	cpi	r21, 0xFF	; 255
 9a6:	e4 f3       	brlt	.-8      	; 0x9a0 <__mulsf3_pse+0x84>
 9a8:	98 3e       	cpi	r25, 0xE8	; 232
 9aa:	d4 f3       	brlt	.-12     	; 0x9a0 <__mulsf3_pse+0x84>
 9ac:	86 95       	lsr	r24
 9ae:	77 95       	ror	r23
 9b0:	67 95       	ror	r22
 9b2:	b7 95       	ror	r27
 9b4:	f7 95       	ror	r31
 9b6:	e7 95       	ror	r30
 9b8:	9f 5f       	subi	r25, 0xFF	; 255
 9ba:	c1 f7       	brne	.-16     	; 0x9ac <__mulsf3_pse+0x90>
 9bc:	fe 2b       	or	r31, r30
 9be:	88 0f       	add	r24, r24
 9c0:	91 1d       	adc	r25, r1
 9c2:	96 95       	lsr	r25
 9c4:	87 95       	ror	r24
 9c6:	97 f9       	bld	r25, 7
 9c8:	08 95       	ret

000009ca <round>:
 9ca:	0e 94 57 04 	call	0x8ae	; 0x8ae <__fp_splitA>
 9ce:	e8 f0       	brcs	.+58     	; 0xa0a <round+0x40>
 9d0:	9e 37       	cpi	r25, 0x7E	; 126
 9d2:	e8 f0       	brcs	.+58     	; 0xa0e <round+0x44>
 9d4:	96 39       	cpi	r25, 0x96	; 150
 9d6:	b8 f4       	brcc	.+46     	; 0xa06 <round+0x3c>
 9d8:	9e 38       	cpi	r25, 0x8E	; 142
 9da:	48 f4       	brcc	.+18     	; 0x9ee <round+0x24>
 9dc:	67 2f       	mov	r22, r23
 9de:	78 2f       	mov	r23, r24
 9e0:	88 27       	eor	r24, r24
 9e2:	98 5f       	subi	r25, 0xF8	; 248
 9e4:	f9 cf       	rjmp	.-14     	; 0x9d8 <round+0xe>
 9e6:	86 95       	lsr	r24
 9e8:	77 95       	ror	r23
 9ea:	67 95       	ror	r22
 9ec:	93 95       	inc	r25
 9ee:	95 39       	cpi	r25, 0x95	; 149
 9f0:	d0 f3       	brcs	.-12     	; 0x9e6 <round+0x1c>
 9f2:	b6 2f       	mov	r27, r22
 9f4:	b1 70       	andi	r27, 0x01	; 1
 9f6:	6b 0f       	add	r22, r27
 9f8:	71 1d       	adc	r23, r1
 9fa:	81 1d       	adc	r24, r1
 9fc:	20 f4       	brcc	.+8      	; 0xa06 <round+0x3c>
 9fe:	87 95       	ror	r24
 a00:	77 95       	ror	r23
 a02:	67 95       	ror	r22
 a04:	93 95       	inc	r25
 a06:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__fp_mintl>
 a0a:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__fp_mpack>
 a0e:	0c 94 72 04 	jmp	0x8e4	; 0x8e4 <__fp_szero>

00000a12 <__fp_mintl>:
 a12:	88 23       	and	r24, r24
 a14:	71 f4       	brne	.+28     	; 0xa32 <__fp_mintl+0x20>
 a16:	77 23       	and	r23, r23
 a18:	21 f0       	breq	.+8      	; 0xa22 <__fp_mintl+0x10>
 a1a:	98 50       	subi	r25, 0x08	; 8
 a1c:	87 2b       	or	r24, r23
 a1e:	76 2f       	mov	r23, r22
 a20:	07 c0       	rjmp	.+14     	; 0xa30 <__fp_mintl+0x1e>
 a22:	66 23       	and	r22, r22
 a24:	11 f4       	brne	.+4      	; 0xa2a <__fp_mintl+0x18>
 a26:	99 27       	eor	r25, r25
 a28:	0d c0       	rjmp	.+26     	; 0xa44 <__fp_mintl+0x32>
 a2a:	90 51       	subi	r25, 0x10	; 16
 a2c:	86 2b       	or	r24, r22
 a2e:	70 e0       	ldi	r23, 0x00	; 0
 a30:	60 e0       	ldi	r22, 0x00	; 0
 a32:	2a f0       	brmi	.+10     	; 0xa3e <__fp_mintl+0x2c>
 a34:	9a 95       	dec	r25
 a36:	66 0f       	add	r22, r22
 a38:	77 1f       	adc	r23, r23
 a3a:	88 1f       	adc	r24, r24
 a3c:	da f7       	brpl	.-10     	; 0xa34 <__fp_mintl+0x22>
 a3e:	88 0f       	add	r24, r24
 a40:	96 95       	lsr	r25
 a42:	87 95       	ror	r24
 a44:	97 f9       	bld	r25, 7
 a46:	08 95       	ret

00000a48 <__fp_mpack>:
 a48:	9f 3f       	cpi	r25, 0xFF	; 255
 a4a:	31 f0       	breq	.+12     	; 0xa58 <__fp_mpack_finite+0xc>

00000a4c <__fp_mpack_finite>:
 a4c:	91 50       	subi	r25, 0x01	; 1
 a4e:	20 f4       	brcc	.+8      	; 0xa58 <__fp_mpack_finite+0xc>
 a50:	87 95       	ror	r24
 a52:	77 95       	ror	r23
 a54:	67 95       	ror	r22
 a56:	b7 95       	ror	r27
 a58:	88 0f       	add	r24, r24
 a5a:	91 1d       	adc	r25, r1
 a5c:	96 95       	lsr	r25
 a5e:	87 95       	ror	r24
 a60:	97 f9       	bld	r25, 7
 a62:	08 95       	ret

00000a64 <_exit>:
 a64:	f8 94       	cli

00000a66 <__stop_program>:
 a66:	ff cf       	rjmp	.-2      	; 0xa66 <__stop_program>

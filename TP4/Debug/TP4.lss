
TP4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000a38  00000acc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a38  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000033  00800108  00800108  00000ad4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ad4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  00000b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000144d  00000000  00000000  00000d34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b4a  00000000  00000000  00002181  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d53  00000000  00000000  00002ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b4  00000000  00000000  00003a20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000798  00000000  00000000  00003dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000058a  00000000  00000000  0000456c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00004af6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 07 03 	jmp	0x60e	; 0x60e <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e3       	ldi	r30, 0x38	; 56
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 33       	cpi	r26, 0x3B	; 59
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 86 01 	call	0x30c	; 0x30c <main>
  9e:	0c 94 1a 05 	jmp	0xa34	; 0xa34 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LDR_config>:

void LDR_Update(){
	ADCSRA |= (1<<ADSC);//start conversion
	if((ADCSRA&(1<<ADIF))==0) {//wait for conversion to finish
		ADCSRA |= (1<<ADIF); //borrar flag
		result = ADC;
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
  ac:	87 e8       	ldi	r24, 0x87	; 135
  ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  b2:	ec e7       	ldi	r30, 0x7C	; 124
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	10 82       	st	Z, r1
  b8:	80 81       	ld	r24, Z
  ba:	80 64       	ori	r24, 0x40	; 64
  bc:	80 83       	st	Z, r24
  be:	08 95       	ret

000000c0 <LDR_get_value>:
	}
}

uint16_t LDR_get_value(){
	ADCSRA |= (1<<ADSC);//start conversion
  c0:	ea e7       	ldi	r30, 0x7A	; 122
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	80 64       	ori	r24, 0x40	; 64
  c8:	80 83       	st	Z, r24
	while((ADCSRA&(1<<ADIF))==0);//wait for conversion to finish
  ca:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  ce:	84 ff       	sbrs	r24, 4
  d0:	fc cf       	rjmp	.-8      	; 0xca <LDR_get_value+0xa>
	ADCSRA |= (1<<ADIF); //borrar flag
  d2:	ea e7       	ldi	r30, 0x7A	; 122
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	80 61       	ori	r24, 0x10	; 16
  da:	80 83       	st	Z, r24
	result = (uint16_t) ADC;
  dc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  e0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  e4:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
  e8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
	return result;
  ec:	08 95       	ret

000000ee <distributeValues>:
void LEDS_setFinalGreen(uint8_t value){
	final_green = value;
}

void LEDS_setFinalBlue(uint8_t value){
	final_blue = value;
  ee:	cf 93       	push	r28
  f0:	5d ec       	ldi	r21, 0xCD	; 205
  f2:	85 9f       	mul	r24, r21
  f4:	a1 2d       	mov	r26, r1
  f6:	11 24       	eor	r1, r1
  f8:	a6 95       	lsr	r26
  fa:	a6 95       	lsr	r26
  fc:	a6 95       	lsr	r26
  fe:	2a 2f       	mov	r18, r26
 100:	22 0f       	add	r18, r18
 102:	92 2f       	mov	r25, r18
 104:	99 0f       	add	r25, r25
 106:	99 0f       	add	r25, r25
 108:	92 0f       	add	r25, r18
 10a:	c8 2f       	mov	r28, r24
 10c:	c9 1b       	sub	r28, r25
 10e:	65 9f       	mul	r22, r21
 110:	71 2d       	mov	r23, r1
 112:	11 24       	eor	r1, r1
 114:	76 95       	lsr	r23
 116:	76 95       	lsr	r23
 118:	76 95       	lsr	r23
 11a:	97 2f       	mov	r25, r23
 11c:	99 0f       	add	r25, r25
 11e:	89 2f       	mov	r24, r25
 120:	88 0f       	add	r24, r24
 122:	88 0f       	add	r24, r24
 124:	89 0f       	add	r24, r25
 126:	b6 2f       	mov	r27, r22
 128:	b8 1b       	sub	r27, r24
 12a:	45 9f       	mul	r20, r21
 12c:	51 2d       	mov	r21, r1
 12e:	11 24       	eor	r1, r1
 130:	56 95       	lsr	r21
 132:	56 95       	lsr	r21
 134:	56 95       	lsr	r21
 136:	95 2f       	mov	r25, r21
 138:	99 0f       	add	r25, r25
 13a:	89 2f       	mov	r24, r25
 13c:	88 0f       	add	r24, r24
 13e:	88 0f       	add	r24, r24
 140:	89 0f       	add	r24, r25
 142:	64 2f       	mov	r22, r20
 144:	68 1b       	sub	r22, r24
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	21 c0       	rjmp	.+66     	; 0x18c <distributeValues+0x9e>
 14a:	28 2f       	mov	r18, r24
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	8c 17       	cp	r24, r28
 150:	18 f4       	brcc	.+6      	; 0x158 <distributeValues+0x6a>
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	9a 0f       	add	r25, r26
 156:	01 c0       	rjmp	.+2      	; 0x15a <distributeValues+0x6c>
 158:	9a 2f       	mov	r25, r26
 15a:	f9 01       	movw	r30, r18
 15c:	e2 5e       	subi	r30, 0xE2	; 226
 15e:	fe 4f       	sbci	r31, 0xFE	; 254
 160:	90 83       	st	Z, r25
 162:	8b 17       	cp	r24, r27
 164:	18 f4       	brcc	.+6      	; 0x16c <distributeValues+0x7e>
 166:	91 e0       	ldi	r25, 0x01	; 1
 168:	97 0f       	add	r25, r23
 16a:	01 c0       	rjmp	.+2      	; 0x16e <distributeValues+0x80>
 16c:	97 2f       	mov	r25, r23
 16e:	f9 01       	movw	r30, r18
 170:	ec 5e       	subi	r30, 0xEC	; 236
 172:	fe 4f       	sbci	r31, 0xFE	; 254
 174:	90 83       	st	Z, r25
 176:	86 17       	cp	r24, r22
 178:	18 f4       	brcc	.+6      	; 0x180 <distributeValues+0x92>
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	95 0f       	add	r25, r21
 17e:	01 c0       	rjmp	.+2      	; 0x182 <distributeValues+0x94>
 180:	95 2f       	mov	r25, r21
 182:	f9 01       	movw	r30, r18
 184:	e6 5f       	subi	r30, 0xF6	; 246
 186:	fe 4f       	sbci	r31, 0xFE	; 254
 188:	90 83       	st	Z, r25
 18a:	8f 5f       	subi	r24, 0xFF	; 255
 18c:	8a 30       	cpi	r24, 0x0A	; 10
 18e:	e8 f2       	brcs	.-70     	; 0x14a <distributeValues+0x5c>
 190:	cf 91       	pop	r28
 192:	08 95       	ret

00000194 <LEDS_setRed>:
 194:	cf 93       	push	r28
 196:	c8 2f       	mov	r28, r24
 198:	0e 94 f6 02 	call	0x5ec	; 0x5ec <PWM_set_comp_value>
 19c:	c0 93 2a 01 	sts	0x012A, r28	; 0x80012a <red>
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <LEDS_setGreen>:
 1a4:	2f ef       	ldi	r18, 0xFF	; 255
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	28 1b       	sub	r18, r24
 1aa:	31 09       	sbc	r19, r1
 1ac:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 1b0:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 1b4:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <green>
 1b8:	08 95       	ret

000001ba <LEDS_setBlue>:
 1ba:	2f ef       	ldi	r18, 0xFF	; 255
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	28 1b       	sub	r18, r24
 1c0:	31 09       	sbc	r19, r1
 1c2:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1c6:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 1ca:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <blue>
 1ce:	08 95       	ret

000001d0 <LEDS_init>:
 1d0:	84 b1       	in	r24, 0x04	; 4
 1d2:	86 62       	ori	r24, 0x26	; 38
 1d4:	84 b9       	out	0x04, r24	; 4
 1d6:	85 b1       	in	r24, 0x05	; 5
 1d8:	80 62       	ori	r24, 0x20	; 32
 1da:	85 b9       	out	0x05, r24	; 5
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	0e 94 ca 00 	call	0x194	; 0x194 <LEDS_setRed>
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LEDS_setGreen>
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LEDS_setBlue>
 1ee:	20 e0       	ldi	r18, 0x00	; 0
 1f0:	0f c0       	rjmp	.+30     	; 0x210 <LEDS_init+0x40>
 1f2:	82 2f       	mov	r24, r18
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	fc 01       	movw	r30, r24
 1f8:	e2 5e       	subi	r30, 0xE2	; 226
 1fa:	fe 4f       	sbci	r31, 0xFE	; 254
 1fc:	10 82       	st	Z, r1
 1fe:	fc 01       	movw	r30, r24
 200:	ec 5e       	subi	r30, 0xEC	; 236
 202:	fe 4f       	sbci	r31, 0xFE	; 254
 204:	10 82       	st	Z, r1
 206:	fc 01       	movw	r30, r24
 208:	e6 5f       	subi	r30, 0xF6	; 246
 20a:	fe 4f       	sbci	r31, 0xFE	; 254
 20c:	10 82       	st	Z, r1
 20e:	2f 5f       	subi	r18, 0xFF	; 255
 210:	2a 30       	cpi	r18, 0x0A	; 10
 212:	78 f3       	brcs	.-34     	; 0x1f2 <LEDS_init+0x22>
 214:	08 95       	ret

00000216 <LEDS_getRed>:
 216:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <red>
 21a:	08 95       	ret

0000021c <LEDS_getGreen>:
 21c:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <green>
 220:	08 95       	ret

00000222 <LEDS_getBlue>:
 222:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <blue>
 226:	08 95       	ret

00000228 <LEDS_getFinalRed>:
}

uint8_t LEDS_getFinalRed(){
	return final_red;
}
 228:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <final_red>
 22c:	08 95       	ret

0000022e <LEDS_getFinalGreen>:

uint8_t LEDS_getFinalGreen(){
	return final_green;
}
 22e:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <final_green>
 232:	08 95       	ret

00000234 <LEDS_getFinalBlue>:

uint8_t LEDS_getFinalBlue(){
	return final_blue;
}
 234:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <final_blue>
 238:	08 95       	ret

0000023a <LEDS_setFinalRGB>:

void LEDS_setFinalRGB(uint8_t valueR, uint8_t valueG, uint8_t valueB){
	final_red = valueR;
 23a:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <final_red>
	final_green = valueG;
 23e:	60 93 2c 01 	sts	0x012C, r22	; 0x80012c <final_green>
	final_blue = valueB;
 242:	40 93 2b 01 	sts	0x012B, r20	; 0x80012b <final_blue>
	distributeValues(valueR, valueG, valueB);
 246:	0e 94 77 00 	call	0xee	; 0xee <distributeValues>
 24a:	08 95       	ret

0000024c <LEDS_incrementRed>:
}

void LEDS_incrementRed(uint16_t value){
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	ec 01       	movw	r28, r24
	LEDS_setRed(LEDS_getRed() + red_increments[value]);
 252:	0e 94 0b 01 	call	0x216	; 0x216 <LEDS_getRed>
 256:	c2 5e       	subi	r28, 0xE2	; 226
 258:	de 4f       	sbci	r29, 0xFE	; 254
 25a:	98 81       	ld	r25, Y
 25c:	89 0f       	add	r24, r25
 25e:	0e 94 ca 00 	call	0x194	; 0x194 <LEDS_setRed>
}
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	08 95       	ret

00000268 <LEDS_incrementGreen>:

void LEDS_incrementGreen(uint16_t value){
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	ec 01       	movw	r28, r24
	LEDS_setGreen(LEDS_getGreen() + green_increments[value]);
 26e:	0e 94 0e 01 	call	0x21c	; 0x21c <LEDS_getGreen>
 272:	cc 5e       	subi	r28, 0xEC	; 236
 274:	de 4f       	sbci	r29, 0xFE	; 254
 276:	98 81       	ld	r25, Y
 278:	89 0f       	add	r24, r25
 27a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LEDS_setGreen>
	
}
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	08 95       	ret

00000284 <LEDS_incrementBlue>:

void LEDS_incrementBlue(uint16_t value){
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
 288:	ec 01       	movw	r28, r24
	LEDS_setBlue(LEDS_getBlue() + blue_increments[value]);
 28a:	0e 94 11 01 	call	0x222	; 0x222 <LEDS_getBlue>
 28e:	c6 5f       	subi	r28, 0xF6	; 246
 290:	de 4f       	sbci	r29, 0xFE	; 254
 292:	98 81       	ld	r25, Y
 294:	89 0f       	add	r24, r25
 296:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LEDS_setBlue>
}
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	08 95       	ret

000002a0 <LEDS_decrementRed>:

void LEDS_decrementRed(uint16_t value){
 2a0:	cf 93       	push	r28
 2a2:	df 93       	push	r29
 2a4:	ec 01       	movw	r28, r24
	LEDS_setRed(LEDS_getRed() - red_increments[9 - value]);
 2a6:	0e 94 0b 01 	call	0x216	; 0x216 <LEDS_getRed>
 2aa:	e9 e0       	ldi	r30, 0x09	; 9
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	ec 1b       	sub	r30, r28
 2b0:	fd 0b       	sbc	r31, r29
 2b2:	e2 5e       	subi	r30, 0xE2	; 226
 2b4:	fe 4f       	sbci	r31, 0xFE	; 254
 2b6:	90 81       	ld	r25, Z
 2b8:	89 1b       	sub	r24, r25
 2ba:	0e 94 ca 00 	call	0x194	; 0x194 <LEDS_setRed>
}
 2be:	df 91       	pop	r29
 2c0:	cf 91       	pop	r28
 2c2:	08 95       	ret

000002c4 <LEDS_decrementGreen>:

void LEDS_decrementGreen(uint16_t value){
 2c4:	cf 93       	push	r28
 2c6:	df 93       	push	r29
 2c8:	ec 01       	movw	r28, r24
	LEDS_setGreen(LEDS_getGreen() - green_increments[9 - value]);
 2ca:	0e 94 0e 01 	call	0x21c	; 0x21c <LEDS_getGreen>
 2ce:	e9 e0       	ldi	r30, 0x09	; 9
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	ec 1b       	sub	r30, r28
 2d4:	fd 0b       	sbc	r31, r29
 2d6:	ec 5e       	subi	r30, 0xEC	; 236
 2d8:	fe 4f       	sbci	r31, 0xFE	; 254
 2da:	90 81       	ld	r25, Z
 2dc:	89 1b       	sub	r24, r25
 2de:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LEDS_setGreen>
}
 2e2:	df 91       	pop	r29
 2e4:	cf 91       	pop	r28
 2e6:	08 95       	ret

000002e8 <LEDS_decrementBlue>:

void LEDS_decrementBlue(uint16_t value){
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
 2ec:	ec 01       	movw	r28, r24
	LEDS_setBlue(LEDS_getBlue() - blue_increments[9 - value]);
 2ee:	0e 94 11 01 	call	0x222	; 0x222 <LEDS_getBlue>
 2f2:	e9 e0       	ldi	r30, 0x09	; 9
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	ec 1b       	sub	r30, r28
 2f8:	fd 0b       	sbc	r31, r29
 2fa:	e6 5f       	subi	r30, 0xF6	; 246
 2fc:	fe 4f       	sbci	r31, 0xFE	; 254
 2fe:	90 81       	ld	r25, Z
 300:	89 1b       	sub	r24, r25
 302:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LEDS_setBlue>
}
 306:	df 91       	pop	r29
 308:	cf 91       	pop	r28
 30a:	08 95       	ret

0000030c <main>:


int main(void)
{
	
	TIMERS_InitTimer0();
 30c:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <TIMERS_InitTimer0>
	TIMERS_InitTimer1();
 310:	0e 94 2b 03 	call	0x656	; 0x656 <TIMERS_InitTimer1>
	
	LEDS_init();
 314:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LEDS_init>
	MEF_init();
 318:	0e 94 a1 01 	call	0x342	; 0x342 <MEF_init>
	LEDS_setFinalRGB(204, 255, 229);
 31c:	45 ee       	ldi	r20, 0xE5	; 229
 31e:	6f ef       	ldi	r22, 0xFF	; 255
 320:	8c ec       	ldi	r24, 0xCC	; 204
 322:	0e 94 1d 01 	call	0x23a	; 0x23a <LEDS_setFinalRGB>
	
	LDR_config();
 326:	0e 94 53 00 	call	0xa6	; 0xa6 <LDR_config>
	
	PWM_soft_init();
 32a:	0e 94 ef 02 	call	0x5de	; 0x5de <PWM_soft_init>
	
	//Test PB4 como salida y un 1 en la misma
	DDRB |= (1 << PORTB4);
 32e:	84 b1       	in	r24, 0x04	; 4
 330:	80 61       	ori	r24, 0x10	; 16
 332:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1 << PORTB4);
 334:	85 b1       	in	r24, 0x05	; 5
 336:	8f 7e       	andi	r24, 0xEF	; 239
 338:	85 b9       	out	0x05, r24	; 5
	
	sei();
 33a:	78 94       	sei
	
    while(1)
    {
		sEOS_Dispatch_Tasks();
 33c:	0e 94 9b 02 	call	0x536	; 0x536 <sEOS_Dispatch_Tasks>
 340:	fd cf       	rjmp	.-6      	; 0x33c <main+0x30>

00000342 <MEF_init>:
static uint16_t timeOff = 20;
static double pendiente;
static uint16_t desplazamiento;

void MEF_init(){
	state = OFF;
 342:	83 e0       	ldi	r24, 0x03	; 3
 344:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <state>
	stateCount = 0;
 348:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <stateCount+0x1>
 34c:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <stateCount>

	pendiente = (40-100) / (MIN_SUP_LDR - MAX_INF_LDR);
 350:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <pendiente>
 354:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <pendiente+0x1>
 358:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <pendiente+0x2>
 35c:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <pendiente+0x3>
	desplazamiento = 100 + round(pendiente * MAX_INF_LDR);
 360:	84 e6       	ldi	r24, 0x64	; 100
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <desplazamiento+0x1>
 368:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <desplazamiento>
 36c:	08 95       	ret

0000036e <update_timeOff>:
}

void  update_timeOff(){
 36e:	cf 92       	push	r12
 370:	df 92       	push	r13
 372:	ef 92       	push	r14
 374:	ff 92       	push	r15
	uint16_t LDR_value = LDR_get_value();
 376:	0e 94 60 00 	call	0xc0	; 0xc0 <LDR_get_value>
	
	// Caso en el que Tparpadeo = 5seg (minima luz o menos)
	if (LDR_value < MAX_INF_LDR){
 37a:	88 32       	cpi	r24, 0x28	; 40
 37c:	91 05       	cpc	r25, r1
 37e:	38 f4       	brcc	.+14     	; 0x38e <update_timeOff+0x20>
		timeOff = 100;
 380:	84 e6       	ldi	r24, 0x64	; 100
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 388:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 38c:	2f c0       	rjmp	.+94     	; 0x3ec <update_timeOff+0x7e>
	}
	// Caso en el que Tparepadeo = 2seg (luz ambiente o mas)
	else if (LDR_value > MIN_SUP_LDR){
 38e:	89 3c       	cpi	r24, 0xC9	; 201
 390:	91 05       	cpc	r25, r1
 392:	38 f0       	brcs	.+14     	; 0x3a2 <update_timeOff+0x34>
		timeOff = 40;
 394:	88 e2       	ldi	r24, 0x28	; 40
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 39c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 3a0:	25 c0       	rjmp	.+74     	; 0x3ec <update_timeOff+0x7e>
	}
	else {
		timeOff = desplazamiento - round(pendiente*LDR_value); // Parte de la recta con pendiente m negativa
 3a2:	bc 01       	movw	r22, r24
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <__floatunsisf>
 3ac:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <pendiente>
 3b0:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <pendiente+0x1>
 3b4:	40 91 32 01 	lds	r20, 0x0132	; 0x800132 <pendiente+0x2>
 3b8:	50 91 33 01 	lds	r21, 0x0133	; 0x800133 <pendiente+0x3>
 3bc:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__mulsf3>
 3c0:	0e 94 cd 04 	call	0x99a	; 0x99a <round>
 3c4:	6b 01       	movw	r12, r22
 3c6:	7c 01       	movw	r14, r24
 3c8:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <desplazamiento>
 3cc:	70 91 2f 01 	lds	r23, 0x012F	; 0x80012f <desplazamiento+0x1>
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <__floatunsisf>
 3d8:	a7 01       	movw	r20, r14
 3da:	96 01       	movw	r18, r12
 3dc:	0e 94 36 03 	call	0x66c	; 0x66c <__subsf3>
 3e0:	0e 94 a3 03 	call	0x746	; 0x746 <__fixunssfsi>
 3e4:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3e8:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
 3ec:	ff 90       	pop	r15
 3ee:	ef 90       	pop	r14
 3f0:	df 90       	pop	r13
 3f2:	cf 90       	pop	r12
 3f4:	08 95       	ret

000003f6 <MEF_Update>:

void MEF_Update(){
	stateCount++;
 3f6:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <stateCount>
 3fa:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <stateCount+0x1>
 3fe:	01 96       	adiw	r24, 0x01	; 1
 400:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <stateCount+0x1>
 404:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <stateCount>
	
	switch (state){
 408:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <state>
 40c:	81 30       	cpi	r24, 0x01	; 1
 40e:	09 f4       	brne	.+2      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 410:	4f c0       	rjmp	.+158    	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
 412:	38 f1       	brcs	.+78     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 414:	82 30       	cpi	r24, 0x02	; 2
 416:	09 f4       	brne	.+2      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 418:	68 c0       	rjmp	.+208    	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
 41a:	83 30       	cpi	r24, 0x03	; 3
 41c:	09 f0       	breq	.+2      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 41e:	8a c0       	rjmp	.+276    	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
		case OFF:
			PORTB |= (1<<PORTB4);
 420:	85 b1       	in	r24, 0x05	; 5
 422:	80 61       	ori	r24, 0x10	; 16
 424:	85 b9       	out	0x05, r24	; 5
			
			LEDS_setRed(0);
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	0e 94 ca 00 	call	0x194	; 0x194 <LEDS_setRed>
			LEDS_setGreen(0);
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LEDS_setGreen>
			LEDS_setBlue(0);
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LEDS_setBlue>
			
			update_timeOff();
 438:	0e 94 b7 01 	call	0x36e	; 0x36e <update_timeOff>
			if(stateCount >= timeOff){
 43c:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <stateCount>
 440:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <stateCount+0x1>
 444:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 448:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 44c:	28 17       	cp	r18, r24
 44e:	39 07       	cpc	r19, r25
 450:	08 f4       	brcc	.+2      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 452:	70 c0       	rjmp	.+224    	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
				state = RAISING;
 454:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <state>
				stateCount = 0;
 458:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <stateCount+0x1>
 45c:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <stateCount>
 460:	08 95       	ret
			}
			break;
			
		case RAISING:
			PORTB |= (1<<PORTB4);
 462:	85 b1       	in	r24, 0x05	; 5
 464:	80 61       	ori	r24, 0x10	; 16
 466:	85 b9       	out	0x05, r24	; 5
			
			LEDS_incrementRed(stateCount - 1);
 468:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <stateCount>
 46c:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <stateCount+0x1>
 470:	01 97       	sbiw	r24, 0x01	; 1
 472:	0e 94 26 01 	call	0x24c	; 0x24c <LEDS_incrementRed>
			LEDS_incrementGreen(stateCount - 1);
 476:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <stateCount>
 47a:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <stateCount+0x1>
 47e:	01 97       	sbiw	r24, 0x01	; 1
 480:	0e 94 34 01 	call	0x268	; 0x268 <LEDS_incrementGreen>
			LEDS_incrementBlue(stateCount - 1);
 484:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <stateCount>
 488:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <stateCount+0x1>
 48c:	01 97       	sbiw	r24, 0x01	; 1
 48e:	0e 94 42 01 	call	0x284	; 0x284 <LEDS_incrementBlue>
			
			if(stateCount == 10){
 492:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <stateCount>
 496:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <stateCount+0x1>
 49a:	0a 97       	sbiw	r24, 0x0a	; 10
 49c:	09 f0       	breq	.+2      	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
 49e:	4a c0       	rjmp	.+148    	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
				state = ON;
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <state>
				stateCount = 0;
 4a6:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <stateCount+0x1>
 4aa:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <stateCount>
 4ae:	08 95       	ret
			}
			break;
			
		case ON:
			PORTB &= ~(1<<PORTB4);
 4b0:	85 b1       	in	r24, 0x05	; 5
 4b2:	8f 7e       	andi	r24, 0xEF	; 239
 4b4:	85 b9       	out	0x05, r24	; 5

			
			LEDS_setRed(LEDS_getFinalRed());
 4b6:	0e 94 14 01 	call	0x228	; 0x228 <LEDS_getFinalRed>
 4ba:	0e 94 ca 00 	call	0x194	; 0x194 <LEDS_setRed>
			LEDS_setGreen(LEDS_getFinalGreen());
 4be:	0e 94 17 01 	call	0x22e	; 0x22e <LEDS_getFinalGreen>
 4c2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LEDS_setGreen>
			LEDS_setBlue(LEDS_getFinalBlue());
 4c6:	0e 94 1a 01 	call	0x234	; 0x234 <LEDS_getFinalBlue>
 4ca:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LEDS_setBlue>
			
			if(stateCount == 20){
 4ce:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <stateCount>
 4d2:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <stateCount+0x1>
 4d6:	44 97       	sbiw	r24, 0x14	; 20
 4d8:	69 f5       	brne	.+90     	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
				state = FALLING;
 4da:	82 e0       	ldi	r24, 0x02	; 2
 4dc:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <state>
				stateCount = 0;
 4e0:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <stateCount+0x1>
 4e4:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <stateCount>
 4e8:	08 95       	ret
			}
			break;
			
		case FALLING:
			PORTB |= (1<<PORTB4);
 4ea:	85 b1       	in	r24, 0x05	; 5
 4ec:	80 61       	ori	r24, 0x10	; 16
 4ee:	85 b9       	out	0x05, r24	; 5
			
			LEDS_decrementRed(stateCount - 1);
 4f0:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <stateCount>
 4f4:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <stateCount+0x1>
 4f8:	01 97       	sbiw	r24, 0x01	; 1
 4fa:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LEDS_decrementRed>
			LEDS_decrementGreen(stateCount - 1);
 4fe:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <stateCount>
 502:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <stateCount+0x1>
 506:	01 97       	sbiw	r24, 0x01	; 1
 508:	0e 94 62 01 	call	0x2c4	; 0x2c4 <LEDS_decrementGreen>
			LEDS_decrementBlue(stateCount - 1);
 50c:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <stateCount>
 510:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <stateCount+0x1>
 514:	01 97       	sbiw	r24, 0x01	; 1
 516:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LEDS_decrementBlue>
			
			if(stateCount == 10){
 51a:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <stateCount>
 51e:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <stateCount+0x1>
 522:	0a 97       	sbiw	r24, 0x0a	; 10
 524:	39 f4       	brne	.+14     	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
				state = OFF;
 526:	83 e0       	ldi	r24, 0x03	; 3
 528:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <state>
				stateCount = 0;
 52c:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <stateCount+0x1>
 530:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <stateCount>
 534:	08 95       	ret

00000536 <sEOS_Dispatch_Tasks>:
static volatile uint16_t counter_LDR = 8;
static volatile uint8_t FLAG_LDR = 0;


void sEOS_Dispatch_Tasks(){
	if(FLAG_MEF){
 536:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <FLAG_MEF>
 53a:	88 23       	and	r24, r24
 53c:	21 f0       	breq	.+8      	; 0x546 <sEOS_Dispatch_Tasks+0x10>
		MEF_Update();
 53e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <MEF_Update>
		FLAG_MEF = 0;	
 542:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <FLAG_MEF>
 546:	08 95       	ret

00000548 <sEOS_SCH_Tasks>:
	*/
}

void sEOS_SCH_Tasks(){
	//Cada 50 ms pone el flag en 1
	if (++counter_MEF == 781) {
 548:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <counter_MEF>
 54c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <counter_MEF+0x1>
 550:	01 96       	adiw	r24, 0x01	; 1
 552:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <counter_MEF+0x1>
 556:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <counter_MEF>
 55a:	8d 30       	cpi	r24, 0x0D	; 13
 55c:	93 40       	sbci	r25, 0x03	; 3
 55e:	39 f4       	brne	.+14     	; 0x56e <sEOS_SCH_Tasks+0x26>
		FLAG_MEF = 1;
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <FLAG_MEF>
		counter_MEF = 0;
 566:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <counter_MEF+0x1>
 56a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <counter_MEF>
	}
	if (++counter_LDR == 10) {
 56e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <counter_LDR>
 572:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <counter_LDR+0x1>
 576:	01 96       	adiw	r24, 0x01	; 1
 578:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <counter_LDR+0x1>
 57c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <counter_LDR>
 580:	0a 97       	sbiw	r24, 0x0a	; 10
 582:	39 f4       	brne	.+14     	; 0x592 <sEOS_SCH_Tasks+0x4a>
		FLAG_LDR = 1;
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <FLAG_LDR>
		counter_LDR = 0;
 58a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <counter_LDR+0x1>
 58e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <counter_LDR>
	}
	PWM_soft_Update();
 592:	0e 94 cc 02 	call	0x598	; 0x598 <PWM_soft_Update>
 596:	08 95       	ret

00000598 <PWM_soft_Update>:
	PWM_OFF;
}

uint8_t PWM_get_comp_value(){
	return PWM_DELTA;
}
 598:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <PWM_position>
 59c:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <PWM_position+0x1>
 5a0:	01 96       	adiw	r24, 0x01	; 1
 5a2:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <PWM_position+0x1>
 5a6:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <PWM_position>
 5aa:	8f 3f       	cpi	r24, 0xFF	; 255
 5ac:	91 05       	cpc	r25, r1
 5ae:	49 f0       	breq	.+18     	; 0x5c2 <PWM_soft_Update+0x2a>
 5b0:	40 f0       	brcs	.+16     	; 0x5c2 <PWM_soft_Update+0x2a>
 5b2:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <PWM_position+0x1>
 5b6:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <PWM_position>
 5ba:	85 b1       	in	r24, 0x05	; 5
 5bc:	80 62       	ori	r24, 0x20	; 32
 5be:	85 b9       	out	0x05, r24	; 5
 5c0:	08 95       	ret
 5c2:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <PWM_DELTA>
 5c6:	30 e0       	ldi	r19, 0x00	; 0
 5c8:	82 17       	cp	r24, r18
 5ca:	93 07       	cpc	r25, r19
 5cc:	20 f4       	brcc	.+8      	; 0x5d6 <PWM_soft_Update+0x3e>
 5ce:	85 b1       	in	r24, 0x05	; 5
 5d0:	8f 7d       	andi	r24, 0xDF	; 223
 5d2:	85 b9       	out	0x05, r24	; 5
 5d4:	08 95       	ret
 5d6:	85 b1       	in	r24, 0x05	; 5
 5d8:	80 62       	ori	r24, 0x20	; 32
 5da:	85 b9       	out	0x05, r24	; 5
 5dc:	08 95       	ret

000005de <PWM_soft_init>:
 5de:	84 b1       	in	r24, 0x04	; 4
 5e0:	80 62       	ori	r24, 0x20	; 32
 5e2:	84 b9       	out	0x04, r24	; 4
 5e4:	85 b1       	in	r24, 0x05	; 5
 5e6:	8f 7d       	andi	r24, 0xDF	; 223
 5e8:	85 b9       	out	0x05, r24	; 5
 5ea:	08 95       	ret

000005ec <PWM_set_comp_value>:

void PWM_set_comp_value(uint8_t value){
	PWM_DELTA = value;
 5ec:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <PWM_DELTA>
 5f0:	08 95       	ret

000005f2 <TIMERS_InitTimer0>:
	OCR0A = 249;
	*/
	
	// Interrupcion cada 64 us
	// Prescaler en 8
	TCCR0A |= (1 << WGM01); // Modo CTC
 5f2:	84 b5       	in	r24, 0x24	; 36
 5f4:	82 60       	ori	r24, 0x02	; 2
 5f6:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS01);
 5f8:	85 b5       	in	r24, 0x25	; 37
 5fa:	82 60       	ori	r24, 0x02	; 2
 5fc:	85 bd       	out	0x25, r24	; 37
	OCR0A = 127;
 5fe:	8f e7       	ldi	r24, 0x7F	; 127
 600:	87 bd       	out	0x27, r24	; 39
	
	TIMSK0 |= (1 << OCIE0A);
 602:	ee e6       	ldi	r30, 0x6E	; 110
 604:	f0 e0       	ldi	r31, 0x00	; 0
 606:	80 81       	ld	r24, Z
 608:	82 60       	ori	r24, 0x02	; 2
 60a:	80 83       	st	Z, r24
 60c:	08 95       	ret

0000060e <__vector_14>:
	
}

ISR(TIMER0_COMPA_vect){
 60e:	1f 92       	push	r1
 610:	0f 92       	push	r0
 612:	0f b6       	in	r0, 0x3f	; 63
 614:	0f 92       	push	r0
 616:	11 24       	eor	r1, r1
 618:	2f 93       	push	r18
 61a:	3f 93       	push	r19
 61c:	4f 93       	push	r20
 61e:	5f 93       	push	r21
 620:	6f 93       	push	r22
 622:	7f 93       	push	r23
 624:	8f 93       	push	r24
 626:	9f 93       	push	r25
 628:	af 93       	push	r26
 62a:	bf 93       	push	r27
 62c:	ef 93       	push	r30
 62e:	ff 93       	push	r31
	sEOS_SCH_Tasks();
 630:	0e 94 a4 02 	call	0x548	; 0x548 <sEOS_SCH_Tasks>
 634:	ff 91       	pop	r31
 636:	ef 91       	pop	r30
 638:	bf 91       	pop	r27
 63a:	af 91       	pop	r26
 63c:	9f 91       	pop	r25
 63e:	8f 91       	pop	r24
 640:	7f 91       	pop	r23
 642:	6f 91       	pop	r22
 644:	5f 91       	pop	r21
 646:	4f 91       	pop	r20
 648:	3f 91       	pop	r19
 64a:	2f 91       	pop	r18
 64c:	0f 90       	pop	r0
 64e:	0f be       	out	0x3f, r0	; 63
 650:	0f 90       	pop	r0
 652:	1f 90       	pop	r1
 654:	18 95       	reti

00000656 <TIMERS_InitTimer1>:
// Init timer
void TIMERS_InitTimer1(){
	//Modo Fast PWM con top = 0x00FF (Modo 5)
	//Prescaler en 1024
	//Modo invertido (clear on count reset)
	TCCR1A |= (1 << WGM10) | (1<< COM1A1) | (1<< COM1B1);
 656:	e0 e8       	ldi	r30, 0x80	; 128
 658:	f0 e0       	ldi	r31, 0x00	; 0
 65a:	80 81       	ld	r24, Z
 65c:	81 6a       	ori	r24, 0xA1	; 161
 65e:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << CS12) | (1 << CS10);// | (1 << CS10) ;
 660:	e1 e8       	ldi	r30, 0x81	; 129
 662:	f0 e0       	ldi	r31, 0x00	; 0
 664:	80 81       	ld	r24, Z
 666:	8d 60       	ori	r24, 0x0D	; 13
 668:	80 83       	st	Z, r24
 66a:	08 95       	ret

0000066c <__subsf3>:
 66c:	50 58       	subi	r21, 0x80	; 128

0000066e <__addsf3>:
 66e:	bb 27       	eor	r27, r27
 670:	aa 27       	eor	r26, r26
 672:	0e 94 4e 03 	call	0x69c	; 0x69c <__addsf3x>
 676:	0c 94 26 04 	jmp	0x84c	; 0x84c <__fp_round>
 67a:	0e 94 18 04 	call	0x830	; 0x830 <__fp_pscA>
 67e:	38 f0       	brcs	.+14     	; 0x68e <__addsf3+0x20>
 680:	0e 94 1f 04 	call	0x83e	; 0x83e <__fp_pscB>
 684:	20 f0       	brcs	.+8      	; 0x68e <__addsf3+0x20>
 686:	39 f4       	brne	.+14     	; 0x696 <__addsf3+0x28>
 688:	9f 3f       	cpi	r25, 0xFF	; 255
 68a:	19 f4       	brne	.+6      	; 0x692 <__addsf3+0x24>
 68c:	26 f4       	brtc	.+8      	; 0x696 <__addsf3+0x28>
 68e:	0c 94 15 04 	jmp	0x82a	; 0x82a <__fp_nan>
 692:	0e f4       	brtc	.+2      	; 0x696 <__addsf3+0x28>
 694:	e0 95       	com	r30
 696:	e7 fb       	bst	r30, 7
 698:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__fp_inf>

0000069c <__addsf3x>:
 69c:	e9 2f       	mov	r30, r25
 69e:	0e 94 37 04 	call	0x86e	; 0x86e <__fp_split3>
 6a2:	58 f3       	brcs	.-42     	; 0x67a <__addsf3+0xc>
 6a4:	ba 17       	cp	r27, r26
 6a6:	62 07       	cpc	r22, r18
 6a8:	73 07       	cpc	r23, r19
 6aa:	84 07       	cpc	r24, r20
 6ac:	95 07       	cpc	r25, r21
 6ae:	20 f0       	brcs	.+8      	; 0x6b8 <__addsf3x+0x1c>
 6b0:	79 f4       	brne	.+30     	; 0x6d0 <__addsf3x+0x34>
 6b2:	a6 f5       	brtc	.+104    	; 0x71c <__addsf3x+0x80>
 6b4:	0c 94 59 04 	jmp	0x8b2	; 0x8b2 <__fp_zero>
 6b8:	0e f4       	brtc	.+2      	; 0x6bc <__addsf3x+0x20>
 6ba:	e0 95       	com	r30
 6bc:	0b 2e       	mov	r0, r27
 6be:	ba 2f       	mov	r27, r26
 6c0:	a0 2d       	mov	r26, r0
 6c2:	0b 01       	movw	r0, r22
 6c4:	b9 01       	movw	r22, r18
 6c6:	90 01       	movw	r18, r0
 6c8:	0c 01       	movw	r0, r24
 6ca:	ca 01       	movw	r24, r20
 6cc:	a0 01       	movw	r20, r0
 6ce:	11 24       	eor	r1, r1
 6d0:	ff 27       	eor	r31, r31
 6d2:	59 1b       	sub	r21, r25
 6d4:	99 f0       	breq	.+38     	; 0x6fc <__addsf3x+0x60>
 6d6:	59 3f       	cpi	r21, 0xF9	; 249
 6d8:	50 f4       	brcc	.+20     	; 0x6ee <__addsf3x+0x52>
 6da:	50 3e       	cpi	r21, 0xE0	; 224
 6dc:	68 f1       	brcs	.+90     	; 0x738 <__addsf3x+0x9c>
 6de:	1a 16       	cp	r1, r26
 6e0:	f0 40       	sbci	r31, 0x00	; 0
 6e2:	a2 2f       	mov	r26, r18
 6e4:	23 2f       	mov	r18, r19
 6e6:	34 2f       	mov	r19, r20
 6e8:	44 27       	eor	r20, r20
 6ea:	58 5f       	subi	r21, 0xF8	; 248
 6ec:	f3 cf       	rjmp	.-26     	; 0x6d4 <__addsf3x+0x38>
 6ee:	46 95       	lsr	r20
 6f0:	37 95       	ror	r19
 6f2:	27 95       	ror	r18
 6f4:	a7 95       	ror	r26
 6f6:	f0 40       	sbci	r31, 0x00	; 0
 6f8:	53 95       	inc	r21
 6fa:	c9 f7       	brne	.-14     	; 0x6ee <__addsf3x+0x52>
 6fc:	7e f4       	brtc	.+30     	; 0x71c <__addsf3x+0x80>
 6fe:	1f 16       	cp	r1, r31
 700:	ba 0b       	sbc	r27, r26
 702:	62 0b       	sbc	r22, r18
 704:	73 0b       	sbc	r23, r19
 706:	84 0b       	sbc	r24, r20
 708:	ba f0       	brmi	.+46     	; 0x738 <__addsf3x+0x9c>
 70a:	91 50       	subi	r25, 0x01	; 1
 70c:	a1 f0       	breq	.+40     	; 0x736 <__addsf3x+0x9a>
 70e:	ff 0f       	add	r31, r31
 710:	bb 1f       	adc	r27, r27
 712:	66 1f       	adc	r22, r22
 714:	77 1f       	adc	r23, r23
 716:	88 1f       	adc	r24, r24
 718:	c2 f7       	brpl	.-16     	; 0x70a <__addsf3x+0x6e>
 71a:	0e c0       	rjmp	.+28     	; 0x738 <__addsf3x+0x9c>
 71c:	ba 0f       	add	r27, r26
 71e:	62 1f       	adc	r22, r18
 720:	73 1f       	adc	r23, r19
 722:	84 1f       	adc	r24, r20
 724:	48 f4       	brcc	.+18     	; 0x738 <__addsf3x+0x9c>
 726:	87 95       	ror	r24
 728:	77 95       	ror	r23
 72a:	67 95       	ror	r22
 72c:	b7 95       	ror	r27
 72e:	f7 95       	ror	r31
 730:	9e 3f       	cpi	r25, 0xFE	; 254
 732:	08 f0       	brcs	.+2      	; 0x736 <__addsf3x+0x9a>
 734:	b0 cf       	rjmp	.-160    	; 0x696 <__addsf3+0x28>
 736:	93 95       	inc	r25
 738:	88 0f       	add	r24, r24
 73a:	08 f0       	brcs	.+2      	; 0x73e <__addsf3x+0xa2>
 73c:	99 27       	eor	r25, r25
 73e:	ee 0f       	add	r30, r30
 740:	97 95       	ror	r25
 742:	87 95       	ror	r24
 744:	08 95       	ret

00000746 <__fixunssfsi>:
 746:	0e 94 3f 04 	call	0x87e	; 0x87e <__fp_splitA>
 74a:	88 f0       	brcs	.+34     	; 0x76e <__fixunssfsi+0x28>
 74c:	9f 57       	subi	r25, 0x7F	; 127
 74e:	98 f0       	brcs	.+38     	; 0x776 <__fixunssfsi+0x30>
 750:	b9 2f       	mov	r27, r25
 752:	99 27       	eor	r25, r25
 754:	b7 51       	subi	r27, 0x17	; 23
 756:	b0 f0       	brcs	.+44     	; 0x784 <__fixunssfsi+0x3e>
 758:	e1 f0       	breq	.+56     	; 0x792 <__fixunssfsi+0x4c>
 75a:	66 0f       	add	r22, r22
 75c:	77 1f       	adc	r23, r23
 75e:	88 1f       	adc	r24, r24
 760:	99 1f       	adc	r25, r25
 762:	1a f0       	brmi	.+6      	; 0x76a <__fixunssfsi+0x24>
 764:	ba 95       	dec	r27
 766:	c9 f7       	brne	.-14     	; 0x75a <__fixunssfsi+0x14>
 768:	14 c0       	rjmp	.+40     	; 0x792 <__fixunssfsi+0x4c>
 76a:	b1 30       	cpi	r27, 0x01	; 1
 76c:	91 f0       	breq	.+36     	; 0x792 <__fixunssfsi+0x4c>
 76e:	0e 94 59 04 	call	0x8b2	; 0x8b2 <__fp_zero>
 772:	b1 e0       	ldi	r27, 0x01	; 1
 774:	08 95       	ret
 776:	0c 94 59 04 	jmp	0x8b2	; 0x8b2 <__fp_zero>
 77a:	67 2f       	mov	r22, r23
 77c:	78 2f       	mov	r23, r24
 77e:	88 27       	eor	r24, r24
 780:	b8 5f       	subi	r27, 0xF8	; 248
 782:	39 f0       	breq	.+14     	; 0x792 <__fixunssfsi+0x4c>
 784:	b9 3f       	cpi	r27, 0xF9	; 249
 786:	cc f3       	brlt	.-14     	; 0x77a <__fixunssfsi+0x34>
 788:	86 95       	lsr	r24
 78a:	77 95       	ror	r23
 78c:	67 95       	ror	r22
 78e:	b3 95       	inc	r27
 790:	d9 f7       	brne	.-10     	; 0x788 <__fixunssfsi+0x42>
 792:	3e f4       	brtc	.+14     	; 0x7a2 <__fixunssfsi+0x5c>
 794:	90 95       	com	r25
 796:	80 95       	com	r24
 798:	70 95       	com	r23
 79a:	61 95       	neg	r22
 79c:	7f 4f       	sbci	r23, 0xFF	; 255
 79e:	8f 4f       	sbci	r24, 0xFF	; 255
 7a0:	9f 4f       	sbci	r25, 0xFF	; 255
 7a2:	08 95       	ret

000007a4 <__floatunsisf>:
 7a4:	e8 94       	clt
 7a6:	09 c0       	rjmp	.+18     	; 0x7ba <__floatsisf+0x12>

000007a8 <__floatsisf>:
 7a8:	97 fb       	bst	r25, 7
 7aa:	3e f4       	brtc	.+14     	; 0x7ba <__floatsisf+0x12>
 7ac:	90 95       	com	r25
 7ae:	80 95       	com	r24
 7b0:	70 95       	com	r23
 7b2:	61 95       	neg	r22
 7b4:	7f 4f       	sbci	r23, 0xFF	; 255
 7b6:	8f 4f       	sbci	r24, 0xFF	; 255
 7b8:	9f 4f       	sbci	r25, 0xFF	; 255
 7ba:	99 23       	and	r25, r25
 7bc:	a9 f0       	breq	.+42     	; 0x7e8 <__floatsisf+0x40>
 7be:	f9 2f       	mov	r31, r25
 7c0:	96 e9       	ldi	r25, 0x96	; 150
 7c2:	bb 27       	eor	r27, r27
 7c4:	93 95       	inc	r25
 7c6:	f6 95       	lsr	r31
 7c8:	87 95       	ror	r24
 7ca:	77 95       	ror	r23
 7cc:	67 95       	ror	r22
 7ce:	b7 95       	ror	r27
 7d0:	f1 11       	cpse	r31, r1
 7d2:	f8 cf       	rjmp	.-16     	; 0x7c4 <__floatsisf+0x1c>
 7d4:	fa f4       	brpl	.+62     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 7d6:	bb 0f       	add	r27, r27
 7d8:	11 f4       	brne	.+4      	; 0x7de <__floatsisf+0x36>
 7da:	60 ff       	sbrs	r22, 0
 7dc:	1b c0       	rjmp	.+54     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 7de:	6f 5f       	subi	r22, 0xFF	; 255
 7e0:	7f 4f       	sbci	r23, 0xFF	; 255
 7e2:	8f 4f       	sbci	r24, 0xFF	; 255
 7e4:	9f 4f       	sbci	r25, 0xFF	; 255
 7e6:	16 c0       	rjmp	.+44     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 7e8:	88 23       	and	r24, r24
 7ea:	11 f0       	breq	.+4      	; 0x7f0 <__floatsisf+0x48>
 7ec:	96 e9       	ldi	r25, 0x96	; 150
 7ee:	11 c0       	rjmp	.+34     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 7f0:	77 23       	and	r23, r23
 7f2:	21 f0       	breq	.+8      	; 0x7fc <__floatsisf+0x54>
 7f4:	9e e8       	ldi	r25, 0x8E	; 142
 7f6:	87 2f       	mov	r24, r23
 7f8:	76 2f       	mov	r23, r22
 7fa:	05 c0       	rjmp	.+10     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 7fc:	66 23       	and	r22, r22
 7fe:	71 f0       	breq	.+28     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 800:	96 e8       	ldi	r25, 0x86	; 134
 802:	86 2f       	mov	r24, r22
 804:	70 e0       	ldi	r23, 0x00	; 0
 806:	60 e0       	ldi	r22, 0x00	; 0
 808:	2a f0       	brmi	.+10     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 80a:	9a 95       	dec	r25
 80c:	66 0f       	add	r22, r22
 80e:	77 1f       	adc	r23, r23
 810:	88 1f       	adc	r24, r24
 812:	da f7       	brpl	.-10     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 814:	88 0f       	add	r24, r24
 816:	96 95       	lsr	r25
 818:	87 95       	ror	r24
 81a:	97 f9       	bld	r25, 7
 81c:	08 95       	ret

0000081e <__fp_inf>:
 81e:	97 f9       	bld	r25, 7
 820:	9f 67       	ori	r25, 0x7F	; 127
 822:	80 e8       	ldi	r24, 0x80	; 128
 824:	70 e0       	ldi	r23, 0x00	; 0
 826:	60 e0       	ldi	r22, 0x00	; 0
 828:	08 95       	ret

0000082a <__fp_nan>:
 82a:	9f ef       	ldi	r25, 0xFF	; 255
 82c:	80 ec       	ldi	r24, 0xC0	; 192
 82e:	08 95       	ret

00000830 <__fp_pscA>:
 830:	00 24       	eor	r0, r0
 832:	0a 94       	dec	r0
 834:	16 16       	cp	r1, r22
 836:	17 06       	cpc	r1, r23
 838:	18 06       	cpc	r1, r24
 83a:	09 06       	cpc	r0, r25
 83c:	08 95       	ret

0000083e <__fp_pscB>:
 83e:	00 24       	eor	r0, r0
 840:	0a 94       	dec	r0
 842:	12 16       	cp	r1, r18
 844:	13 06       	cpc	r1, r19
 846:	14 06       	cpc	r1, r20
 848:	05 06       	cpc	r0, r21
 84a:	08 95       	ret

0000084c <__fp_round>:
 84c:	09 2e       	mov	r0, r25
 84e:	03 94       	inc	r0
 850:	00 0c       	add	r0, r0
 852:	11 f4       	brne	.+4      	; 0x858 <__fp_round+0xc>
 854:	88 23       	and	r24, r24
 856:	52 f0       	brmi	.+20     	; 0x86c <__fp_round+0x20>
 858:	bb 0f       	add	r27, r27
 85a:	40 f4       	brcc	.+16     	; 0x86c <__fp_round+0x20>
 85c:	bf 2b       	or	r27, r31
 85e:	11 f4       	brne	.+4      	; 0x864 <__fp_round+0x18>
 860:	60 ff       	sbrs	r22, 0
 862:	04 c0       	rjmp	.+8      	; 0x86c <__fp_round+0x20>
 864:	6f 5f       	subi	r22, 0xFF	; 255
 866:	7f 4f       	sbci	r23, 0xFF	; 255
 868:	8f 4f       	sbci	r24, 0xFF	; 255
 86a:	9f 4f       	sbci	r25, 0xFF	; 255
 86c:	08 95       	ret

0000086e <__fp_split3>:
 86e:	57 fd       	sbrc	r21, 7
 870:	90 58       	subi	r25, 0x80	; 128
 872:	44 0f       	add	r20, r20
 874:	55 1f       	adc	r21, r21
 876:	59 f0       	breq	.+22     	; 0x88e <__fp_splitA+0x10>
 878:	5f 3f       	cpi	r21, 0xFF	; 255
 87a:	71 f0       	breq	.+28     	; 0x898 <__fp_splitA+0x1a>
 87c:	47 95       	ror	r20

0000087e <__fp_splitA>:
 87e:	88 0f       	add	r24, r24
 880:	97 fb       	bst	r25, 7
 882:	99 1f       	adc	r25, r25
 884:	61 f0       	breq	.+24     	; 0x89e <__fp_splitA+0x20>
 886:	9f 3f       	cpi	r25, 0xFF	; 255
 888:	79 f0       	breq	.+30     	; 0x8a8 <__fp_splitA+0x2a>
 88a:	87 95       	ror	r24
 88c:	08 95       	ret
 88e:	12 16       	cp	r1, r18
 890:	13 06       	cpc	r1, r19
 892:	14 06       	cpc	r1, r20
 894:	55 1f       	adc	r21, r21
 896:	f2 cf       	rjmp	.-28     	; 0x87c <__fp_split3+0xe>
 898:	46 95       	lsr	r20
 89a:	f1 df       	rcall	.-30     	; 0x87e <__fp_splitA>
 89c:	08 c0       	rjmp	.+16     	; 0x8ae <__fp_splitA+0x30>
 89e:	16 16       	cp	r1, r22
 8a0:	17 06       	cpc	r1, r23
 8a2:	18 06       	cpc	r1, r24
 8a4:	99 1f       	adc	r25, r25
 8a6:	f1 cf       	rjmp	.-30     	; 0x88a <__fp_splitA+0xc>
 8a8:	86 95       	lsr	r24
 8aa:	71 05       	cpc	r23, r1
 8ac:	61 05       	cpc	r22, r1
 8ae:	08 94       	sec
 8b0:	08 95       	ret

000008b2 <__fp_zero>:
 8b2:	e8 94       	clt

000008b4 <__fp_szero>:
 8b4:	bb 27       	eor	r27, r27
 8b6:	66 27       	eor	r22, r22
 8b8:	77 27       	eor	r23, r23
 8ba:	cb 01       	movw	r24, r22
 8bc:	97 f9       	bld	r25, 7
 8be:	08 95       	ret

000008c0 <__mulsf3>:
 8c0:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__mulsf3x>
 8c4:	0c 94 26 04 	jmp	0x84c	; 0x84c <__fp_round>
 8c8:	0e 94 18 04 	call	0x830	; 0x830 <__fp_pscA>
 8cc:	38 f0       	brcs	.+14     	; 0x8dc <__mulsf3+0x1c>
 8ce:	0e 94 1f 04 	call	0x83e	; 0x83e <__fp_pscB>
 8d2:	20 f0       	brcs	.+8      	; 0x8dc <__mulsf3+0x1c>
 8d4:	95 23       	and	r25, r21
 8d6:	11 f0       	breq	.+4      	; 0x8dc <__mulsf3+0x1c>
 8d8:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__fp_inf>
 8dc:	0c 94 15 04 	jmp	0x82a	; 0x82a <__fp_nan>
 8e0:	11 24       	eor	r1, r1
 8e2:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__fp_szero>

000008e6 <__mulsf3x>:
 8e6:	0e 94 37 04 	call	0x86e	; 0x86e <__fp_split3>
 8ea:	70 f3       	brcs	.-36     	; 0x8c8 <__mulsf3+0x8>

000008ec <__mulsf3_pse>:
 8ec:	95 9f       	mul	r25, r21
 8ee:	c1 f3       	breq	.-16     	; 0x8e0 <__mulsf3+0x20>
 8f0:	95 0f       	add	r25, r21
 8f2:	50 e0       	ldi	r21, 0x00	; 0
 8f4:	55 1f       	adc	r21, r21
 8f6:	62 9f       	mul	r22, r18
 8f8:	f0 01       	movw	r30, r0
 8fa:	72 9f       	mul	r23, r18
 8fc:	bb 27       	eor	r27, r27
 8fe:	f0 0d       	add	r31, r0
 900:	b1 1d       	adc	r27, r1
 902:	63 9f       	mul	r22, r19
 904:	aa 27       	eor	r26, r26
 906:	f0 0d       	add	r31, r0
 908:	b1 1d       	adc	r27, r1
 90a:	aa 1f       	adc	r26, r26
 90c:	64 9f       	mul	r22, r20
 90e:	66 27       	eor	r22, r22
 910:	b0 0d       	add	r27, r0
 912:	a1 1d       	adc	r26, r1
 914:	66 1f       	adc	r22, r22
 916:	82 9f       	mul	r24, r18
 918:	22 27       	eor	r18, r18
 91a:	b0 0d       	add	r27, r0
 91c:	a1 1d       	adc	r26, r1
 91e:	62 1f       	adc	r22, r18
 920:	73 9f       	mul	r23, r19
 922:	b0 0d       	add	r27, r0
 924:	a1 1d       	adc	r26, r1
 926:	62 1f       	adc	r22, r18
 928:	83 9f       	mul	r24, r19
 92a:	a0 0d       	add	r26, r0
 92c:	61 1d       	adc	r22, r1
 92e:	22 1f       	adc	r18, r18
 930:	74 9f       	mul	r23, r20
 932:	33 27       	eor	r19, r19
 934:	a0 0d       	add	r26, r0
 936:	61 1d       	adc	r22, r1
 938:	23 1f       	adc	r18, r19
 93a:	84 9f       	mul	r24, r20
 93c:	60 0d       	add	r22, r0
 93e:	21 1d       	adc	r18, r1
 940:	82 2f       	mov	r24, r18
 942:	76 2f       	mov	r23, r22
 944:	6a 2f       	mov	r22, r26
 946:	11 24       	eor	r1, r1
 948:	9f 57       	subi	r25, 0x7F	; 127
 94a:	50 40       	sbci	r21, 0x00	; 0
 94c:	9a f0       	brmi	.+38     	; 0x974 <__stack+0x75>
 94e:	f1 f0       	breq	.+60     	; 0x98c <__stack+0x8d>
 950:	88 23       	and	r24, r24
 952:	4a f0       	brmi	.+18     	; 0x966 <__stack+0x67>
 954:	ee 0f       	add	r30, r30
 956:	ff 1f       	adc	r31, r31
 958:	bb 1f       	adc	r27, r27
 95a:	66 1f       	adc	r22, r22
 95c:	77 1f       	adc	r23, r23
 95e:	88 1f       	adc	r24, r24
 960:	91 50       	subi	r25, 0x01	; 1
 962:	50 40       	sbci	r21, 0x00	; 0
 964:	a9 f7       	brne	.-22     	; 0x950 <__stack+0x51>
 966:	9e 3f       	cpi	r25, 0xFE	; 254
 968:	51 05       	cpc	r21, r1
 96a:	80 f0       	brcs	.+32     	; 0x98c <__stack+0x8d>
 96c:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__fp_inf>
 970:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__fp_szero>
 974:	5f 3f       	cpi	r21, 0xFF	; 255
 976:	e4 f3       	brlt	.-8      	; 0x970 <__stack+0x71>
 978:	98 3e       	cpi	r25, 0xE8	; 232
 97a:	d4 f3       	brlt	.-12     	; 0x970 <__stack+0x71>
 97c:	86 95       	lsr	r24
 97e:	77 95       	ror	r23
 980:	67 95       	ror	r22
 982:	b7 95       	ror	r27
 984:	f7 95       	ror	r31
 986:	e7 95       	ror	r30
 988:	9f 5f       	subi	r25, 0xFF	; 255
 98a:	c1 f7       	brne	.-16     	; 0x97c <__stack+0x7d>
 98c:	fe 2b       	or	r31, r30
 98e:	88 0f       	add	r24, r24
 990:	91 1d       	adc	r25, r1
 992:	96 95       	lsr	r25
 994:	87 95       	ror	r24
 996:	97 f9       	bld	r25, 7
 998:	08 95       	ret

0000099a <round>:
 99a:	0e 94 3f 04 	call	0x87e	; 0x87e <__fp_splitA>
 99e:	e8 f0       	brcs	.+58     	; 0x9da <round+0x40>
 9a0:	9e 37       	cpi	r25, 0x7E	; 126
 9a2:	e8 f0       	brcs	.+58     	; 0x9de <round+0x44>
 9a4:	96 39       	cpi	r25, 0x96	; 150
 9a6:	b8 f4       	brcc	.+46     	; 0x9d6 <round+0x3c>
 9a8:	9e 38       	cpi	r25, 0x8E	; 142
 9aa:	48 f4       	brcc	.+18     	; 0x9be <round+0x24>
 9ac:	67 2f       	mov	r22, r23
 9ae:	78 2f       	mov	r23, r24
 9b0:	88 27       	eor	r24, r24
 9b2:	98 5f       	subi	r25, 0xF8	; 248
 9b4:	f9 cf       	rjmp	.-14     	; 0x9a8 <round+0xe>
 9b6:	86 95       	lsr	r24
 9b8:	77 95       	ror	r23
 9ba:	67 95       	ror	r22
 9bc:	93 95       	inc	r25
 9be:	95 39       	cpi	r25, 0x95	; 149
 9c0:	d0 f3       	brcs	.-12     	; 0x9b6 <round+0x1c>
 9c2:	b6 2f       	mov	r27, r22
 9c4:	b1 70       	andi	r27, 0x01	; 1
 9c6:	6b 0f       	add	r22, r27
 9c8:	71 1d       	adc	r23, r1
 9ca:	81 1d       	adc	r24, r1
 9cc:	20 f4       	brcc	.+8      	; 0x9d6 <round+0x3c>
 9ce:	87 95       	ror	r24
 9d0:	77 95       	ror	r23
 9d2:	67 95       	ror	r22
 9d4:	93 95       	inc	r25
 9d6:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <__fp_mintl>
 9da:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <__fp_mpack>
 9de:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__fp_szero>

000009e2 <__fp_mintl>:
 9e2:	88 23       	and	r24, r24
 9e4:	71 f4       	brne	.+28     	; 0xa02 <__fp_mintl+0x20>
 9e6:	77 23       	and	r23, r23
 9e8:	21 f0       	breq	.+8      	; 0x9f2 <__fp_mintl+0x10>
 9ea:	98 50       	subi	r25, 0x08	; 8
 9ec:	87 2b       	or	r24, r23
 9ee:	76 2f       	mov	r23, r22
 9f0:	07 c0       	rjmp	.+14     	; 0xa00 <__fp_mintl+0x1e>
 9f2:	66 23       	and	r22, r22
 9f4:	11 f4       	brne	.+4      	; 0x9fa <__fp_mintl+0x18>
 9f6:	99 27       	eor	r25, r25
 9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__fp_mintl+0x32>
 9fa:	90 51       	subi	r25, 0x10	; 16
 9fc:	86 2b       	or	r24, r22
 9fe:	70 e0       	ldi	r23, 0x00	; 0
 a00:	60 e0       	ldi	r22, 0x00	; 0
 a02:	2a f0       	brmi	.+10     	; 0xa0e <__fp_mintl+0x2c>
 a04:	9a 95       	dec	r25
 a06:	66 0f       	add	r22, r22
 a08:	77 1f       	adc	r23, r23
 a0a:	88 1f       	adc	r24, r24
 a0c:	da f7       	brpl	.-10     	; 0xa04 <__fp_mintl+0x22>
 a0e:	88 0f       	add	r24, r24
 a10:	96 95       	lsr	r25
 a12:	87 95       	ror	r24
 a14:	97 f9       	bld	r25, 7
 a16:	08 95       	ret

00000a18 <__fp_mpack>:
 a18:	9f 3f       	cpi	r25, 0xFF	; 255
 a1a:	31 f0       	breq	.+12     	; 0xa28 <__fp_mpack_finite+0xc>

00000a1c <__fp_mpack_finite>:
 a1c:	91 50       	subi	r25, 0x01	; 1
 a1e:	20 f4       	brcc	.+8      	; 0xa28 <__fp_mpack_finite+0xc>
 a20:	87 95       	ror	r24
 a22:	77 95       	ror	r23
 a24:	67 95       	ror	r22
 a26:	b7 95       	ror	r27
 a28:	88 0f       	add	r24, r24
 a2a:	91 1d       	adc	r25, r1
 a2c:	96 95       	lsr	r25
 a2e:	87 95       	ror	r24
 a30:	97 f9       	bld	r25, 7
 a32:	08 95       	ret

00000a34 <_exit>:
 a34:	f8 94       	cli

00000a36 <__stop_program>:
 a36:	ff cf       	rjmp	.-2      	; 0xa36 <__stop_program>
